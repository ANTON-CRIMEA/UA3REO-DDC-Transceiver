// -------------------------------------------------------------
//
// Module: tx_ciccomp
// Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
// Generated on: 2018-11-30 22:16:04
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// OptimizeForHDL: on
// EDAScriptGeneration: off
// Name: tx_ciccomp
// SerialPartition: 24
// TargetLanguage: Verilog
// TestBenchName: tx_ciccomp_tb
// TestBenchStimulus: step ramp chirp noise 
// GenerateHDLTestBench: off

// Filter Specifications:
//
// Sample Rate            : N/A (normalized frequency)
// Response               : CIC Compensator
// Specification          : Fp,Fst,Ap,Ast
// Interpolation Factor   : 2
// Multirate Type         : Interpolator
// Passband Ripple        : 1 dB
// Number of Sections     : 6
// CIC Rate Change Factor : 521
// Passband Edge          : 0.45
// Differential Delay     : 1
// Stopband Atten.        : 60 dB
// Stopband Edge          : 0.55
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully Serial
// Folding Factor        : 24
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure      : Direct-Form FIR Polyphase Interpolator
// Interpolation Factor  : 2
// Polyphase Length      : 24
// Filter Length         : 48
// Stable                : Yes
// Linear Phase          : Yes (Type 2)
//
// Arithmetic            : fixed
// Numerator             : s16,14 -> [-2 2)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module tx_ciccomp
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [15:0] filter_out; //sfix16_En15
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: tx_ciccomp
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b0000000010110001; //sfix16_En14
  parameter signed [15:0] coeffphase1_2 = 16'b0000000111001101; //sfix16_En14
  parameter signed [15:0] coeffphase1_3 = 16'b1111111001100010; //sfix16_En14
  parameter signed [15:0] coeffphase1_4 = 16'b0000001000000010; //sfix16_En14
  parameter signed [15:0] coeffphase1_5 = 16'b1111110101011111; //sfix16_En14
  parameter signed [15:0] coeffphase1_6 = 16'b0000001101100110; //sfix16_En14
  parameter signed [15:0] coeffphase1_7 = 16'b1111101110100010; //sfix16_En14
  parameter signed [15:0] coeffphase1_8 = 16'b0000010110010010; //sfix16_En14
  parameter signed [15:0] coeffphase1_9 = 16'b1111100011011000; //sfix16_En14
  parameter signed [15:0] coeffphase1_10 = 16'b0000100101100000; //sfix16_En14
  parameter signed [15:0] coeffphase1_11 = 16'b1111001100110010; //sfix16_En14
  parameter signed [15:0] coeffphase1_12 = 16'b0001000110011001; //sfix16_En14
  parameter signed [15:0] coeffphase1_13 = 16'b0100010001110100; //sfix16_En14
  parameter signed [15:0] coeffphase1_14 = 16'b1110101011000000; //sfix16_En14
  parameter signed [15:0] coeffphase1_15 = 16'b0000101001011100; //sfix16_En14
  parameter signed [15:0] coeffphase1_16 = 16'b1111101000011100; //sfix16_En14
  parameter signed [15:0] coeffphase1_17 = 16'b0000001110000100; //sfix16_En14
  parameter signed [15:0] coeffphase1_18 = 16'b1111110111101111; //sfix16_En14
  parameter signed [15:0] coeffphase1_19 = 16'b0000000100100010; //sfix16_En14
  parameter signed [15:0] coeffphase1_20 = 16'b1111111101111100; //sfix16_En14
  parameter signed [15:0] coeffphase1_21 = 16'b0000000000100010; //sfix16_En14
  parameter signed [15:0] coeffphase1_22 = 16'b0000000000011011; //sfix16_En14
  parameter signed [15:0] coeffphase1_23 = 16'b1111111111000010; //sfix16_En14
  parameter signed [15:0] coeffphase1_24 = 16'b0000000111100010; //sfix16_En14
  parameter signed [15:0] coeffphase2_1 = 16'b0000000111100010; //sfix16_En14
  parameter signed [15:0] coeffphase2_2 = 16'b1111111111000010; //sfix16_En14
  parameter signed [15:0] coeffphase2_3 = 16'b0000000000011011; //sfix16_En14
  parameter signed [15:0] coeffphase2_4 = 16'b0000000000100010; //sfix16_En14
  parameter signed [15:0] coeffphase2_5 = 16'b1111111101111100; //sfix16_En14
  parameter signed [15:0] coeffphase2_6 = 16'b0000000100100010; //sfix16_En14
  parameter signed [15:0] coeffphase2_7 = 16'b1111110111101111; //sfix16_En14
  parameter signed [15:0] coeffphase2_8 = 16'b0000001110000100; //sfix16_En14
  parameter signed [15:0] coeffphase2_9 = 16'b1111101000011100; //sfix16_En14
  parameter signed [15:0] coeffphase2_10 = 16'b0000101001011100; //sfix16_En14
  parameter signed [15:0] coeffphase2_11 = 16'b1110101011000000; //sfix16_En14
  parameter signed [15:0] coeffphase2_12 = 16'b0100010001110100; //sfix16_En14
  parameter signed [15:0] coeffphase2_13 = 16'b0001000110011001; //sfix16_En14
  parameter signed [15:0] coeffphase2_14 = 16'b1111001100110010; //sfix16_En14
  parameter signed [15:0] coeffphase2_15 = 16'b0000100101100000; //sfix16_En14
  parameter signed [15:0] coeffphase2_16 = 16'b1111100011011000; //sfix16_En14
  parameter signed [15:0] coeffphase2_17 = 16'b0000010110010010; //sfix16_En14
  parameter signed [15:0] coeffphase2_18 = 16'b1111101110100010; //sfix16_En14
  parameter signed [15:0] coeffphase2_19 = 16'b0000001101100110; //sfix16_En14
  parameter signed [15:0] coeffphase2_20 = 16'b1111110101011111; //sfix16_En14
  parameter signed [15:0] coeffphase2_21 = 16'b0000001000000010; //sfix16_En14
  parameter signed [15:0] coeffphase2_22 = 16'b1111111001100010; //sfix16_En14
  parameter signed [15:0] coeffphase2_23 = 16'b0000000111001101; //sfix16_En14
  parameter signed [15:0] coeffphase2_24 = 16'b0000000010110001; //sfix16_En14

  // Signals
  reg  [5:0] cur_count; // ufix6
  wire phase_0; // boolean
  wire phase_24; // boolean
  wire phase_24_1; // boolean
  reg  signed [15:0] delay_pipeline [0:23] ; // sfix16_En15
  wire signed [15:0] inputmux; // sfix16_En15
  wire signed [31:0] product1; // sfix32_En29
  wire signed [15:0] product1_mux; // sfix16_En14
  wire signed [36:0] sumofproducts; // sfix37_En29
  wire signed [36:0] sumofproducts_cast; // sfix37_En29
  wire signed [36:0] acc_sum; // sfix37_En29
  wire signed [36:0] accreg_in; // sfix37_En29
  reg  signed [36:0] accreg_out; // sfix37_En29
  wire signed [36:0] add_signext; // sfix37_En29
  wire signed [36:0] add_signext_1; // sfix37_En29
  wire signed [37:0] add_temp; // sfix38_En29
  reg  signed [36:0] accreg_final; // sfix37_En29
  wire signed [15:0] output_typeconvert; // sfix16_En15
  reg  signed [15:0] output_register; // sfix16_En15

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter
      if (reset == 1'b1) begin
        cur_count <= 6'b101111;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 6'b101111) begin
            cur_count <= 6'b000000;
          end
          else begin
            cur_count <= cur_count + 6'b000001;
          end
        end
      end
    end // Counter

  assign  phase_0 = (cur_count == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_24 = (((cur_count == 6'b011001) ||
                      (cur_count == 6'b000001)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_24_1 = (((cur_count == 6'b011010) ||
                        (cur_count == 6'b000010)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  //   ---------------- Delay Registers ----------------

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
        end
      end
    end // Delay_Pipeline_process


  // Mux(es) to select the input taps for multipliers 

  assign inputmux = (cur_count == 6'b000001) ? delay_pipeline[0] :
                   (cur_count == 6'b000010) ? delay_pipeline[1] :
                   (cur_count == 6'b000011) ? delay_pipeline[2] :
                   (cur_count == 6'b000100) ? delay_pipeline[3] :
                   (cur_count == 6'b000101) ? delay_pipeline[4] :
                   (cur_count == 6'b000110) ? delay_pipeline[5] :
                   (cur_count == 6'b000111) ? delay_pipeline[6] :
                   (cur_count == 6'b001000) ? delay_pipeline[7] :
                   (cur_count == 6'b001001) ? delay_pipeline[8] :
                   (cur_count == 6'b001010) ? delay_pipeline[9] :
                   (cur_count == 6'b001011) ? delay_pipeline[10] :
                   (cur_count == 6'b001100) ? delay_pipeline[11] :
                   (cur_count == 6'b001101) ? delay_pipeline[12] :
                   (cur_count == 6'b001110) ? delay_pipeline[13] :
                   (cur_count == 6'b001111) ? delay_pipeline[14] :
                   (cur_count == 6'b010000) ? delay_pipeline[15] :
                   (cur_count == 6'b010001) ? delay_pipeline[16] :
                   (cur_count == 6'b010010) ? delay_pipeline[17] :
                   (cur_count == 6'b010011) ? delay_pipeline[18] :
                   (cur_count == 6'b010100) ? delay_pipeline[19] :
                   (cur_count == 6'b010101) ? delay_pipeline[20] :
                   (cur_count == 6'b010110) ? delay_pipeline[21] :
                   (cur_count == 6'b010111) ? delay_pipeline[22] :
                   (cur_count == 6'b011000) ? delay_pipeline[23] :
                   (cur_count == 6'b011001) ? delay_pipeline[0] :
                   (cur_count == 6'b011010) ? delay_pipeline[1] :
                   (cur_count == 6'b011011) ? delay_pipeline[2] :
                   (cur_count == 6'b011100) ? delay_pipeline[3] :
                   (cur_count == 6'b011101) ? delay_pipeline[4] :
                   (cur_count == 6'b011110) ? delay_pipeline[5] :
                   (cur_count == 6'b011111) ? delay_pipeline[6] :
                   (cur_count == 6'b100000) ? delay_pipeline[7] :
                   (cur_count == 6'b100001) ? delay_pipeline[8] :
                   (cur_count == 6'b100010) ? delay_pipeline[9] :
                   (cur_count == 6'b100011) ? delay_pipeline[10] :
                   (cur_count == 6'b100100) ? delay_pipeline[11] :
                   (cur_count == 6'b100101) ? delay_pipeline[12] :
                   (cur_count == 6'b100110) ? delay_pipeline[13] :
                   (cur_count == 6'b100111) ? delay_pipeline[14] :
                   (cur_count == 6'b101000) ? delay_pipeline[15] :
                   (cur_count == 6'b101001) ? delay_pipeline[16] :
                   (cur_count == 6'b101010) ? delay_pipeline[17] :
                   (cur_count == 6'b101011) ? delay_pipeline[18] :
                   (cur_count == 6'b101100) ? delay_pipeline[19] :
                   (cur_count == 6'b101101) ? delay_pipeline[20] :
                   (cur_count == 6'b101110) ? delay_pipeline[21] :
                   (cur_count == 6'b101111) ? delay_pipeline[22] :
                   delay_pipeline[23];

  assign product1_mux = (cur_count == 6'b000001) ? coeffphase1_1 :
                       (cur_count == 6'b000010) ? coeffphase1_2 :
                       (cur_count == 6'b000011) ? coeffphase1_3 :
                       (cur_count == 6'b000100) ? coeffphase1_4 :
                       (cur_count == 6'b000101) ? coeffphase1_5 :
                       (cur_count == 6'b000110) ? coeffphase1_6 :
                       (cur_count == 6'b000111) ? coeffphase1_7 :
                       (cur_count == 6'b001000) ? coeffphase1_8 :
                       (cur_count == 6'b001001) ? coeffphase1_9 :
                       (cur_count == 6'b001010) ? coeffphase1_10 :
                       (cur_count == 6'b001011) ? coeffphase1_11 :
                       (cur_count == 6'b001100) ? coeffphase1_12 :
                       (cur_count == 6'b001101) ? coeffphase1_13 :
                       (cur_count == 6'b001110) ? coeffphase1_14 :
                       (cur_count == 6'b001111) ? coeffphase1_15 :
                       (cur_count == 6'b010000) ? coeffphase1_16 :
                       (cur_count == 6'b010001) ? coeffphase1_17 :
                       (cur_count == 6'b010010) ? coeffphase1_18 :
                       (cur_count == 6'b010011) ? coeffphase1_19 :
                       (cur_count == 6'b010100) ? coeffphase1_20 :
                       (cur_count == 6'b010101) ? coeffphase1_21 :
                       (cur_count == 6'b010110) ? coeffphase1_22 :
                       (cur_count == 6'b010111) ? coeffphase1_23 :
                       (cur_count == 6'b011000) ? coeffphase1_24 :
                       (cur_count == 6'b011001) ? coeffphase2_1 :
                       (cur_count == 6'b011010) ? coeffphase2_2 :
                       (cur_count == 6'b011011) ? coeffphase2_3 :
                       (cur_count == 6'b011100) ? coeffphase2_4 :
                       (cur_count == 6'b011101) ? coeffphase2_5 :
                       (cur_count == 6'b011110) ? coeffphase2_6 :
                       (cur_count == 6'b011111) ? coeffphase2_7 :
                       (cur_count == 6'b100000) ? coeffphase2_8 :
                       (cur_count == 6'b100001) ? coeffphase2_9 :
                       (cur_count == 6'b100010) ? coeffphase2_10 :
                       (cur_count == 6'b100011) ? coeffphase2_11 :
                       (cur_count == 6'b100100) ? coeffphase2_12 :
                       (cur_count == 6'b100101) ? coeffphase2_13 :
                       (cur_count == 6'b100110) ? coeffphase2_14 :
                       (cur_count == 6'b100111) ? coeffphase2_15 :
                       (cur_count == 6'b101000) ? coeffphase2_16 :
                       (cur_count == 6'b101001) ? coeffphase2_17 :
                       (cur_count == 6'b101010) ? coeffphase2_18 :
                       (cur_count == 6'b101011) ? coeffphase2_19 :
                       (cur_count == 6'b101100) ? coeffphase2_20 :
                       (cur_count == 6'b101101) ? coeffphase2_21 :
                       (cur_count == 6'b101110) ? coeffphase2_22 :
                       (cur_count == 6'b101111) ? coeffphase2_23 :
                       coeffphase2_24;
  assign product1 = inputmux * product1_mux;



  // Add the products in linear fashion

  assign sumofproducts = $signed({{5{product1[31]}}, product1});

  // Resize the sum of products to the accumulator type for full precision addition

  assign sumofproducts_cast = sumofproducts;

  // Accumulator register with a mux to reset it with the first addend

  assign add_signext = sumofproducts_cast;
  assign add_signext_1 = accreg_out;
  assign add_temp = add_signext + add_signext_1;
  assign acc_sum = add_temp[36:0];

  assign accreg_in = (phase_24 == 1'b1) ? sumofproducts_cast :
                    acc_sum;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        accreg_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          accreg_out <= accreg_in;
        end
      end
    end // Acc_reg_process

  // Register to hold the final value of the accumulated sum

  always @ (posedge clk or posedge reset)
    begin: Acc_finalreg_process
      if (reset == 1'b1) begin
        accreg_final <= 0;
      end
      else begin
        if (phase_24 == 1'b1) begin
          accreg_final <= accreg_out;
        end
      end
    end // Acc_finalreg_process

  assign output_typeconvert = (accreg_final[29:0] + {accreg_final[14], {13{~accreg_final[14]}}})>>>14;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_24_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign ce_out = phase_0;
  assign filter_out = output_register;
endmodule  // tx_ciccomp
