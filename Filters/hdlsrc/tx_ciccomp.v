// -------------------------------------------------------------
//
// Module: tx_ciccomp
// Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
// Generated on: 2018-11-06 21:11:22
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// OptimizeForHDL: on
// EDAScriptGeneration: off
// Name: tx_ciccomp
// SerialPartition: 32
// TargetLanguage: Verilog
// TestBenchName: tx_ciccomp_tb
// TestBenchStimulus: step ramp chirp noise 
// GenerateHDLTestBench: off

// Filter Specifications:
//
// Sample Rate            : N/A (normalized frequency)
// Response               : CIC Compensator
// Specification          : Fp,Fst,Ap,Ast
// Interpolation Factor   : 2
// Multirate Type         : Interpolator
// Passband Edge          : 0.9
// CIC Rate Change Factor : 521
// Number of Sections     : 6
// Stopband Atten.        : 60 dB
// Passband Ripple        : 1 dB
// Differential Delay     : 1
// Stopband Edge          : 0.99
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully Serial
// Folding Factor        : 32
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure      : Direct-Form FIR Polyphase Interpolator
// Interpolation Factor  : 2
// Polyphase Length      : 33
// Filter Length         : 66
// Stable                : Yes
// Linear Phase          : Yes (Type 2)
//
// Arithmetic            : fixed
// Numerator             : s16,13 -> [-4 4)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module tx_ciccomp
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [15:0] filter_out; //sfix16_En15
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: tx_ciccomp
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b0000001000101001; //sfix16_En13
  parameter signed [15:0] coeffphase1_2 = 16'b0000000101011111; //sfix16_En13
  parameter signed [15:0] coeffphase1_3 = 16'b0000000110011100; //sfix16_En13
  parameter signed [15:0] coeffphase1_4 = 16'b0000000101100110; //sfix16_En13
  parameter signed [15:0] coeffphase1_5 = 16'b0000000010001010; //sfix16_En13
  parameter signed [15:0] coeffphase1_6 = 16'b1111111011110000; //sfix16_En13
  parameter signed [15:0] coeffphase1_7 = 16'b1111110010101110; //sfix16_En13
  parameter signed [15:0] coeffphase1_8 = 16'b1111101000010001; //sfix16_En13
  parameter signed [15:0] coeffphase1_9 = 16'b1111011110100110; //sfix16_En13
  parameter signed [15:0] coeffphase1_10 = 16'b1111011000110011; //sfix16_En13
  parameter signed [15:0] coeffphase1_11 = 16'b1111011010101010; //sfix16_En13
  parameter signed [15:0] coeffphase1_12 = 16'b1111101000010100; //sfix16_En13
  parameter signed [15:0] coeffphase1_13 = 16'b0000000110011100; //sfix16_En13
  parameter signed [15:0] coeffphase1_14 = 16'b0000111010101111; //sfix16_En13
  parameter signed [15:0] coeffphase1_15 = 16'b0010001101111010; //sfix16_En13
  parameter signed [15:0] coeffphase1_16 = 16'b0100001010110001; //sfix16_En13
  parameter signed [15:0] coeffphase1_17 = 16'b0100110100110011; //sfix16_En13
  parameter signed [15:0] coeffphase1_18 = 16'b1010110011101010; //sfix16_En13
  parameter signed [15:0] coeffphase1_19 = 16'b1100111001000010; //sfix16_En13
  parameter signed [15:0] coeffphase1_20 = 16'b1110100000010010; //sfix16_En13
  parameter signed [15:0] coeffphase1_21 = 16'b1111100010101000; //sfix16_En13
  parameter signed [15:0] coeffphase1_22 = 16'b0000001011000000; //sfix16_En13
  parameter signed [15:0] coeffphase1_23 = 16'b0000100000010001; //sfix16_En13
  parameter signed [15:0] coeffphase1_24 = 16'b0000100111011111; //sfix16_En13
  parameter signed [15:0] coeffphase1_25 = 16'b0000100101000000; //sfix16_En13
  parameter signed [15:0] coeffphase1_26 = 16'b0000011100110110; //sfix16_En13
  parameter signed [15:0] coeffphase1_27 = 16'b0000010010011101; //sfix16_En13
  parameter signed [15:0] coeffphase1_28 = 16'b0000001000011111; //sfix16_En13
  parameter signed [15:0] coeffphase1_29 = 16'b0000000000101011; //sfix16_En13
  parameter signed [15:0] coeffphase1_30 = 16'b1111111011110001; //sfix16_En13
  parameter signed [15:0] coeffphase1_31 = 16'b1111111001101101; //sfix16_En13
  parameter signed [15:0] coeffphase1_32 = 16'b1111111001111000; //sfix16_En13
  parameter signed [15:0] coeffphase1_33 = 16'b1111111011011000; //sfix16_En13
  parameter signed [15:0] coeffphase2_1 = 16'b1111111011011000; //sfix16_En13
  parameter signed [15:0] coeffphase2_2 = 16'b1111111001111000; //sfix16_En13
  parameter signed [15:0] coeffphase2_3 = 16'b1111111001101101; //sfix16_En13
  parameter signed [15:0] coeffphase2_4 = 16'b1111111011110001; //sfix16_En13
  parameter signed [15:0] coeffphase2_5 = 16'b0000000000101011; //sfix16_En13
  parameter signed [15:0] coeffphase2_6 = 16'b0000001000011111; //sfix16_En13
  parameter signed [15:0] coeffphase2_7 = 16'b0000010010011101; //sfix16_En13
  parameter signed [15:0] coeffphase2_8 = 16'b0000011100110110; //sfix16_En13
  parameter signed [15:0] coeffphase2_9 = 16'b0000100101000000; //sfix16_En13
  parameter signed [15:0] coeffphase2_10 = 16'b0000100111011111; //sfix16_En13
  parameter signed [15:0] coeffphase2_11 = 16'b0000100000010001; //sfix16_En13
  parameter signed [15:0] coeffphase2_12 = 16'b0000001011000000; //sfix16_En13
  parameter signed [15:0] coeffphase2_13 = 16'b1111100010101000; //sfix16_En13
  parameter signed [15:0] coeffphase2_14 = 16'b1110100000010010; //sfix16_En13
  parameter signed [15:0] coeffphase2_15 = 16'b1100111001000010; //sfix16_En13
  parameter signed [15:0] coeffphase2_16 = 16'b1010110011101010; //sfix16_En13
  parameter signed [15:0] coeffphase2_17 = 16'b0100110100110011; //sfix16_En13
  parameter signed [15:0] coeffphase2_18 = 16'b0100001010110001; //sfix16_En13
  parameter signed [15:0] coeffphase2_19 = 16'b0010001101111010; //sfix16_En13
  parameter signed [15:0] coeffphase2_20 = 16'b0000111010101111; //sfix16_En13
  parameter signed [15:0] coeffphase2_21 = 16'b0000000110011100; //sfix16_En13
  parameter signed [15:0] coeffphase2_22 = 16'b1111101000010100; //sfix16_En13
  parameter signed [15:0] coeffphase2_23 = 16'b1111011010101010; //sfix16_En13
  parameter signed [15:0] coeffphase2_24 = 16'b1111011000110011; //sfix16_En13
  parameter signed [15:0] coeffphase2_25 = 16'b1111011110100110; //sfix16_En13
  parameter signed [15:0] coeffphase2_26 = 16'b1111101000010001; //sfix16_En13
  parameter signed [15:0] coeffphase2_27 = 16'b1111110010101110; //sfix16_En13
  parameter signed [15:0] coeffphase2_28 = 16'b1111111011110000; //sfix16_En13
  parameter signed [15:0] coeffphase2_29 = 16'b0000000010001010; //sfix16_En13
  parameter signed [15:0] coeffphase2_30 = 16'b0000000101100110; //sfix16_En13
  parameter signed [15:0] coeffphase2_31 = 16'b0000000110011100; //sfix16_En13
  parameter signed [15:0] coeffphase2_32 = 16'b0000000101011111; //sfix16_En13
  parameter signed [15:0] coeffphase2_33 = 16'b0000001000101001; //sfix16_En13

  // Signals
  reg  [5:0] cur_count; // ufix6
  wire phase_0; // boolean
  wire phase_32; // boolean
  wire phase_32_1; // boolean
  reg  signed [15:0] delay_pipeline [0:32] ; // sfix16_En15
  wire signed [16:0] tapsum_and; // sfix17_En15
  wire signed [15:0] add_signext; // sfix16_En15
  wire signed [15:0] add_signext_1; // sfix16_En15
  wire signed [16:0] tapsum_and_1; // sfix17_En15
  wire signed [15:0] add_signext_2; // sfix16_En15
  wire signed [15:0] add_signext_3; // sfix16_En15
  wire signed [16:0] delay_pipeline0_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline1_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline3_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline4_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline5_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline6_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline7_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline8_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline9_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline10_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline11_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline13_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline14_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline15_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline16_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline17_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline18_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline19_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline20_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline21_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline22_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline23_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline24_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline25_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline26_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline27_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline28_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline29_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline30_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline31_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline32_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline0_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline1_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline2_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline3_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline4_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline5_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline6_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline7_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline8_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline9_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline10_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline11_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline12_cast; // sfix17_En15
  wire signed [16:0] delay_pipeline13_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline14_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline15_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline16_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline17_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline18_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline19_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline21_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline22_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline23_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline24_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline25_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline26_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline27_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline28_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline29_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline31_cast_1; // sfix17_En15
  wire signed [16:0] delay_pipeline32_cast_1; // sfix17_En15
  wire signed [16:0] inputmux; // sfix17_En15
  wire signed [32:0] product1; // sfix33_En28
  wire signed [15:0] product1_mux; // sfix16_En13
  wire signed [37:0] sumofproducts; // sfix38_En28
  wire signed [37:0] sumofproducts_cast; // sfix38_En28
  wire signed [37:0] acc_sum; // sfix38_En28
  wire signed [37:0] accreg_in; // sfix38_En28
  reg  signed [37:0] accreg_out; // sfix38_En28
  wire signed [37:0] add_signext_4; // sfix38_En28
  wire signed [37:0] add_signext_5; // sfix38_En28
  wire signed [38:0] add_temp; // sfix39_En28
  reg  signed [37:0] accreg_final; // sfix38_En28
  wire signed [15:0] output_typeconvert; // sfix16_En15
  reg  signed [15:0] output_register; // sfix16_En15

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter
      if (reset == 1'b1) begin
        cur_count <= 6'b111111;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 6'b111111) begin
            cur_count <= 6'b000000;
          end
          else begin
            cur_count <= cur_count + 6'b000001;
          end
        end
      end
    end // Counter

  assign  phase_0 = (cur_count == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_32 = (((cur_count == 6'b100001) ||
                      (cur_count == 6'b000001)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_32_1 = (((cur_count == 6'b100010) ||
                        (cur_count == 6'b000010)) && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  //   ---------------- Delay Registers ----------------

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
        end
      end
    end // Delay_Pipeline_process


  // Adding (or subtracting) the taps based on the symmetry (or asymmetry)

  assign add_signext = delay_pipeline[2];
  assign add_signext_1 = delay_pipeline[12];
  assign tapsum_and = add_signext + add_signext_1;

  assign add_signext_2 = delay_pipeline[20];
  assign add_signext_3 = delay_pipeline[30];
  assign tapsum_and_1 = add_signext_2 + add_signext_3;

  // Mux(es) to select the input taps for multipliers 

  assign delay_pipeline0_cast = $signed({{1{delay_pipeline[0][15]}}, delay_pipeline[0]});

  assign delay_pipeline1_cast = $signed({{1{delay_pipeline[1][15]}}, delay_pipeline[1]});

  assign delay_pipeline3_cast = $signed({{1{delay_pipeline[3][15]}}, delay_pipeline[3]});

  assign delay_pipeline4_cast = $signed({{1{delay_pipeline[4][15]}}, delay_pipeline[4]});

  assign delay_pipeline5_cast = $signed({{1{delay_pipeline[5][15]}}, delay_pipeline[5]});

  assign delay_pipeline6_cast = $signed({{1{delay_pipeline[6][15]}}, delay_pipeline[6]});

  assign delay_pipeline7_cast = $signed({{1{delay_pipeline[7][15]}}, delay_pipeline[7]});

  assign delay_pipeline8_cast = $signed({{1{delay_pipeline[8][15]}}, delay_pipeline[8]});

  assign delay_pipeline9_cast = $signed({{1{delay_pipeline[9][15]}}, delay_pipeline[9]});

  assign delay_pipeline10_cast = $signed({{1{delay_pipeline[10][15]}}, delay_pipeline[10]});

  assign delay_pipeline11_cast = $signed({{1{delay_pipeline[11][15]}}, delay_pipeline[11]});

  assign delay_pipeline13_cast = $signed({{1{delay_pipeline[13][15]}}, delay_pipeline[13]});

  assign delay_pipeline14_cast = $signed({{1{delay_pipeline[14][15]}}, delay_pipeline[14]});

  assign delay_pipeline15_cast = $signed({{1{delay_pipeline[15][15]}}, delay_pipeline[15]});

  assign delay_pipeline16_cast = $signed({{1{delay_pipeline[16][15]}}, delay_pipeline[16]});

  assign delay_pipeline17_cast = $signed({{1{delay_pipeline[17][15]}}, delay_pipeline[17]});

  assign delay_pipeline18_cast = $signed({{1{delay_pipeline[18][15]}}, delay_pipeline[18]});

  assign delay_pipeline19_cast = $signed({{1{delay_pipeline[19][15]}}, delay_pipeline[19]});

  assign delay_pipeline20_cast = $signed({{1{delay_pipeline[20][15]}}, delay_pipeline[20]});

  assign delay_pipeline21_cast = $signed({{1{delay_pipeline[21][15]}}, delay_pipeline[21]});

  assign delay_pipeline22_cast = $signed({{1{delay_pipeline[22][15]}}, delay_pipeline[22]});

  assign delay_pipeline23_cast = $signed({{1{delay_pipeline[23][15]}}, delay_pipeline[23]});

  assign delay_pipeline24_cast = $signed({{1{delay_pipeline[24][15]}}, delay_pipeline[24]});

  assign delay_pipeline25_cast = $signed({{1{delay_pipeline[25][15]}}, delay_pipeline[25]});

  assign delay_pipeline26_cast = $signed({{1{delay_pipeline[26][15]}}, delay_pipeline[26]});

  assign delay_pipeline27_cast = $signed({{1{delay_pipeline[27][15]}}, delay_pipeline[27]});

  assign delay_pipeline28_cast = $signed({{1{delay_pipeline[28][15]}}, delay_pipeline[28]});

  assign delay_pipeline29_cast = $signed({{1{delay_pipeline[29][15]}}, delay_pipeline[29]});

  assign delay_pipeline30_cast = $signed({{1{delay_pipeline[30][15]}}, delay_pipeline[30]});

  assign delay_pipeline31_cast = $signed({{1{delay_pipeline[31][15]}}, delay_pipeline[31]});

  assign delay_pipeline32_cast = $signed({{1{delay_pipeline[32][15]}}, delay_pipeline[32]});

  assign delay_pipeline0_cast_1 = $signed({{1{delay_pipeline[0][15]}}, delay_pipeline[0]});

  assign delay_pipeline1_cast_1 = $signed({{1{delay_pipeline[1][15]}}, delay_pipeline[1]});

  assign delay_pipeline2_cast = $signed({{1{delay_pipeline[2][15]}}, delay_pipeline[2]});

  assign delay_pipeline3_cast_1 = $signed({{1{delay_pipeline[3][15]}}, delay_pipeline[3]});

  assign delay_pipeline4_cast_1 = $signed({{1{delay_pipeline[4][15]}}, delay_pipeline[4]});

  assign delay_pipeline5_cast_1 = $signed({{1{delay_pipeline[5][15]}}, delay_pipeline[5]});

  assign delay_pipeline6_cast_1 = $signed({{1{delay_pipeline[6][15]}}, delay_pipeline[6]});

  assign delay_pipeline7_cast_1 = $signed({{1{delay_pipeline[7][15]}}, delay_pipeline[7]});

  assign delay_pipeline8_cast_1 = $signed({{1{delay_pipeline[8][15]}}, delay_pipeline[8]});

  assign delay_pipeline9_cast_1 = $signed({{1{delay_pipeline[9][15]}}, delay_pipeline[9]});

  assign delay_pipeline10_cast_1 = $signed({{1{delay_pipeline[10][15]}}, delay_pipeline[10]});

  assign delay_pipeline11_cast_1 = $signed({{1{delay_pipeline[11][15]}}, delay_pipeline[11]});

  assign delay_pipeline12_cast = $signed({{1{delay_pipeline[12][15]}}, delay_pipeline[12]});

  assign delay_pipeline13_cast_1 = $signed({{1{delay_pipeline[13][15]}}, delay_pipeline[13]});

  assign delay_pipeline14_cast_1 = $signed({{1{delay_pipeline[14][15]}}, delay_pipeline[14]});

  assign delay_pipeline15_cast_1 = $signed({{1{delay_pipeline[15][15]}}, delay_pipeline[15]});

  assign delay_pipeline16_cast_1 = $signed({{1{delay_pipeline[16][15]}}, delay_pipeline[16]});

  assign delay_pipeline17_cast_1 = $signed({{1{delay_pipeline[17][15]}}, delay_pipeline[17]});

  assign delay_pipeline18_cast_1 = $signed({{1{delay_pipeline[18][15]}}, delay_pipeline[18]});

  assign delay_pipeline19_cast_1 = $signed({{1{delay_pipeline[19][15]}}, delay_pipeline[19]});

  assign delay_pipeline21_cast_1 = $signed({{1{delay_pipeline[21][15]}}, delay_pipeline[21]});

  assign delay_pipeline22_cast_1 = $signed({{1{delay_pipeline[22][15]}}, delay_pipeline[22]});

  assign delay_pipeline23_cast_1 = $signed({{1{delay_pipeline[23][15]}}, delay_pipeline[23]});

  assign delay_pipeline24_cast_1 = $signed({{1{delay_pipeline[24][15]}}, delay_pipeline[24]});

  assign delay_pipeline25_cast_1 = $signed({{1{delay_pipeline[25][15]}}, delay_pipeline[25]});

  assign delay_pipeline26_cast_1 = $signed({{1{delay_pipeline[26][15]}}, delay_pipeline[26]});

  assign delay_pipeline27_cast_1 = $signed({{1{delay_pipeline[27][15]}}, delay_pipeline[27]});

  assign delay_pipeline28_cast_1 = $signed({{1{delay_pipeline[28][15]}}, delay_pipeline[28]});

  assign delay_pipeline29_cast_1 = $signed({{1{delay_pipeline[29][15]}}, delay_pipeline[29]});

  assign delay_pipeline31_cast_1 = $signed({{1{delay_pipeline[31][15]}}, delay_pipeline[31]});

  assign delay_pipeline32_cast_1 = $signed({{1{delay_pipeline[32][15]}}, delay_pipeline[32]});

  assign inputmux = (cur_count == 6'b000001) ? delay_pipeline0_cast :
                   (cur_count == 6'b000010) ? delay_pipeline1_cast :
                   (cur_count == 6'b000011) ? tapsum_and :
                   (cur_count == 6'b000100) ? delay_pipeline3_cast :
                   (cur_count == 6'b000101) ? delay_pipeline4_cast :
                   (cur_count == 6'b000110) ? delay_pipeline5_cast :
                   (cur_count == 6'b000111) ? delay_pipeline6_cast :
                   (cur_count == 6'b001000) ? delay_pipeline7_cast :
                   (cur_count == 6'b001001) ? delay_pipeline8_cast :
                   (cur_count == 6'b001010) ? delay_pipeline9_cast :
                   (cur_count == 6'b001011) ? delay_pipeline10_cast :
                   (cur_count == 6'b001100) ? delay_pipeline11_cast :
                   (cur_count == 6'b001101) ? delay_pipeline13_cast :
                   (cur_count == 6'b001110) ? delay_pipeline14_cast :
                   (cur_count == 6'b001111) ? delay_pipeline15_cast :
                   (cur_count == 6'b010000) ? delay_pipeline16_cast :
                   (cur_count == 6'b010001) ? delay_pipeline17_cast :
                   (cur_count == 6'b010010) ? delay_pipeline18_cast :
                   (cur_count == 6'b010011) ? delay_pipeline19_cast :
                   (cur_count == 6'b010100) ? delay_pipeline20_cast :
                   (cur_count == 6'b010101) ? delay_pipeline21_cast :
                   (cur_count == 6'b010110) ? delay_pipeline22_cast :
                   (cur_count == 6'b010111) ? delay_pipeline23_cast :
                   (cur_count == 6'b011000) ? delay_pipeline24_cast :
                   (cur_count == 6'b011001) ? delay_pipeline25_cast :
                   (cur_count == 6'b011010) ? delay_pipeline26_cast :
                   (cur_count == 6'b011011) ? delay_pipeline27_cast :
                   (cur_count == 6'b011100) ? delay_pipeline28_cast :
                   (cur_count == 6'b011101) ? delay_pipeline29_cast :
                   (cur_count == 6'b011110) ? delay_pipeline30_cast :
                   (cur_count == 6'b011111) ? delay_pipeline31_cast :
                   (cur_count == 6'b100000) ? delay_pipeline32_cast :
                   (cur_count == 6'b100001) ? delay_pipeline0_cast_1 :
                   (cur_count == 6'b100010) ? delay_pipeline1_cast_1 :
                   (cur_count == 6'b100011) ? delay_pipeline2_cast :
                   (cur_count == 6'b100100) ? delay_pipeline3_cast_1 :
                   (cur_count == 6'b100101) ? delay_pipeline4_cast_1 :
                   (cur_count == 6'b100110) ? delay_pipeline5_cast_1 :
                   (cur_count == 6'b100111) ? delay_pipeline6_cast_1 :
                   (cur_count == 6'b101000) ? delay_pipeline7_cast_1 :
                   (cur_count == 6'b101001) ? delay_pipeline8_cast_1 :
                   (cur_count == 6'b101010) ? delay_pipeline9_cast_1 :
                   (cur_count == 6'b101011) ? delay_pipeline10_cast_1 :
                   (cur_count == 6'b101100) ? delay_pipeline11_cast_1 :
                   (cur_count == 6'b101101) ? delay_pipeline12_cast :
                   (cur_count == 6'b101110) ? delay_pipeline13_cast_1 :
                   (cur_count == 6'b101111) ? delay_pipeline14_cast_1 :
                   (cur_count == 6'b110000) ? delay_pipeline15_cast_1 :
                   (cur_count == 6'b110001) ? delay_pipeline16_cast_1 :
                   (cur_count == 6'b110010) ? delay_pipeline17_cast_1 :
                   (cur_count == 6'b110011) ? delay_pipeline18_cast_1 :
                   (cur_count == 6'b110100) ? delay_pipeline19_cast_1 :
                   (cur_count == 6'b110101) ? tapsum_and_1 :
                   (cur_count == 6'b110110) ? delay_pipeline21_cast_1 :
                   (cur_count == 6'b110111) ? delay_pipeline22_cast_1 :
                   (cur_count == 6'b111000) ? delay_pipeline23_cast_1 :
                   (cur_count == 6'b111001) ? delay_pipeline24_cast_1 :
                   (cur_count == 6'b111010) ? delay_pipeline25_cast_1 :
                   (cur_count == 6'b111011) ? delay_pipeline26_cast_1 :
                   (cur_count == 6'b111100) ? delay_pipeline27_cast_1 :
                   (cur_count == 6'b111101) ? delay_pipeline28_cast_1 :
                   (cur_count == 6'b111110) ? delay_pipeline29_cast_1 :
                   (cur_count == 6'b111111) ? delay_pipeline31_cast_1 :
                   delay_pipeline32_cast_1;

  assign product1_mux = (cur_count == 6'b000001) ? coeffphase1_1 :
                       (cur_count == 6'b000010) ? coeffphase1_2 :
                       (cur_count == 6'b000011) ? coeffphase1_3 :
                       (cur_count == 6'b000100) ? coeffphase1_4 :
                       (cur_count == 6'b000101) ? coeffphase1_5 :
                       (cur_count == 6'b000110) ? coeffphase1_6 :
                       (cur_count == 6'b000111) ? coeffphase1_7 :
                       (cur_count == 6'b001000) ? coeffphase1_8 :
                       (cur_count == 6'b001001) ? coeffphase1_9 :
                       (cur_count == 6'b001010) ? coeffphase1_10 :
                       (cur_count == 6'b001011) ? coeffphase1_11 :
                       (cur_count == 6'b001100) ? coeffphase1_12 :
                       (cur_count == 6'b001101) ? coeffphase1_14 :
                       (cur_count == 6'b001110) ? coeffphase1_15 :
                       (cur_count == 6'b001111) ? coeffphase1_16 :
                       (cur_count == 6'b010000) ? coeffphase1_17 :
                       (cur_count == 6'b010001) ? coeffphase1_18 :
                       (cur_count == 6'b010010) ? coeffphase1_19 :
                       (cur_count == 6'b010011) ? coeffphase1_20 :
                       (cur_count == 6'b010100) ? coeffphase1_21 :
                       (cur_count == 6'b010101) ? coeffphase1_22 :
                       (cur_count == 6'b010110) ? coeffphase1_23 :
                       (cur_count == 6'b010111) ? coeffphase1_24 :
                       (cur_count == 6'b011000) ? coeffphase1_25 :
                       (cur_count == 6'b011001) ? coeffphase1_26 :
                       (cur_count == 6'b011010) ? coeffphase1_27 :
                       (cur_count == 6'b011011) ? coeffphase1_28 :
                       (cur_count == 6'b011100) ? coeffphase1_29 :
                       (cur_count == 6'b011101) ? coeffphase1_30 :
                       (cur_count == 6'b011110) ? coeffphase1_31 :
                       (cur_count == 6'b011111) ? coeffphase1_32 :
                       (cur_count == 6'b100000) ? coeffphase1_33 :
                       (cur_count == 6'b100001) ? coeffphase2_1 :
                       (cur_count == 6'b100010) ? coeffphase2_2 :
                       (cur_count == 6'b100011) ? coeffphase2_3 :
                       (cur_count == 6'b100100) ? coeffphase2_4 :
                       (cur_count == 6'b100101) ? coeffphase2_5 :
                       (cur_count == 6'b100110) ? coeffphase2_6 :
                       (cur_count == 6'b100111) ? coeffphase2_7 :
                       (cur_count == 6'b101000) ? coeffphase2_8 :
                       (cur_count == 6'b101001) ? coeffphase2_9 :
                       (cur_count == 6'b101010) ? coeffphase2_10 :
                       (cur_count == 6'b101011) ? coeffphase2_11 :
                       (cur_count == 6'b101100) ? coeffphase2_12 :
                       (cur_count == 6'b101101) ? coeffphase2_13 :
                       (cur_count == 6'b101110) ? coeffphase2_14 :
                       (cur_count == 6'b101111) ? coeffphase2_15 :
                       (cur_count == 6'b110000) ? coeffphase2_16 :
                       (cur_count == 6'b110001) ? coeffphase2_17 :
                       (cur_count == 6'b110010) ? coeffphase2_18 :
                       (cur_count == 6'b110011) ? coeffphase2_19 :
                       (cur_count == 6'b110100) ? coeffphase2_20 :
                       (cur_count == 6'b110101) ? coeffphase2_21 :
                       (cur_count == 6'b110110) ? coeffphase2_22 :
                       (cur_count == 6'b110111) ? coeffphase2_23 :
                       (cur_count == 6'b111000) ? coeffphase2_24 :
                       (cur_count == 6'b111001) ? coeffphase2_25 :
                       (cur_count == 6'b111010) ? coeffphase2_26 :
                       (cur_count == 6'b111011) ? coeffphase2_27 :
                       (cur_count == 6'b111100) ? coeffphase2_28 :
                       (cur_count == 6'b111101) ? coeffphase2_29 :
                       (cur_count == 6'b111110) ? coeffphase2_30 :
                       (cur_count == 6'b111111) ? coeffphase2_32 :
                       coeffphase2_33;
  assign product1 = inputmux * product1_mux;



  // Add the products in linear fashion

  assign sumofproducts = $signed({{5{product1[32]}}, product1});

  // Resize the sum of products to the accumulator type for full precision addition

  assign sumofproducts_cast = sumofproducts;

  // Accumulator register with a mux to reset it with the first addend

  assign add_signext_4 = sumofproducts_cast;
  assign add_signext_5 = accreg_out;
  assign add_temp = add_signext_4 + add_signext_5;
  assign acc_sum = add_temp[37:0];

  assign accreg_in = (phase_32 == 1'b1) ? sumofproducts_cast :
                    acc_sum;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        accreg_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          accreg_out <= accreg_in;
        end
      end
    end // Acc_reg_process

  // Register to hold the final value of the accumulated sum

  always @ (posedge clk or posedge reset)
    begin: Acc_finalreg_process
      if (reset == 1'b1) begin
        accreg_final <= 0;
      end
      else begin
        if (phase_32 == 1'b1) begin
          accreg_final <= accreg_out;
        end
      end
    end // Acc_finalreg_process

  assign output_typeconvert = (accreg_final[28:0] + {accreg_final[13], {12{~accreg_final[13]}}})>>>13;

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_32_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign ce_out = phase_0;
  assign filter_out = output_register;
endmodule  // tx_ciccomp
