-- -------------------------------------------------------------
--
-- Module: rx_ciccomp
-- Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
-- Generated on: 2019-11-09 19:11:30
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- Name: rx_ciccomp
-- SerialPartition: 7
-- TestBenchName: rx_ciccomp_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : CIC Compensator
-- Specification          : N,Fp,Fst
-- Decimation Factor      : 10
-- Multirate Type         : Decimator
-- Stopband Edge          : 0.55
-- CIC Rate Change Factor : 256
-- Differential Delay     : 1
-- Filter Order           : 64
-- Passband Edge          : 0.45
-- Number of Sections     : 5
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 7
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 10
-- Polyphase Length   : 7
-- Filter Length      : 65
-- Stable             : Yes
-- Linear Phase       : Yes (Type 1)
--
-- Arithmetic         : fixed
-- Numerator          : s32,31 -> [-1 1)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY rx_ciccomp IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En31
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         ce_out                          :   OUT   std_logic  
         );

END rx_ciccomp;


----------------------------------------------------------------
--Module Architecture: rx_ciccomp
----------------------------------------------------------------
ARCHITECTURE rtl OF rx_ciccomp IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32_En31
  -- Constants
  CONSTANT const_one                      : std_logic := '1'; -- boolean
  CONSTANT coeffphase1_1                  : signed(31 DOWNTO 0) := to_signed(39525, 32); -- sfix32_En31
  CONSTANT coeffphase1_2                  : signed(31 DOWNTO 0) := to_signed(-522725, 32); -- sfix32_En31
  CONSTANT coeffphase1_3                  : signed(31 DOWNTO 0) := to_signed(3946716, 32); -- sfix32_En31
  CONSTANT coeffphase1_4                  : signed(31 DOWNTO 0) := to_signed(-138931995, 32); -- sfix32_En31
  CONSTANT coeffphase1_5                  : signed(31 DOWNTO 0) := to_signed(10404066, 32); -- sfix32_En31
  CONSTANT coeffphase1_6                  : signed(31 DOWNTO 0) := to_signed(-1166101, 32); -- sfix32_En31
  CONSTANT coeffphase1_7                  : signed(31 DOWNTO 0) := to_signed(133398, 32); -- sfix32_En31
  CONSTANT coeffphase2_1                  : signed(31 DOWNTO 0) := to_signed(-4036417, 32); -- sfix32_En31
  CONSTANT coeffphase2_2                  : signed(31 DOWNTO 0) := to_signed(20237125, 32); -- sfix32_En31
  CONSTANT coeffphase2_3                  : signed(31 DOWNTO 0) := to_signed(-80706965, 32); -- sfix32_En31
  CONSTANT coeffphase2_4                  : signed(31 DOWNTO 0) := to_signed(756367547, 32); -- sfix32_En31
  CONSTANT coeffphase2_5                  : signed(31 DOWNTO 0) := to_signed(107040167, 32); -- sfix32_En31
  CONSTANT coeffphase2_6                  : signed(31 DOWNTO 0) := to_signed(-27220573, 32); -- sfix32_En31
  CONSTANT coeffphase2_7                  : signed(31 DOWNTO 0) := to_signed(4587202, 32); -- sfix32_En31
  CONSTANT coeffphase3_1                  : signed(31 DOWNTO 0) := to_signed(-89325, 32); -- sfix32_En31
  CONSTANT coeffphase3_2                  : signed(31 DOWNTO 0) := to_signed(784298, 32); -- sfix32_En31
  CONSTANT coeffphase3_3                  : signed(31 DOWNTO 0) := to_signed(-6224344, 32); -- sfix32_En31
  CONSTANT coeffphase3_4                  : signed(31 DOWNTO 0) := to_signed(1291700646, 32); -- sfix32_En31
  CONSTANT coeffphase3_5                  : signed(31 DOWNTO 0) := to_signed(-6224344, 32); -- sfix32_En31
  CONSTANT coeffphase3_6                  : signed(31 DOWNTO 0) := to_signed(784298, 32); -- sfix32_En31
  CONSTANT coeffphase3_7                  : signed(31 DOWNTO 0) := to_signed(-89325, 32); -- sfix32_En31
  CONSTANT coeffphase4_1                  : signed(31 DOWNTO 0) := to_signed(4587202, 32); -- sfix32_En31
  CONSTANT coeffphase4_2                  : signed(31 DOWNTO 0) := to_signed(-27220573, 32); -- sfix32_En31
  CONSTANT coeffphase4_3                  : signed(31 DOWNTO 0) := to_signed(107040167, 32); -- sfix32_En31
  CONSTANT coeffphase4_4                  : signed(31 DOWNTO 0) := to_signed(756367547, 32); -- sfix32_En31
  CONSTANT coeffphase4_5                  : signed(31 DOWNTO 0) := to_signed(-80706965, 32); -- sfix32_En31
  CONSTANT coeffphase4_6                  : signed(31 DOWNTO 0) := to_signed(20237125, 32); -- sfix32_En31
  CONSTANT coeffphase4_7                  : signed(31 DOWNTO 0) := to_signed(-4036417, 32); -- sfix32_En31
  CONSTANT coeffphase5_1                  : signed(31 DOWNTO 0) := to_signed(133398, 32); -- sfix32_En31
  CONSTANT coeffphase5_2                  : signed(31 DOWNTO 0) := to_signed(-1166101, 32); -- sfix32_En31
  CONSTANT coeffphase5_3                  : signed(31 DOWNTO 0) := to_signed(10404066, 32); -- sfix32_En31
  CONSTANT coeffphase5_4                  : signed(31 DOWNTO 0) := to_signed(-138931995, 32); -- sfix32_En31
  CONSTANT coeffphase5_5                  : signed(31 DOWNTO 0) := to_signed(3946716, 32); -- sfix32_En31
  CONSTANT coeffphase5_6                  : signed(31 DOWNTO 0) := to_signed(-522725, 32); -- sfix32_En31
  CONSTANT coeffphase5_7                  : signed(31 DOWNTO 0) := to_signed(39525, 32); -- sfix32_En31
  CONSTANT coeffphase6_1                  : signed(31 DOWNTO 0) := to_signed(-7092524, 32); -- sfix32_En31
  CONSTANT coeffphase6_2                  : signed(31 DOWNTO 0) := to_signed(36044616, 32); -- sfix32_En31
  CONSTANT coeffphase6_3                  : signed(31 DOWNTO 0) := to_signed(-146167014, 32); -- sfix32_En31
  CONSTANT coeffphase6_4                  : signed(31 DOWNTO 0) := to_signed(-346185788, 32); -- sfix32_En31
  CONSTANT coeffphase6_5                  : signed(31 DOWNTO 0) := to_signed(61656230, 32); -- sfix32_En31
  CONSTANT coeffphase6_6                  : signed(31 DOWNTO 0) := to_signed(-14725206, 32); -- sfix32_En31
  CONSTANT coeffphase6_7                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En31
  CONSTANT coeffphase7_1                  : signed(31 DOWNTO 0) := to_signed(-218151, 32); -- sfix32_En31
  CONSTANT coeffphase7_2                  : signed(31 DOWNTO 0) := to_signed(1730292, 32); -- sfix32_En31
  CONSTANT coeffphase7_3                  : signed(31 DOWNTO 0) := to_signed(-19213545, 32); -- sfix32_En31
  CONSTANT coeffphase7_4                  : signed(31 DOWNTO 0) := to_signed(42596647, 32); -- sfix32_En31
  CONSTANT coeffphase7_5                  : signed(31 DOWNTO 0) := to_signed(-2589494, 32); -- sfix32_En31
  CONSTANT coeffphase7_6                  : signed(31 DOWNTO 0) := to_signed(341325, 32); -- sfix32_En31
  CONSTANT coeffphase7_7                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En31
  CONSTANT coeffphase8_1                  : signed(31 DOWNTO 0) := to_signed(10414624, 32); -- sfix32_En31
  CONSTANT coeffphase8_2                  : signed(31 DOWNTO 0) := to_signed(-47242793, 32); -- sfix32_En31
  CONSTANT coeffphase8_3                  : signed(31 DOWNTO 0) := to_signed(211626429, 32); -- sfix32_En31
  CONSTANT coeffphase8_4                  : signed(31 DOWNTO 0) := to_signed(211626429, 32); -- sfix32_En31
  CONSTANT coeffphase8_5                  : signed(31 DOWNTO 0) := to_signed(-47242793, 32); -- sfix32_En31
  CONSTANT coeffphase8_6                  : signed(31 DOWNTO 0) := to_signed(10414624, 32); -- sfix32_En31
  CONSTANT coeffphase8_7                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En31
  CONSTANT coeffphase9_1                  : signed(31 DOWNTO 0) := to_signed(341325, 32); -- sfix32_En31
  CONSTANT coeffphase9_2                  : signed(31 DOWNTO 0) := to_signed(-2589494, 32); -- sfix32_En31
  CONSTANT coeffphase9_3                  : signed(31 DOWNTO 0) := to_signed(42596647, 32); -- sfix32_En31
  CONSTANT coeffphase9_4                  : signed(31 DOWNTO 0) := to_signed(-19213545, 32); -- sfix32_En31
  CONSTANT coeffphase9_5                  : signed(31 DOWNTO 0) := to_signed(1730292, 32); -- sfix32_En31
  CONSTANT coeffphase9_6                  : signed(31 DOWNTO 0) := to_signed(-218151, 32); -- sfix32_En31
  CONSTANT coeffphase9_7                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En31
  CONSTANT coeffphase10_1                 : signed(31 DOWNTO 0) := to_signed(-14725206, 32); -- sfix32_En31
  CONSTANT coeffphase10_2                 : signed(31 DOWNTO 0) := to_signed(61656230, 32); -- sfix32_En31
  CONSTANT coeffphase10_3                 : signed(31 DOWNTO 0) := to_signed(-346185788, 32); -- sfix32_En31
  CONSTANT coeffphase10_4                 : signed(31 DOWNTO 0) := to_signed(-146167014, 32); -- sfix32_En31
  CONSTANT coeffphase10_5                 : signed(31 DOWNTO 0) := to_signed(36044616, 32); -- sfix32_En31
  CONSTANT coeffphase10_6                 : signed(31 DOWNTO 0) := to_signed(-7092524, 32); -- sfix32_En31
  CONSTANT coeffphase10_7                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En31

  CONSTANT const_zero                     : signed(63 DOWNTO 0) := to_signed(0, 64); -- sfix64_En62
  -- Signals
  SIGNAL cur_count                        : unsigned(6 DOWNTO 0); -- ufix7
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_14                         : std_logic; -- boolean
  SIGNAL phase_21                         : std_logic; -- boolean
  SIGNAL phase_28                         : std_logic; -- boolean
  SIGNAL phase_35                         : std_logic; -- boolean
  SIGNAL phase_42                         : std_logic; -- boolean
  SIGNAL phase_49                         : std_logic; -- boolean
  SIGNAL phase_56                         : std_logic; -- boolean
  SIGNAL phase_63                         : std_logic; -- boolean
  SIGNAL phase_7                          : std_logic; -- boolean
  SIGNAL phase_8                          : std_logic; -- boolean
  SIGNAL phase_temp                       : std_logic; -- boolean
  SIGNAL phase_reg_temp                   : std_logic; -- boolean
  SIGNAL phase_reg                        : std_logic; -- boolean
  SIGNAL int_delay_pipe                   : std_logic_vector(0 TO 69); -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  SIGNAL input_register                   : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase2            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase3            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase4            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase5            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase6            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase7            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase8            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL input_pipeline_phase9            : input_pipeline_type(0 TO 6); -- sfix32_En31
  SIGNAL inputmux                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product                          : signed(63 DOWNTO 0); -- sfix64_En62
  SIGNAL product_mux                      : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL phasemux                         : signed(63 DOWNTO 0); -- sfix64_En62
  SIGNAL sumofproducts                    : signed(63 DOWNTO 0); -- sfix64_En62
  SIGNAL sumofproducts_cast               : signed(69 DOWNTO 0); -- sfix70_En62
  SIGNAL acc_sum                          : signed(69 DOWNTO 0); -- sfix70_En62
  SIGNAL accreg_in                        : signed(69 DOWNTO 0); -- sfix70_En62
  SIGNAL accreg_out                       : signed(69 DOWNTO 0); -- sfix70_En62
  SIGNAL add_temp                         : signed(70 DOWNTO 0); -- sfix71_En62
  SIGNAL accreg_final                     : signed(69 DOWNTO 0); -- sfix70_En62
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(69, 7);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(69, 7) THEN
          cur_count <= to_unsigned(0, 7);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 7);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 7) AND clk_enable = '1' ELSE '0';

  phase_1 <= '1' WHEN  (((cur_count = to_unsigned(1, 7))  OR
                         (cur_count = to_unsigned(2, 7))  OR
                         (cur_count = to_unsigned(3, 7))  OR
                         (cur_count = to_unsigned(4, 7))  OR
                         (cur_count = to_unsigned(5, 7))  OR
                         (cur_count = to_unsigned(6, 7))  OR
                         (cur_count = to_unsigned(7, 7))  OR
                         (cur_count = to_unsigned(8, 7))  OR
                         (cur_count = to_unsigned(9, 7))  OR
                         (cur_count = to_unsigned(10, 7))  OR
                         (cur_count = to_unsigned(11, 7))  OR
                         (cur_count = to_unsigned(12, 7))  OR
                         (cur_count = to_unsigned(13, 7))  OR
                         (cur_count = to_unsigned(15, 7))  OR
                         (cur_count = to_unsigned(16, 7))  OR
                         (cur_count = to_unsigned(17, 7))  OR
                         (cur_count = to_unsigned(18, 7))  OR
                         (cur_count = to_unsigned(19, 7))  OR
                         (cur_count = to_unsigned(20, 7))  OR
                         (cur_count = to_unsigned(22, 7))  OR
                         (cur_count = to_unsigned(23, 7))  OR
                         (cur_count = to_unsigned(24, 7))  OR
                         (cur_count = to_unsigned(25, 7))  OR
                         (cur_count = to_unsigned(26, 7))  OR
                         (cur_count = to_unsigned(27, 7))  OR
                         (cur_count = to_unsigned(29, 7))  OR
                         (cur_count = to_unsigned(30, 7))  OR
                         (cur_count = to_unsigned(31, 7))  OR
                         (cur_count = to_unsigned(32, 7))  OR
                         (cur_count = to_unsigned(33, 7))  OR
                         (cur_count = to_unsigned(34, 7))  OR
                         (cur_count = to_unsigned(36, 7))  OR
                         (cur_count = to_unsigned(37, 7))  OR
                         (cur_count = to_unsigned(38, 7))  OR
                         (cur_count = to_unsigned(39, 7))  OR
                         (cur_count = to_unsigned(40, 7))  OR
                         (cur_count = to_unsigned(41, 7))  OR
                         (cur_count = to_unsigned(43, 7))  OR
                         (cur_count = to_unsigned(44, 7))  OR
                         (cur_count = to_unsigned(45, 7))  OR
                         (cur_count = to_unsigned(46, 7))  OR
                         (cur_count = to_unsigned(47, 7))  OR
                         (cur_count = to_unsigned(48, 7))  OR
                         (cur_count = to_unsigned(49, 7))  OR
                         (cur_count = to_unsigned(50, 7))  OR
                         (cur_count = to_unsigned(51, 7))  OR
                         (cur_count = to_unsigned(52, 7))  OR
                         (cur_count = to_unsigned(53, 7))  OR
                         (cur_count = to_unsigned(54, 7))  OR
                         (cur_count = to_unsigned(55, 7))  OR
                         (cur_count = to_unsigned(56, 7))  OR
                         (cur_count = to_unsigned(57, 7))  OR
                         (cur_count = to_unsigned(58, 7))  OR
                         (cur_count = to_unsigned(59, 7))  OR
                         (cur_count = to_unsigned(60, 7))  OR
                         (cur_count = to_unsigned(61, 7))  OR
                         (cur_count = to_unsigned(62, 7))  OR
                         (cur_count = to_unsigned(63, 7))  OR
                         (cur_count = to_unsigned(64, 7))  OR
                         (cur_count = to_unsigned(65, 7))  OR
                         (cur_count = to_unsigned(66, 7))  OR
                         (cur_count = to_unsigned(67, 7))  OR
                         (cur_count = to_unsigned(68, 7))  OR
                         (cur_count = to_unsigned(69, 7))  OR
                         (cur_count = to_unsigned(0, 7)))  AND clk_enable = '1') ELSE '0';

  phase_14 <= '1' WHEN cur_count = to_unsigned(14, 7) AND clk_enable = '1' ELSE '0';

  phase_21 <= '1' WHEN cur_count = to_unsigned(21, 7) AND clk_enable = '1' ELSE '0';

  phase_28 <= '1' WHEN cur_count = to_unsigned(28, 7) AND clk_enable = '1' ELSE '0';

  phase_35 <= '1' WHEN cur_count = to_unsigned(35, 7) AND clk_enable = '1' ELSE '0';

  phase_42 <= '1' WHEN cur_count = to_unsigned(42, 7) AND clk_enable = '1' ELSE '0';

  phase_49 <= '1' WHEN cur_count = to_unsigned(49, 7) AND clk_enable = '1' ELSE '0';

  phase_56 <= '1' WHEN cur_count = to_unsigned(56, 7) AND clk_enable = '1' ELSE '0';

  phase_63 <= '1' WHEN cur_count = to_unsigned(63, 7) AND clk_enable = '1' ELSE '0';

  phase_7 <= '1' WHEN cur_count = to_unsigned(7, 7) AND clk_enable = '1' ELSE '0';

  phase_8 <= '1' WHEN cur_count = to_unsigned(8, 7) AND clk_enable = '1' ELSE '0';

  phase_temp <=  phase_0 AND const_one;

  ceout_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        int_delay_pipe(1 TO 69) <= int_delay_pipe(0 TO 68);
        int_delay_pipe(0) <= phase_temp;
      END IF;
    END IF;
  END PROCESS ceout_delay_process;
  phase_reg_temp <= int_delay_pipe(69);

  phase_reg <=  phase_reg_temp AND phase_temp;

  ce_out_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ce_out_reg <= phase_reg;
      END IF;
    END IF; 
  END PROCESS ce_out_register_process;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase0(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase0(0) <= input_register;
        input_pipeline_phase0(1 TO 6) <= input_pipeline_phase0(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_63 = '1' THEN
        input_pipeline_phase1(0) <= input_register;
        input_pipeline_phase1(1 TO 6) <= input_pipeline_phase1(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  Delay_Pipeline_Phase2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase2(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_56 = '1' THEN
        input_pipeline_phase2(0) <= input_register;
        input_pipeline_phase2(1 TO 6) <= input_pipeline_phase2(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase2_process;

  Delay_Pipeline_Phase3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase3(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_49 = '1' THEN
        input_pipeline_phase3(0) <= input_register;
        input_pipeline_phase3(1 TO 6) <= input_pipeline_phase3(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase3_process;

  Delay_Pipeline_Phase4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase4(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_42 = '1' THEN
        input_pipeline_phase4(0) <= input_register;
        input_pipeline_phase4(1 TO 6) <= input_pipeline_phase4(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase4_process;

  Delay_Pipeline_Phase5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase5(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_35 = '1' THEN
        input_pipeline_phase5(0) <= input_register;
        input_pipeline_phase5(1 TO 6) <= input_pipeline_phase5(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase5_process;

  Delay_Pipeline_Phase6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase6(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_28 = '1' THEN
        input_pipeline_phase6(0) <= input_register;
        input_pipeline_phase6(1 TO 6) <= input_pipeline_phase6(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase6_process;

  Delay_Pipeline_Phase7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase7(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_21 = '1' THEN
        input_pipeline_phase7(0) <= input_register;
        input_pipeline_phase7(1 TO 6) <= input_pipeline_phase7(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase7_process;

  Delay_Pipeline_Phase8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase8(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_14 = '1' THEN
        input_pipeline_phase8(0) <= input_register;
        input_pipeline_phase8(1 TO 6) <= input_pipeline_phase8(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase8_process;

  Delay_Pipeline_Phase9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase9(0 TO 6) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_7 = '1' THEN
        input_pipeline_phase9(0) <= input_register;
        input_pipeline_phase9(1 TO 6) <= input_pipeline_phase9(0 TO 5);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase9_process;

  -- Mux(es) to select the input taps for multipliers 

  inputmux <= input_pipeline_phase0(0) WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                   input_pipeline_phase0(1) WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                   input_pipeline_phase0(2) WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                   input_pipeline_phase0(3) WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                   input_pipeline_phase0(4) WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                   input_pipeline_phase0(5) WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                   input_pipeline_phase0(6) WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                   input_pipeline_phase9(0) WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                   input_pipeline_phase9(1) WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                   input_pipeline_phase9(2) WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                   input_pipeline_phase9(3) WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                   input_pipeline_phase9(4) WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                   input_pipeline_phase9(5) WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                   input_pipeline_phase8(0) WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                   input_pipeline_phase8(1) WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                   input_pipeline_phase8(2) WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                   input_pipeline_phase8(3) WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                   input_pipeline_phase8(4) WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                   input_pipeline_phase8(5) WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                   input_pipeline_phase7(0) WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                   input_pipeline_phase7(1) WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                   input_pipeline_phase7(2) WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                   input_pipeline_phase7(3) WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                   input_pipeline_phase7(4) WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                   input_pipeline_phase7(5) WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                   input_pipeline_phase6(0) WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                   input_pipeline_phase6(1) WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                   input_pipeline_phase6(2) WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                   input_pipeline_phase6(3) WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                   input_pipeline_phase6(4) WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                   input_pipeline_phase6(5) WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                   input_pipeline_phase5(0) WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                   input_pipeline_phase5(1) WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                   input_pipeline_phase5(2) WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                   input_pipeline_phase5(3) WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                   input_pipeline_phase5(4) WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                   input_pipeline_phase5(5) WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                   input_pipeline_phase4(0) WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                   input_pipeline_phase4(1) WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                   input_pipeline_phase4(2) WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                   input_pipeline_phase4(3) WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                   input_pipeline_phase4(4) WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                   input_pipeline_phase4(5) WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                   input_pipeline_phase4(6) WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                   input_pipeline_phase3(0) WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                   input_pipeline_phase3(1) WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                   input_pipeline_phase3(2) WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                   input_pipeline_phase3(3) WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                   input_pipeline_phase3(4) WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                   input_pipeline_phase3(5) WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                   input_pipeline_phase3(6) WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                   input_pipeline_phase2(0) WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                   input_pipeline_phase2(1) WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                   input_pipeline_phase2(2) WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                   input_pipeline_phase2(3) WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                   input_pipeline_phase2(4) WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                   input_pipeline_phase2(5) WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                   input_pipeline_phase2(6) WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                   input_pipeline_phase1(0) WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                   input_pipeline_phase1(1) WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                   input_pipeline_phase1(2) WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                   input_pipeline_phase1(3) WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                   input_pipeline_phase1(4) WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                   input_pipeline_phase1(5) WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                   input_pipeline_phase1(6);

  product_mux <= coeffphase1_1 WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                      coeffphase1_2 WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                      coeffphase1_3 WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                      coeffphase1_4 WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                      coeffphase1_5 WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                      coeffphase1_6 WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                      coeffphase1_7 WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                      coeffphase10_1 WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                      coeffphase10_2 WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                      coeffphase10_3 WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                      coeffphase10_4 WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                      coeffphase10_5 WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                      coeffphase10_6 WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                      coeffphase9_1 WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                      coeffphase9_2 WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                      coeffphase9_3 WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                      coeffphase9_4 WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                      coeffphase9_5 WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                      coeffphase9_6 WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                      coeffphase8_1 WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                      coeffphase8_2 WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                      coeffphase8_3 WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                      coeffphase8_4 WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                      coeffphase8_5 WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                      coeffphase8_6 WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                      coeffphase7_1 WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                      coeffphase7_2 WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                      coeffphase7_3 WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                      coeffphase7_4 WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                      coeffphase7_5 WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                      coeffphase7_6 WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                      coeffphase6_1 WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                      coeffphase6_2 WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                      coeffphase6_3 WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                      coeffphase6_4 WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                      coeffphase6_5 WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                      coeffphase6_6 WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                      coeffphase5_1 WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                      coeffphase5_2 WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                      coeffphase5_3 WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                      coeffphase5_4 WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                      coeffphase5_5 WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                      coeffphase5_6 WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                      coeffphase5_7 WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                      coeffphase4_1 WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                      coeffphase4_2 WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                      coeffphase4_3 WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                      coeffphase4_4 WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                      coeffphase4_5 WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                      coeffphase4_6 WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                      coeffphase4_7 WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                      coeffphase3_1 WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                      coeffphase3_2 WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                      coeffphase3_3 WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                      coeffphase3_4 WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                      coeffphase3_5 WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                      coeffphase3_6 WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                      coeffphase3_7 WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                      coeffphase2_1 WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                      coeffphase2_2 WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                      coeffphase2_3 WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                      coeffphase2_4 WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                      coeffphase2_5 WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                      coeffphase2_6 WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                      coeffphase2_7;
  product <= inputmux * product_mux;

  phasemux <= product WHEN ( phase_1 = '1' ) ELSE
                   const_zero;


  -- Add the products in linear fashion

  sumofproducts <= phasemux;

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= resize(sumofproducts, 70);

  -- Accumulator register with a mux to reset it with the first addend

  add_temp <= resize(sumofproducts_cast, 71) + resize(accreg_out, 71);
  acc_sum <= add_temp(69 DOWNTO 0);

  accreg_in <= sumofproducts_cast WHEN ( phase_8 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_8 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= resize(shift_right(accreg_final(62 DOWNTO 0) + ( "0" & (accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47) & NOT accreg_final(47))), 47), 16);

  output_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_reg = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
