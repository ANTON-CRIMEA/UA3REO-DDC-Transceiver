-- -------------------------------------------------------------
--
-- Module: rx_ciccomp
-- Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
-- Generated on: 2019-11-02 10:45:34
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- Name: rx_ciccomp
-- SerialPartition: 13
-- TestBenchName: rx_ciccomp_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : CIC Compensator
-- Specification          : N,Fp,Fst
-- Decimation Factor      : 10
-- Multirate Type         : Decimator
-- Filter Order           : 128
-- Stopband Edge          : 0.55
-- Differential Delay     : 2
-- Number of Sections     : 5
-- CIC Rate Change Factor : 256
-- Passband Edge          : 0.45
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 13
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 10
-- Polyphase Length   : 13
-- Filter Length      : 129
-- Stable             : Yes
-- Linear Phase       : Yes (Type 1)
--
-- Arithmetic         : fixed
-- Numerator          : s32,30 -> [-2 2)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY rx_ciccomp IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En31
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         ce_out                          :   OUT   std_logic  
         );

END rx_ciccomp;


----------------------------------------------------------------
--Module Architecture: rx_ciccomp
----------------------------------------------------------------
ARCHITECTURE rtl OF rx_ciccomp IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32_En31
  -- Constants
  CONSTANT const_one                      : std_logic := '1'; -- boolean
  CONSTANT coeffphase1_1                  : signed(31 DOWNTO 0) := to_signed(1829, 32); -- sfix32_En30
  CONSTANT coeffphase1_2                  : signed(31 DOWNTO 0) := to_signed(-57168, 32); -- sfix32_En30
  CONSTANT coeffphase1_3                  : signed(31 DOWNTO 0) := to_signed(436150, 32); -- sfix32_En30
  CONSTANT coeffphase1_4                  : signed(31 DOWNTO 0) := to_signed(-2140807, 32); -- sfix32_En30
  CONSTANT coeffphase1_5                  : signed(31 DOWNTO 0) := to_signed(8739784, 32); -- sfix32_En30
  CONSTANT coeffphase1_6                  : signed(31 DOWNTO 0) := to_signed(-37948100, 32); -- sfix32_En30
  CONSTANT coeffphase1_7                  : signed(31 DOWNTO 0) := to_signed(328475508, 32); -- sfix32_En30
  CONSTANT coeffphase1_8                  : signed(31 DOWNTO 0) := to_signed(-187702987, 32); -- sfix32_En30
  CONSTANT coeffphase1_9                  : signed(31 DOWNTO 0) := to_signed(27642941, 32); -- sfix32_En30
  CONSTANT coeffphase1_10                 : signed(31 DOWNTO 0) := to_signed(-6627366, 32); -- sfix32_En30
  CONSTANT coeffphase1_11                 : signed(31 DOWNTO 0) := to_signed(1590958, 32); -- sfix32_En30
  CONSTANT coeffphase1_12                 : signed(31 DOWNTO 0) := to_signed(-304333, 32); -- sfix32_En30
  CONSTANT coeffphase1_13                 : signed(31 DOWNTO 0) := to_signed(34610, 32); -- sfix32_En30
  CONSTANT coeffphase2_1                  : signed(31 DOWNTO 0) := to_signed(-76699, 32); -- sfix32_En30
  CONSTANT coeffphase2_2                  : signed(31 DOWNTO 0) := to_signed(1231189, 32); -- sfix32_En30
  CONSTANT coeffphase2_3                  : signed(31 DOWNTO 0) := to_signed(-7159268, 32); -- sfix32_En30
  CONSTANT coeffphase2_4                  : signed(31 DOWNTO 0) := to_signed(26189234, 32); -- sfix32_En30
  CONSTANT coeffphase2_5                  : signed(31 DOWNTO 0) := to_signed(-74219398, 32); -- sfix32_En30
  CONSTANT coeffphase2_6                  : signed(31 DOWNTO 0) := to_signed(190975928, 32); -- sfix32_En30
  CONSTANT coeffphase2_7                  : signed(31 DOWNTO 0) := to_signed(-558994572, 32); -- sfix32_En30
  CONSTANT coeffphase2_8                  : signed(31 DOWNTO 0) := to_signed(-356499168, 32); -- sfix32_En30
  CONSTANT coeffphase2_9                  : signed(31 DOWNTO 0) := to_signed(130702441, 32); -- sfix32_En30
  CONSTANT coeffphase2_10                 : signed(31 DOWNTO 0) := to_signed(-49974006, 32); -- sfix32_En30
  CONSTANT coeffphase2_11                 : signed(31 DOWNTO 0) := to_signed(16215788, 32); -- sfix32_En30
  CONSTANT coeffphase2_12                 : signed(31 DOWNTO 0) := to_signed(-3810206, 32); -- sfix32_En30
  CONSTANT coeffphase2_13                 : signed(31 DOWNTO 0) := to_signed(482045, 32); -- sfix32_En30
  CONSTANT coeffphase3_1                  : signed(31 DOWNTO 0) := to_signed(-5379, 32); -- sfix32_En30
  CONSTANT coeffphase3_2                  : signed(31 DOWNTO 0) := to_signed(90729, 32); -- sfix32_En30
  CONSTANT coeffphase3_3                  : signed(31 DOWNTO 0) := to_signed(-614707, 32); -- sfix32_En30
  CONSTANT coeffphase3_4                  : signed(31 DOWNTO 0) := to_signed(2859600, 32); -- sfix32_En30
  CONSTANT coeffphase3_5                  : signed(31 DOWNTO 0) := to_signed(-11544578, 32); -- sfix32_En30
  CONSTANT coeffphase3_6                  : signed(31 DOWNTO 0) := to_signed(53278445, 32); -- sfix32_En30
  CONSTANT coeffphase3_7                  : signed(31 DOWNTO 0) := to_signed(-644089867, 32); -- sfix32_En30
  CONSTANT coeffphase3_8                  : signed(31 DOWNTO 0) := to_signed(116758503, 32); -- sfix32_En30
  CONSTANT coeffphase3_9                  : signed(31 DOWNTO 0) := to_signed(-20460805, 32); -- sfix32_En30
  CONSTANT coeffphase3_10                 : signed(31 DOWNTO 0) := to_signed(5022955, 32); -- sfix32_En30
  CONSTANT coeffphase3_11                 : signed(31 DOWNTO 0) := to_signed(-1171815, 32); -- sfix32_En30
  CONSTANT coeffphase3_12                 : signed(31 DOWNTO 0) := to_signed(208268, 32); -- sfix32_En30
  CONSTANT coeffphase3_13                 : signed(31 DOWNTO 0) := to_signed(-19873, 32); -- sfix32_En30
  CONSTANT coeffphase4_1                  : signed(31 DOWNTO 0) := to_signed(144591, 32); -- sfix32_En30
  CONSTANT coeffphase4_2                  : signed(31 DOWNTO 0) := to_signed(-1848657, 32); -- sfix32_En30
  CONSTANT coeffphase4_3                  : signed(31 DOWNTO 0) := to_signed(9545715, 32); -- sfix32_En30
  CONSTANT coeffphase4_4                  : signed(31 DOWNTO 0) := to_signed(-32763029, 32); -- sfix32_En30
  CONSTANT coeffphase4_5                  : signed(31 DOWNTO 0) := to_signed(89823182, 32); -- sfix32_En30
  CONSTANT coeffphase4_6                  : signed(31 DOWNTO 0) := to_signed(-232682170, 32); -- sfix32_En30
  CONSTANT coeffphase4_7                  : signed(31 DOWNTO 0) := to_signed(576584395, 32); -- sfix32_En30
  CONSTANT coeffphase4_8                  : signed(31 DOWNTO 0) := to_signed(286217492, 32); -- sfix32_En30
  CONSTANT coeffphase4_9                  : signed(31 DOWNTO 0) := to_signed(-108409442, 32); -- sfix32_En30
  CONSTANT coeffphase4_10                 : signed(31 DOWNTO 0) := to_signed(40622091, 32); -- sfix32_En30
  CONSTANT coeffphase4_11                 : signed(31 DOWNTO 0) := to_signed(-12529218, 32); -- sfix32_En30
  CONSTANT coeffphase4_12                 : signed(31 DOWNTO 0) := to_signed(2689591, 32); -- sfix32_En30
  CONSTANT coeffphase4_13                 : signed(31 DOWNTO 0) := to_signed(-276276, 32); -- sfix32_En30
  CONSTANT coeffphase5_1                  : signed(31 DOWNTO 0) := to_signed(10637, 32); -- sfix32_En30
  CONSTANT coeffphase5_2                  : signed(31 DOWNTO 0) := to_signed(-139334, 32); -- sfix32_En30
  CONSTANT coeffphase5_3                  : signed(31 DOWNTO 0) := to_signed(853989, 32); -- sfix32_En30
  CONSTANT coeffphase5_4                  : signed(31 DOWNTO 0) := to_signed(-3797792, 32); -- sfix32_En30
  CONSTANT coeffphase5_5                  : signed(31 DOWNTO 0) := to_signed(15313495, 32); -- sfix32_En30
  CONSTANT coeffphase5_6                  : signed(31 DOWNTO 0) := to_signed(-77176090, 32); -- sfix32_En30
  CONSTANT coeffphase5_7                  : signed(31 DOWNTO 0) := to_signed(1401836117, 32); -- sfix32_En30
  CONSTANT coeffphase5_8                  : signed(31 DOWNTO 0) := to_signed(-77176090, 32); -- sfix32_En30
  CONSTANT coeffphase5_9                  : signed(31 DOWNTO 0) := to_signed(15313495, 32); -- sfix32_En30
  CONSTANT coeffphase5_10                 : signed(31 DOWNTO 0) := to_signed(-3797792, 32); -- sfix32_En30
  CONSTANT coeffphase5_11                 : signed(31 DOWNTO 0) := to_signed(853989, 32); -- sfix32_En30
  CONSTANT coeffphase5_12                 : signed(31 DOWNTO 0) := to_signed(-139334, 32); -- sfix32_En30
  CONSTANT coeffphase5_13                 : signed(31 DOWNTO 0) := to_signed(10637, 32); -- sfix32_En30
  CONSTANT coeffphase6_1                  : signed(31 DOWNTO 0) := to_signed(-276276, 32); -- sfix32_En30
  CONSTANT coeffphase6_2                  : signed(31 DOWNTO 0) := to_signed(2689591, 32); -- sfix32_En30
  CONSTANT coeffphase6_3                  : signed(31 DOWNTO 0) := to_signed(-12529218, 32); -- sfix32_En30
  CONSTANT coeffphase6_4                  : signed(31 DOWNTO 0) := to_signed(40622091, 32); -- sfix32_En30
  CONSTANT coeffphase6_5                  : signed(31 DOWNTO 0) := to_signed(-108409442, 32); -- sfix32_En30
  CONSTANT coeffphase6_6                  : signed(31 DOWNTO 0) := to_signed(286217492, 32); -- sfix32_En30
  CONSTANT coeffphase6_7                  : signed(31 DOWNTO 0) := to_signed(576584395, 32); -- sfix32_En30
  CONSTANT coeffphase6_8                  : signed(31 DOWNTO 0) := to_signed(-232682170, 32); -- sfix32_En30
  CONSTANT coeffphase6_9                  : signed(31 DOWNTO 0) := to_signed(89823182, 32); -- sfix32_En30
  CONSTANT coeffphase6_10                 : signed(31 DOWNTO 0) := to_signed(-32763029, 32); -- sfix32_En30
  CONSTANT coeffphase6_11                 : signed(31 DOWNTO 0) := to_signed(9545715, 32); -- sfix32_En30
  CONSTANT coeffphase6_12                 : signed(31 DOWNTO 0) := to_signed(-1848657, 32); -- sfix32_En30
  CONSTANT coeffphase6_13                 : signed(31 DOWNTO 0) := to_signed(144591, 32); -- sfix32_En30
  CONSTANT coeffphase7_1                  : signed(31 DOWNTO 0) := to_signed(-19873, 32); -- sfix32_En30
  CONSTANT coeffphase7_2                  : signed(31 DOWNTO 0) := to_signed(208268, 32); -- sfix32_En30
  CONSTANT coeffphase7_3                  : signed(31 DOWNTO 0) := to_signed(-1171815, 32); -- sfix32_En30
  CONSTANT coeffphase7_4                  : signed(31 DOWNTO 0) := to_signed(5022955, 32); -- sfix32_En30
  CONSTANT coeffphase7_5                  : signed(31 DOWNTO 0) := to_signed(-20460805, 32); -- sfix32_En30
  CONSTANT coeffphase7_6                  : signed(31 DOWNTO 0) := to_signed(116758503, 32); -- sfix32_En30
  CONSTANT coeffphase7_7                  : signed(31 DOWNTO 0) := to_signed(-644089867, 32); -- sfix32_En30
  CONSTANT coeffphase7_8                  : signed(31 DOWNTO 0) := to_signed(53278445, 32); -- sfix32_En30
  CONSTANT coeffphase7_9                  : signed(31 DOWNTO 0) := to_signed(-11544578, 32); -- sfix32_En30
  CONSTANT coeffphase7_10                 : signed(31 DOWNTO 0) := to_signed(2859600, 32); -- sfix32_En30
  CONSTANT coeffphase7_11                 : signed(31 DOWNTO 0) := to_signed(-614707, 32); -- sfix32_En30
  CONSTANT coeffphase7_12                 : signed(31 DOWNTO 0) := to_signed(90729, 32); -- sfix32_En30
  CONSTANT coeffphase7_13                 : signed(31 DOWNTO 0) := to_signed(-5379, 32); -- sfix32_En30
  CONSTANT coeffphase8_1                  : signed(31 DOWNTO 0) := to_signed(482045, 32); -- sfix32_En30
  CONSTANT coeffphase8_2                  : signed(31 DOWNTO 0) := to_signed(-3810206, 32); -- sfix32_En30
  CONSTANT coeffphase8_3                  : signed(31 DOWNTO 0) := to_signed(16215788, 32); -- sfix32_En30
  CONSTANT coeffphase8_4                  : signed(31 DOWNTO 0) := to_signed(-49974006, 32); -- sfix32_En30
  CONSTANT coeffphase8_5                  : signed(31 DOWNTO 0) := to_signed(130702441, 32); -- sfix32_En30
  CONSTANT coeffphase8_6                  : signed(31 DOWNTO 0) := to_signed(-356499168, 32); -- sfix32_En30
  CONSTANT coeffphase8_7                  : signed(31 DOWNTO 0) := to_signed(-558994572, 32); -- sfix32_En30
  CONSTANT coeffphase8_8                  : signed(31 DOWNTO 0) := to_signed(190975928, 32); -- sfix32_En30
  CONSTANT coeffphase8_9                  : signed(31 DOWNTO 0) := to_signed(-74219398, 32); -- sfix32_En30
  CONSTANT coeffphase8_10                 : signed(31 DOWNTO 0) := to_signed(26189234, 32); -- sfix32_En30
  CONSTANT coeffphase8_11                 : signed(31 DOWNTO 0) := to_signed(-7159268, 32); -- sfix32_En30
  CONSTANT coeffphase8_12                 : signed(31 DOWNTO 0) := to_signed(1231189, 32); -- sfix32_En30
  CONSTANT coeffphase8_13                 : signed(31 DOWNTO 0) := to_signed(-76699, 32); -- sfix32_En30
  CONSTANT coeffphase9_1                  : signed(31 DOWNTO 0) := to_signed(34610, 32); -- sfix32_En30
  CONSTANT coeffphase9_2                  : signed(31 DOWNTO 0) := to_signed(-304333, 32); -- sfix32_En30
  CONSTANT coeffphase9_3                  : signed(31 DOWNTO 0) := to_signed(1590958, 32); -- sfix32_En30
  CONSTANT coeffphase9_4                  : signed(31 DOWNTO 0) := to_signed(-6627366, 32); -- sfix32_En30
  CONSTANT coeffphase9_5                  : signed(31 DOWNTO 0) := to_signed(27642941, 32); -- sfix32_En30
  CONSTANT coeffphase9_6                  : signed(31 DOWNTO 0) := to_signed(-187702987, 32); -- sfix32_En30
  CONSTANT coeffphase9_7                  : signed(31 DOWNTO 0) := to_signed(328475508, 32); -- sfix32_En30
  CONSTANT coeffphase9_8                  : signed(31 DOWNTO 0) := to_signed(-37948100, 32); -- sfix32_En30
  CONSTANT coeffphase9_9                  : signed(31 DOWNTO 0) := to_signed(8739784, 32); -- sfix32_En30
  CONSTANT coeffphase9_10                 : signed(31 DOWNTO 0) := to_signed(-2140807, 32); -- sfix32_En30
  CONSTANT coeffphase9_11                 : signed(31 DOWNTO 0) := to_signed(436150, 32); -- sfix32_En30
  CONSTANT coeffphase9_12                 : signed(31 DOWNTO 0) := to_signed(-57168, 32); -- sfix32_En30
  CONSTANT coeffphase9_13                 : signed(31 DOWNTO 0) := to_signed(1829, 32); -- sfix32_En30
  CONSTANT coeffphase10_1                 : signed(31 DOWNTO 0) := to_signed(-789149, 32); -- sfix32_En30
  CONSTANT coeffphase10_2                 : signed(31 DOWNTO 0) := to_signed(5275405, 32); -- sfix32_En30
  CONSTANT coeffphase10_3                 : signed(31 DOWNTO 0) := to_signed(-20724392, 32); -- sfix32_En30
  CONSTANT coeffphase10_4                 : signed(31 DOWNTO 0) := to_signed(61069358, 32); -- sfix32_En30
  CONSTANT coeffphase10_5                 : signed(31 DOWNTO 0) := to_signed(-157726732, 32); -- sfix32_En30
  CONSTANT coeffphase10_6                 : signed(31 DOWNTO 0) := to_signed(449119854, 32); -- sfix32_En30
  CONSTANT coeffphase10_7                 : signed(31 DOWNTO 0) := to_signed(449119854, 32); -- sfix32_En30
  CONSTANT coeffphase10_8                 : signed(31 DOWNTO 0) := to_signed(-157726732, 32); -- sfix32_En30
  CONSTANT coeffphase10_9                 : signed(31 DOWNTO 0) := to_signed(61069358, 32); -- sfix32_En30
  CONSTANT coeffphase10_10                : signed(31 DOWNTO 0) := to_signed(-20724392, 32); -- sfix32_En30
  CONSTANT coeffphase10_11                : signed(31 DOWNTO 0) := to_signed(5275405, 32); -- sfix32_En30
  CONSTANT coeffphase10_12                : signed(31 DOWNTO 0) := to_signed(-789149, 32); -- sfix32_En30
  CONSTANT coeffphase10_13                : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En30

  CONSTANT const_zero                     : signed(63 DOWNTO 0) := to_signed(0, 64); -- sfix64_En61
  -- Signals
  SIGNAL cur_count                        : unsigned(7 DOWNTO 0); -- ufix8
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_104                        : std_logic; -- boolean
  SIGNAL phase_117                        : std_logic; -- boolean
  SIGNAL phase_13                         : std_logic; -- boolean
  SIGNAL phase_14                         : std_logic; -- boolean
  SIGNAL phase_26                         : std_logic; -- boolean
  SIGNAL phase_39                         : std_logic; -- boolean
  SIGNAL phase_52                         : std_logic; -- boolean
  SIGNAL phase_65                         : std_logic; -- boolean
  SIGNAL phase_78                         : std_logic; -- boolean
  SIGNAL phase_91                         : std_logic; -- boolean
  SIGNAL phase_temp                       : std_logic; -- boolean
  SIGNAL phase_reg_temp                   : std_logic; -- boolean
  SIGNAL phase_reg                        : std_logic; -- boolean
  SIGNAL int_delay_pipe                   : std_logic_vector(0 TO 129); -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  SIGNAL input_register                   : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase2            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase3            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase4            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase5            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase6            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase7            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase8            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL input_pipeline_phase9            : input_pipeline_type(0 TO 12); -- sfix32_En31
  SIGNAL inputmux                         : signed(31 DOWNTO 0); -- sfix32_En31
  SIGNAL product                          : signed(63 DOWNTO 0); -- sfix64_En61
  SIGNAL product_mux                      : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL phasemux                         : signed(63 DOWNTO 0); -- sfix64_En61
  SIGNAL sumofproducts                    : signed(63 DOWNTO 0); -- sfix64_En61
  SIGNAL sumofproducts_cast               : signed(75 DOWNTO 0); -- sfix76_En61
  SIGNAL acc_sum                          : signed(75 DOWNTO 0); -- sfix76_En61
  SIGNAL accreg_in                        : signed(75 DOWNTO 0); -- sfix76_En61
  SIGNAL accreg_out                       : signed(75 DOWNTO 0); -- sfix76_En61
  SIGNAL add_temp                         : signed(76 DOWNTO 0); -- sfix77_En61
  SIGNAL accreg_final                     : signed(75 DOWNTO 0); -- sfix76_En61
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(129, 8);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(129, 8) THEN
          cur_count <= to_unsigned(0, 8);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 8);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 8) AND clk_enable = '1' ELSE '0';

  phase_1 <= '1' WHEN  (((cur_count = to_unsigned(1, 8))  OR
                         (cur_count = to_unsigned(2, 8))  OR
                         (cur_count = to_unsigned(3, 8))  OR
                         (cur_count = to_unsigned(4, 8))  OR
                         (cur_count = to_unsigned(5, 8))  OR
                         (cur_count = to_unsigned(6, 8))  OR
                         (cur_count = to_unsigned(7, 8))  OR
                         (cur_count = to_unsigned(8, 8))  OR
                         (cur_count = to_unsigned(9, 8))  OR
                         (cur_count = to_unsigned(10, 8))  OR
                         (cur_count = to_unsigned(11, 8))  OR
                         (cur_count = to_unsigned(12, 8))  OR
                         (cur_count = to_unsigned(13, 8))  OR
                         (cur_count = to_unsigned(14, 8))  OR
                         (cur_count = to_unsigned(15, 8))  OR
                         (cur_count = to_unsigned(16, 8))  OR
                         (cur_count = to_unsigned(17, 8))  OR
                         (cur_count = to_unsigned(18, 8))  OR
                         (cur_count = to_unsigned(19, 8))  OR
                         (cur_count = to_unsigned(20, 8))  OR
                         (cur_count = to_unsigned(21, 8))  OR
                         (cur_count = to_unsigned(22, 8))  OR
                         (cur_count = to_unsigned(23, 8))  OR
                         (cur_count = to_unsigned(24, 8))  OR
                         (cur_count = to_unsigned(25, 8))  OR
                         (cur_count = to_unsigned(27, 8))  OR
                         (cur_count = to_unsigned(28, 8))  OR
                         (cur_count = to_unsigned(29, 8))  OR
                         (cur_count = to_unsigned(30, 8))  OR
                         (cur_count = to_unsigned(31, 8))  OR
                         (cur_count = to_unsigned(32, 8))  OR
                         (cur_count = to_unsigned(33, 8))  OR
                         (cur_count = to_unsigned(34, 8))  OR
                         (cur_count = to_unsigned(35, 8))  OR
                         (cur_count = to_unsigned(36, 8))  OR
                         (cur_count = to_unsigned(37, 8))  OR
                         (cur_count = to_unsigned(38, 8))  OR
                         (cur_count = to_unsigned(39, 8))  OR
                         (cur_count = to_unsigned(40, 8))  OR
                         (cur_count = to_unsigned(41, 8))  OR
                         (cur_count = to_unsigned(42, 8))  OR
                         (cur_count = to_unsigned(43, 8))  OR
                         (cur_count = to_unsigned(44, 8))  OR
                         (cur_count = to_unsigned(45, 8))  OR
                         (cur_count = to_unsigned(46, 8))  OR
                         (cur_count = to_unsigned(47, 8))  OR
                         (cur_count = to_unsigned(48, 8))  OR
                         (cur_count = to_unsigned(49, 8))  OR
                         (cur_count = to_unsigned(50, 8))  OR
                         (cur_count = to_unsigned(51, 8))  OR
                         (cur_count = to_unsigned(52, 8))  OR
                         (cur_count = to_unsigned(53, 8))  OR
                         (cur_count = to_unsigned(54, 8))  OR
                         (cur_count = to_unsigned(55, 8))  OR
                         (cur_count = to_unsigned(56, 8))  OR
                         (cur_count = to_unsigned(57, 8))  OR
                         (cur_count = to_unsigned(58, 8))  OR
                         (cur_count = to_unsigned(59, 8))  OR
                         (cur_count = to_unsigned(60, 8))  OR
                         (cur_count = to_unsigned(61, 8))  OR
                         (cur_count = to_unsigned(62, 8))  OR
                         (cur_count = to_unsigned(63, 8))  OR
                         (cur_count = to_unsigned(64, 8))  OR
                         (cur_count = to_unsigned(65, 8))  OR
                         (cur_count = to_unsigned(66, 8))  OR
                         (cur_count = to_unsigned(67, 8))  OR
                         (cur_count = to_unsigned(68, 8))  OR
                         (cur_count = to_unsigned(69, 8))  OR
                         (cur_count = to_unsigned(70, 8))  OR
                         (cur_count = to_unsigned(71, 8))  OR
                         (cur_count = to_unsigned(72, 8))  OR
                         (cur_count = to_unsigned(73, 8))  OR
                         (cur_count = to_unsigned(74, 8))  OR
                         (cur_count = to_unsigned(75, 8))  OR
                         (cur_count = to_unsigned(76, 8))  OR
                         (cur_count = to_unsigned(77, 8))  OR
                         (cur_count = to_unsigned(78, 8))  OR
                         (cur_count = to_unsigned(79, 8))  OR
                         (cur_count = to_unsigned(80, 8))  OR
                         (cur_count = to_unsigned(81, 8))  OR
                         (cur_count = to_unsigned(82, 8))  OR
                         (cur_count = to_unsigned(83, 8))  OR
                         (cur_count = to_unsigned(84, 8))  OR
                         (cur_count = to_unsigned(85, 8))  OR
                         (cur_count = to_unsigned(86, 8))  OR
                         (cur_count = to_unsigned(87, 8))  OR
                         (cur_count = to_unsigned(88, 8))  OR
                         (cur_count = to_unsigned(89, 8))  OR
                         (cur_count = to_unsigned(90, 8))  OR
                         (cur_count = to_unsigned(91, 8))  OR
                         (cur_count = to_unsigned(92, 8))  OR
                         (cur_count = to_unsigned(93, 8))  OR
                         (cur_count = to_unsigned(94, 8))  OR
                         (cur_count = to_unsigned(95, 8))  OR
                         (cur_count = to_unsigned(96, 8))  OR
                         (cur_count = to_unsigned(97, 8))  OR
                         (cur_count = to_unsigned(98, 8))  OR
                         (cur_count = to_unsigned(99, 8))  OR
                         (cur_count = to_unsigned(100, 8))  OR
                         (cur_count = to_unsigned(101, 8))  OR
                         (cur_count = to_unsigned(102, 8))  OR
                         (cur_count = to_unsigned(103, 8))  OR
                         (cur_count = to_unsigned(104, 8))  OR
                         (cur_count = to_unsigned(105, 8))  OR
                         (cur_count = to_unsigned(106, 8))  OR
                         (cur_count = to_unsigned(107, 8))  OR
                         (cur_count = to_unsigned(108, 8))  OR
                         (cur_count = to_unsigned(109, 8))  OR
                         (cur_count = to_unsigned(110, 8))  OR
                         (cur_count = to_unsigned(111, 8))  OR
                         (cur_count = to_unsigned(112, 8))  OR
                         (cur_count = to_unsigned(113, 8))  OR
                         (cur_count = to_unsigned(114, 8))  OR
                         (cur_count = to_unsigned(115, 8))  OR
                         (cur_count = to_unsigned(116, 8))  OR
                         (cur_count = to_unsigned(117, 8))  OR
                         (cur_count = to_unsigned(118, 8))  OR
                         (cur_count = to_unsigned(119, 8))  OR
                         (cur_count = to_unsigned(120, 8))  OR
                         (cur_count = to_unsigned(121, 8))  OR
                         (cur_count = to_unsigned(122, 8))  OR
                         (cur_count = to_unsigned(123, 8))  OR
                         (cur_count = to_unsigned(124, 8))  OR
                         (cur_count = to_unsigned(125, 8))  OR
                         (cur_count = to_unsigned(126, 8))  OR
                         (cur_count = to_unsigned(127, 8))  OR
                         (cur_count = to_unsigned(128, 8))  OR
                         (cur_count = to_unsigned(129, 8))  OR
                         (cur_count = to_unsigned(0, 8)))  AND clk_enable = '1') ELSE '0';

  phase_104 <= '1' WHEN cur_count = to_unsigned(104, 8) AND clk_enable = '1' ELSE '0';

  phase_117 <= '1' WHEN cur_count = to_unsigned(117, 8) AND clk_enable = '1' ELSE '0';

  phase_13 <= '1' WHEN cur_count = to_unsigned(13, 8) AND clk_enable = '1' ELSE '0';

  phase_14 <= '1' WHEN cur_count = to_unsigned(14, 8) AND clk_enable = '1' ELSE '0';

  phase_26 <= '1' WHEN cur_count = to_unsigned(26, 8) AND clk_enable = '1' ELSE '0';

  phase_39 <= '1' WHEN cur_count = to_unsigned(39, 8) AND clk_enable = '1' ELSE '0';

  phase_52 <= '1' WHEN cur_count = to_unsigned(52, 8) AND clk_enable = '1' ELSE '0';

  phase_65 <= '1' WHEN cur_count = to_unsigned(65, 8) AND clk_enable = '1' ELSE '0';

  phase_78 <= '1' WHEN cur_count = to_unsigned(78, 8) AND clk_enable = '1' ELSE '0';

  phase_91 <= '1' WHEN cur_count = to_unsigned(91, 8) AND clk_enable = '1' ELSE '0';

  phase_temp <=  phase_0 AND const_one;

  ceout_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        int_delay_pipe(1 TO 129) <= int_delay_pipe(0 TO 128);
        int_delay_pipe(0) <= phase_temp;
      END IF;
    END IF;
  END PROCESS ceout_delay_process;
  phase_reg_temp <= int_delay_pipe(129);

  phase_reg <=  phase_reg_temp AND phase_temp;

  ce_out_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ce_out_reg <= phase_reg;
      END IF;
    END IF; 
  END PROCESS ce_out_register_process;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase0(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase0(0) <= input_register;
        input_pipeline_phase0(1 TO 12) <= input_pipeline_phase0(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_117 = '1' THEN
        input_pipeline_phase1(0) <= input_register;
        input_pipeline_phase1(1 TO 12) <= input_pipeline_phase1(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  Delay_Pipeline_Phase2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase2(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_104 = '1' THEN
        input_pipeline_phase2(0) <= input_register;
        input_pipeline_phase2(1 TO 12) <= input_pipeline_phase2(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase2_process;

  Delay_Pipeline_Phase3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase3(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_91 = '1' THEN
        input_pipeline_phase3(0) <= input_register;
        input_pipeline_phase3(1 TO 12) <= input_pipeline_phase3(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase3_process;

  Delay_Pipeline_Phase4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase4(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_78 = '1' THEN
        input_pipeline_phase4(0) <= input_register;
        input_pipeline_phase4(1 TO 12) <= input_pipeline_phase4(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase4_process;

  Delay_Pipeline_Phase5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase5(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_65 = '1' THEN
        input_pipeline_phase5(0) <= input_register;
        input_pipeline_phase5(1 TO 12) <= input_pipeline_phase5(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase5_process;

  Delay_Pipeline_Phase6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase6(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_52 = '1' THEN
        input_pipeline_phase6(0) <= input_register;
        input_pipeline_phase6(1 TO 12) <= input_pipeline_phase6(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase6_process;

  Delay_Pipeline_Phase7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase7(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_39 = '1' THEN
        input_pipeline_phase7(0) <= input_register;
        input_pipeline_phase7(1 TO 12) <= input_pipeline_phase7(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase7_process;

  Delay_Pipeline_Phase8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase8(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_26 = '1' THEN
        input_pipeline_phase8(0) <= input_register;
        input_pipeline_phase8(1 TO 12) <= input_pipeline_phase8(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase8_process;

  Delay_Pipeline_Phase9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase9(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_13 = '1' THEN
        input_pipeline_phase9(0) <= input_register;
        input_pipeline_phase9(1 TO 12) <= input_pipeline_phase9(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase9_process;

  -- Mux(es) to select the input taps for multipliers 

  inputmux <= input_pipeline_phase0(0) WHEN ( cur_count = to_unsigned(1, 8) ) ELSE
                   input_pipeline_phase0(1) WHEN ( cur_count = to_unsigned(2, 8) ) ELSE
                   input_pipeline_phase0(2) WHEN ( cur_count = to_unsigned(3, 8) ) ELSE
                   input_pipeline_phase0(3) WHEN ( cur_count = to_unsigned(4, 8) ) ELSE
                   input_pipeline_phase0(4) WHEN ( cur_count = to_unsigned(5, 8) ) ELSE
                   input_pipeline_phase0(5) WHEN ( cur_count = to_unsigned(6, 8) ) ELSE
                   input_pipeline_phase0(6) WHEN ( cur_count = to_unsigned(7, 8) ) ELSE
                   input_pipeline_phase0(7) WHEN ( cur_count = to_unsigned(8, 8) ) ELSE
                   input_pipeline_phase0(8) WHEN ( cur_count = to_unsigned(9, 8) ) ELSE
                   input_pipeline_phase0(9) WHEN ( cur_count = to_unsigned(10, 8) ) ELSE
                   input_pipeline_phase0(10) WHEN ( cur_count = to_unsigned(11, 8) ) ELSE
                   input_pipeline_phase0(11) WHEN ( cur_count = to_unsigned(12, 8) ) ELSE
                   input_pipeline_phase0(12) WHEN ( cur_count = to_unsigned(13, 8) ) ELSE
                   input_pipeline_phase9(0) WHEN ( cur_count = to_unsigned(14, 8) ) ELSE
                   input_pipeline_phase9(1) WHEN ( cur_count = to_unsigned(15, 8) ) ELSE
                   input_pipeline_phase9(2) WHEN ( cur_count = to_unsigned(16, 8) ) ELSE
                   input_pipeline_phase9(3) WHEN ( cur_count = to_unsigned(17, 8) ) ELSE
                   input_pipeline_phase9(4) WHEN ( cur_count = to_unsigned(18, 8) ) ELSE
                   input_pipeline_phase9(5) WHEN ( cur_count = to_unsigned(19, 8) ) ELSE
                   input_pipeline_phase9(6) WHEN ( cur_count = to_unsigned(20, 8) ) ELSE
                   input_pipeline_phase9(7) WHEN ( cur_count = to_unsigned(21, 8) ) ELSE
                   input_pipeline_phase9(8) WHEN ( cur_count = to_unsigned(22, 8) ) ELSE
                   input_pipeline_phase9(9) WHEN ( cur_count = to_unsigned(23, 8) ) ELSE
                   input_pipeline_phase9(10) WHEN ( cur_count = to_unsigned(24, 8) ) ELSE
                   input_pipeline_phase9(11) WHEN ( cur_count = to_unsigned(25, 8) ) ELSE
                   input_pipeline_phase8(0) WHEN ( cur_count = to_unsigned(27, 8) ) ELSE
                   input_pipeline_phase8(1) WHEN ( cur_count = to_unsigned(28, 8) ) ELSE
                   input_pipeline_phase8(2) WHEN ( cur_count = to_unsigned(29, 8) ) ELSE
                   input_pipeline_phase8(3) WHEN ( cur_count = to_unsigned(30, 8) ) ELSE
                   input_pipeline_phase8(4) WHEN ( cur_count = to_unsigned(31, 8) ) ELSE
                   input_pipeline_phase8(5) WHEN ( cur_count = to_unsigned(32, 8) ) ELSE
                   input_pipeline_phase8(6) WHEN ( cur_count = to_unsigned(33, 8) ) ELSE
                   input_pipeline_phase8(7) WHEN ( cur_count = to_unsigned(34, 8) ) ELSE
                   input_pipeline_phase8(8) WHEN ( cur_count = to_unsigned(35, 8) ) ELSE
                   input_pipeline_phase8(9) WHEN ( cur_count = to_unsigned(36, 8) ) ELSE
                   input_pipeline_phase8(10) WHEN ( cur_count = to_unsigned(37, 8) ) ELSE
                   input_pipeline_phase8(11) WHEN ( cur_count = to_unsigned(38, 8) ) ELSE
                   input_pipeline_phase8(12) WHEN ( cur_count = to_unsigned(39, 8) ) ELSE
                   input_pipeline_phase7(0) WHEN ( cur_count = to_unsigned(40, 8) ) ELSE
                   input_pipeline_phase7(1) WHEN ( cur_count = to_unsigned(41, 8) ) ELSE
                   input_pipeline_phase7(2) WHEN ( cur_count = to_unsigned(42, 8) ) ELSE
                   input_pipeline_phase7(3) WHEN ( cur_count = to_unsigned(43, 8) ) ELSE
                   input_pipeline_phase7(4) WHEN ( cur_count = to_unsigned(44, 8) ) ELSE
                   input_pipeline_phase7(5) WHEN ( cur_count = to_unsigned(45, 8) ) ELSE
                   input_pipeline_phase7(6) WHEN ( cur_count = to_unsigned(46, 8) ) ELSE
                   input_pipeline_phase7(7) WHEN ( cur_count = to_unsigned(47, 8) ) ELSE
                   input_pipeline_phase7(8) WHEN ( cur_count = to_unsigned(48, 8) ) ELSE
                   input_pipeline_phase7(9) WHEN ( cur_count = to_unsigned(49, 8) ) ELSE
                   input_pipeline_phase7(10) WHEN ( cur_count = to_unsigned(50, 8) ) ELSE
                   input_pipeline_phase7(11) WHEN ( cur_count = to_unsigned(51, 8) ) ELSE
                   input_pipeline_phase7(12) WHEN ( cur_count = to_unsigned(52, 8) ) ELSE
                   input_pipeline_phase6(0) WHEN ( cur_count = to_unsigned(53, 8) ) ELSE
                   input_pipeline_phase6(1) WHEN ( cur_count = to_unsigned(54, 8) ) ELSE
                   input_pipeline_phase6(2) WHEN ( cur_count = to_unsigned(55, 8) ) ELSE
                   input_pipeline_phase6(3) WHEN ( cur_count = to_unsigned(56, 8) ) ELSE
                   input_pipeline_phase6(4) WHEN ( cur_count = to_unsigned(57, 8) ) ELSE
                   input_pipeline_phase6(5) WHEN ( cur_count = to_unsigned(58, 8) ) ELSE
                   input_pipeline_phase6(6) WHEN ( cur_count = to_unsigned(59, 8) ) ELSE
                   input_pipeline_phase6(7) WHEN ( cur_count = to_unsigned(60, 8) ) ELSE
                   input_pipeline_phase6(8) WHEN ( cur_count = to_unsigned(61, 8) ) ELSE
                   input_pipeline_phase6(9) WHEN ( cur_count = to_unsigned(62, 8) ) ELSE
                   input_pipeline_phase6(10) WHEN ( cur_count = to_unsigned(63, 8) ) ELSE
                   input_pipeline_phase6(11) WHEN ( cur_count = to_unsigned(64, 8) ) ELSE
                   input_pipeline_phase6(12) WHEN ( cur_count = to_unsigned(65, 8) ) ELSE
                   input_pipeline_phase5(0) WHEN ( cur_count = to_unsigned(66, 8) ) ELSE
                   input_pipeline_phase5(1) WHEN ( cur_count = to_unsigned(67, 8) ) ELSE
                   input_pipeline_phase5(2) WHEN ( cur_count = to_unsigned(68, 8) ) ELSE
                   input_pipeline_phase5(3) WHEN ( cur_count = to_unsigned(69, 8) ) ELSE
                   input_pipeline_phase5(4) WHEN ( cur_count = to_unsigned(70, 8) ) ELSE
                   input_pipeline_phase5(5) WHEN ( cur_count = to_unsigned(71, 8) ) ELSE
                   input_pipeline_phase5(6) WHEN ( cur_count = to_unsigned(72, 8) ) ELSE
                   input_pipeline_phase5(7) WHEN ( cur_count = to_unsigned(73, 8) ) ELSE
                   input_pipeline_phase5(8) WHEN ( cur_count = to_unsigned(74, 8) ) ELSE
                   input_pipeline_phase5(9) WHEN ( cur_count = to_unsigned(75, 8) ) ELSE
                   input_pipeline_phase5(10) WHEN ( cur_count = to_unsigned(76, 8) ) ELSE
                   input_pipeline_phase5(11) WHEN ( cur_count = to_unsigned(77, 8) ) ELSE
                   input_pipeline_phase5(12) WHEN ( cur_count = to_unsigned(78, 8) ) ELSE
                   input_pipeline_phase4(0) WHEN ( cur_count = to_unsigned(79, 8) ) ELSE
                   input_pipeline_phase4(1) WHEN ( cur_count = to_unsigned(80, 8) ) ELSE
                   input_pipeline_phase4(2) WHEN ( cur_count = to_unsigned(81, 8) ) ELSE
                   input_pipeline_phase4(3) WHEN ( cur_count = to_unsigned(82, 8) ) ELSE
                   input_pipeline_phase4(4) WHEN ( cur_count = to_unsigned(83, 8) ) ELSE
                   input_pipeline_phase4(5) WHEN ( cur_count = to_unsigned(84, 8) ) ELSE
                   input_pipeline_phase4(6) WHEN ( cur_count = to_unsigned(85, 8) ) ELSE
                   input_pipeline_phase4(7) WHEN ( cur_count = to_unsigned(86, 8) ) ELSE
                   input_pipeline_phase4(8) WHEN ( cur_count = to_unsigned(87, 8) ) ELSE
                   input_pipeline_phase4(9) WHEN ( cur_count = to_unsigned(88, 8) ) ELSE
                   input_pipeline_phase4(10) WHEN ( cur_count = to_unsigned(89, 8) ) ELSE
                   input_pipeline_phase4(11) WHEN ( cur_count = to_unsigned(90, 8) ) ELSE
                   input_pipeline_phase4(12) WHEN ( cur_count = to_unsigned(91, 8) ) ELSE
                   input_pipeline_phase3(0) WHEN ( cur_count = to_unsigned(92, 8) ) ELSE
                   input_pipeline_phase3(1) WHEN ( cur_count = to_unsigned(93, 8) ) ELSE
                   input_pipeline_phase3(2) WHEN ( cur_count = to_unsigned(94, 8) ) ELSE
                   input_pipeline_phase3(3) WHEN ( cur_count = to_unsigned(95, 8) ) ELSE
                   input_pipeline_phase3(4) WHEN ( cur_count = to_unsigned(96, 8) ) ELSE
                   input_pipeline_phase3(5) WHEN ( cur_count = to_unsigned(97, 8) ) ELSE
                   input_pipeline_phase3(6) WHEN ( cur_count = to_unsigned(98, 8) ) ELSE
                   input_pipeline_phase3(7) WHEN ( cur_count = to_unsigned(99, 8) ) ELSE
                   input_pipeline_phase3(8) WHEN ( cur_count = to_unsigned(100, 8) ) ELSE
                   input_pipeline_phase3(9) WHEN ( cur_count = to_unsigned(101, 8) ) ELSE
                   input_pipeline_phase3(10) WHEN ( cur_count = to_unsigned(102, 8) ) ELSE
                   input_pipeline_phase3(11) WHEN ( cur_count = to_unsigned(103, 8) ) ELSE
                   input_pipeline_phase3(12) WHEN ( cur_count = to_unsigned(104, 8) ) ELSE
                   input_pipeline_phase2(0) WHEN ( cur_count = to_unsigned(105, 8) ) ELSE
                   input_pipeline_phase2(1) WHEN ( cur_count = to_unsigned(106, 8) ) ELSE
                   input_pipeline_phase2(2) WHEN ( cur_count = to_unsigned(107, 8) ) ELSE
                   input_pipeline_phase2(3) WHEN ( cur_count = to_unsigned(108, 8) ) ELSE
                   input_pipeline_phase2(4) WHEN ( cur_count = to_unsigned(109, 8) ) ELSE
                   input_pipeline_phase2(5) WHEN ( cur_count = to_unsigned(110, 8) ) ELSE
                   input_pipeline_phase2(6) WHEN ( cur_count = to_unsigned(111, 8) ) ELSE
                   input_pipeline_phase2(7) WHEN ( cur_count = to_unsigned(112, 8) ) ELSE
                   input_pipeline_phase2(8) WHEN ( cur_count = to_unsigned(113, 8) ) ELSE
                   input_pipeline_phase2(9) WHEN ( cur_count = to_unsigned(114, 8) ) ELSE
                   input_pipeline_phase2(10) WHEN ( cur_count = to_unsigned(115, 8) ) ELSE
                   input_pipeline_phase2(11) WHEN ( cur_count = to_unsigned(116, 8) ) ELSE
                   input_pipeline_phase2(12) WHEN ( cur_count = to_unsigned(117, 8) ) ELSE
                   input_pipeline_phase1(0) WHEN ( cur_count = to_unsigned(118, 8) ) ELSE
                   input_pipeline_phase1(1) WHEN ( cur_count = to_unsigned(119, 8) ) ELSE
                   input_pipeline_phase1(2) WHEN ( cur_count = to_unsigned(120, 8) ) ELSE
                   input_pipeline_phase1(3) WHEN ( cur_count = to_unsigned(121, 8) ) ELSE
                   input_pipeline_phase1(4) WHEN ( cur_count = to_unsigned(122, 8) ) ELSE
                   input_pipeline_phase1(5) WHEN ( cur_count = to_unsigned(123, 8) ) ELSE
                   input_pipeline_phase1(6) WHEN ( cur_count = to_unsigned(124, 8) ) ELSE
                   input_pipeline_phase1(7) WHEN ( cur_count = to_unsigned(125, 8) ) ELSE
                   input_pipeline_phase1(8) WHEN ( cur_count = to_unsigned(126, 8) ) ELSE
                   input_pipeline_phase1(9) WHEN ( cur_count = to_unsigned(127, 8) ) ELSE
                   input_pipeline_phase1(10) WHEN ( cur_count = to_unsigned(128, 8) ) ELSE
                   input_pipeline_phase1(11) WHEN ( cur_count = to_unsigned(129, 8) ) ELSE
                   input_pipeline_phase1(12);

  product_mux <= coeffphase1_1 WHEN ( cur_count = to_unsigned(1, 8) ) ELSE
                      coeffphase1_2 WHEN ( cur_count = to_unsigned(2, 8) ) ELSE
                      coeffphase1_3 WHEN ( cur_count = to_unsigned(3, 8) ) ELSE
                      coeffphase1_4 WHEN ( cur_count = to_unsigned(4, 8) ) ELSE
                      coeffphase1_5 WHEN ( cur_count = to_unsigned(5, 8) ) ELSE
                      coeffphase1_6 WHEN ( cur_count = to_unsigned(6, 8) ) ELSE
                      coeffphase1_7 WHEN ( cur_count = to_unsigned(7, 8) ) ELSE
                      coeffphase1_8 WHEN ( cur_count = to_unsigned(8, 8) ) ELSE
                      coeffphase1_9 WHEN ( cur_count = to_unsigned(9, 8) ) ELSE
                      coeffphase1_10 WHEN ( cur_count = to_unsigned(10, 8) ) ELSE
                      coeffphase1_11 WHEN ( cur_count = to_unsigned(11, 8) ) ELSE
                      coeffphase1_12 WHEN ( cur_count = to_unsigned(12, 8) ) ELSE
                      coeffphase1_13 WHEN ( cur_count = to_unsigned(13, 8) ) ELSE
                      coeffphase10_1 WHEN ( cur_count = to_unsigned(14, 8) ) ELSE
                      coeffphase10_2 WHEN ( cur_count = to_unsigned(15, 8) ) ELSE
                      coeffphase10_3 WHEN ( cur_count = to_unsigned(16, 8) ) ELSE
                      coeffphase10_4 WHEN ( cur_count = to_unsigned(17, 8) ) ELSE
                      coeffphase10_5 WHEN ( cur_count = to_unsigned(18, 8) ) ELSE
                      coeffphase10_6 WHEN ( cur_count = to_unsigned(19, 8) ) ELSE
                      coeffphase10_7 WHEN ( cur_count = to_unsigned(20, 8) ) ELSE
                      coeffphase10_8 WHEN ( cur_count = to_unsigned(21, 8) ) ELSE
                      coeffphase10_9 WHEN ( cur_count = to_unsigned(22, 8) ) ELSE
                      coeffphase10_10 WHEN ( cur_count = to_unsigned(23, 8) ) ELSE
                      coeffphase10_11 WHEN ( cur_count = to_unsigned(24, 8) ) ELSE
                      coeffphase10_12 WHEN ( cur_count = to_unsigned(25, 8) ) ELSE
                      coeffphase9_1 WHEN ( cur_count = to_unsigned(27, 8) ) ELSE
                      coeffphase9_2 WHEN ( cur_count = to_unsigned(28, 8) ) ELSE
                      coeffphase9_3 WHEN ( cur_count = to_unsigned(29, 8) ) ELSE
                      coeffphase9_4 WHEN ( cur_count = to_unsigned(30, 8) ) ELSE
                      coeffphase9_5 WHEN ( cur_count = to_unsigned(31, 8) ) ELSE
                      coeffphase9_6 WHEN ( cur_count = to_unsigned(32, 8) ) ELSE
                      coeffphase9_7 WHEN ( cur_count = to_unsigned(33, 8) ) ELSE
                      coeffphase9_8 WHEN ( cur_count = to_unsigned(34, 8) ) ELSE
                      coeffphase9_9 WHEN ( cur_count = to_unsigned(35, 8) ) ELSE
                      coeffphase9_10 WHEN ( cur_count = to_unsigned(36, 8) ) ELSE
                      coeffphase9_11 WHEN ( cur_count = to_unsigned(37, 8) ) ELSE
                      coeffphase9_12 WHEN ( cur_count = to_unsigned(38, 8) ) ELSE
                      coeffphase9_13 WHEN ( cur_count = to_unsigned(39, 8) ) ELSE
                      coeffphase8_1 WHEN ( cur_count = to_unsigned(40, 8) ) ELSE
                      coeffphase8_2 WHEN ( cur_count = to_unsigned(41, 8) ) ELSE
                      coeffphase8_3 WHEN ( cur_count = to_unsigned(42, 8) ) ELSE
                      coeffphase8_4 WHEN ( cur_count = to_unsigned(43, 8) ) ELSE
                      coeffphase8_5 WHEN ( cur_count = to_unsigned(44, 8) ) ELSE
                      coeffphase8_6 WHEN ( cur_count = to_unsigned(45, 8) ) ELSE
                      coeffphase8_7 WHEN ( cur_count = to_unsigned(46, 8) ) ELSE
                      coeffphase8_8 WHEN ( cur_count = to_unsigned(47, 8) ) ELSE
                      coeffphase8_9 WHEN ( cur_count = to_unsigned(48, 8) ) ELSE
                      coeffphase8_10 WHEN ( cur_count = to_unsigned(49, 8) ) ELSE
                      coeffphase8_11 WHEN ( cur_count = to_unsigned(50, 8) ) ELSE
                      coeffphase8_12 WHEN ( cur_count = to_unsigned(51, 8) ) ELSE
                      coeffphase8_13 WHEN ( cur_count = to_unsigned(52, 8) ) ELSE
                      coeffphase7_1 WHEN ( cur_count = to_unsigned(53, 8) ) ELSE
                      coeffphase7_2 WHEN ( cur_count = to_unsigned(54, 8) ) ELSE
                      coeffphase7_3 WHEN ( cur_count = to_unsigned(55, 8) ) ELSE
                      coeffphase7_4 WHEN ( cur_count = to_unsigned(56, 8) ) ELSE
                      coeffphase7_5 WHEN ( cur_count = to_unsigned(57, 8) ) ELSE
                      coeffphase7_6 WHEN ( cur_count = to_unsigned(58, 8) ) ELSE
                      coeffphase7_7 WHEN ( cur_count = to_unsigned(59, 8) ) ELSE
                      coeffphase7_8 WHEN ( cur_count = to_unsigned(60, 8) ) ELSE
                      coeffphase7_9 WHEN ( cur_count = to_unsigned(61, 8) ) ELSE
                      coeffphase7_10 WHEN ( cur_count = to_unsigned(62, 8) ) ELSE
                      coeffphase7_11 WHEN ( cur_count = to_unsigned(63, 8) ) ELSE
                      coeffphase7_12 WHEN ( cur_count = to_unsigned(64, 8) ) ELSE
                      coeffphase7_13 WHEN ( cur_count = to_unsigned(65, 8) ) ELSE
                      coeffphase6_1 WHEN ( cur_count = to_unsigned(66, 8) ) ELSE
                      coeffphase6_2 WHEN ( cur_count = to_unsigned(67, 8) ) ELSE
                      coeffphase6_3 WHEN ( cur_count = to_unsigned(68, 8) ) ELSE
                      coeffphase6_4 WHEN ( cur_count = to_unsigned(69, 8) ) ELSE
                      coeffphase6_5 WHEN ( cur_count = to_unsigned(70, 8) ) ELSE
                      coeffphase6_6 WHEN ( cur_count = to_unsigned(71, 8) ) ELSE
                      coeffphase6_7 WHEN ( cur_count = to_unsigned(72, 8) ) ELSE
                      coeffphase6_8 WHEN ( cur_count = to_unsigned(73, 8) ) ELSE
                      coeffphase6_9 WHEN ( cur_count = to_unsigned(74, 8) ) ELSE
                      coeffphase6_10 WHEN ( cur_count = to_unsigned(75, 8) ) ELSE
                      coeffphase6_11 WHEN ( cur_count = to_unsigned(76, 8) ) ELSE
                      coeffphase6_12 WHEN ( cur_count = to_unsigned(77, 8) ) ELSE
                      coeffphase6_13 WHEN ( cur_count = to_unsigned(78, 8) ) ELSE
                      coeffphase5_1 WHEN ( cur_count = to_unsigned(79, 8) ) ELSE
                      coeffphase5_2 WHEN ( cur_count = to_unsigned(80, 8) ) ELSE
                      coeffphase5_3 WHEN ( cur_count = to_unsigned(81, 8) ) ELSE
                      coeffphase5_4 WHEN ( cur_count = to_unsigned(82, 8) ) ELSE
                      coeffphase5_5 WHEN ( cur_count = to_unsigned(83, 8) ) ELSE
                      coeffphase5_6 WHEN ( cur_count = to_unsigned(84, 8) ) ELSE
                      coeffphase5_7 WHEN ( cur_count = to_unsigned(85, 8) ) ELSE
                      coeffphase5_8 WHEN ( cur_count = to_unsigned(86, 8) ) ELSE
                      coeffphase5_9 WHEN ( cur_count = to_unsigned(87, 8) ) ELSE
                      coeffphase5_10 WHEN ( cur_count = to_unsigned(88, 8) ) ELSE
                      coeffphase5_11 WHEN ( cur_count = to_unsigned(89, 8) ) ELSE
                      coeffphase5_12 WHEN ( cur_count = to_unsigned(90, 8) ) ELSE
                      coeffphase5_13 WHEN ( cur_count = to_unsigned(91, 8) ) ELSE
                      coeffphase4_1 WHEN ( cur_count = to_unsigned(92, 8) ) ELSE
                      coeffphase4_2 WHEN ( cur_count = to_unsigned(93, 8) ) ELSE
                      coeffphase4_3 WHEN ( cur_count = to_unsigned(94, 8) ) ELSE
                      coeffphase4_4 WHEN ( cur_count = to_unsigned(95, 8) ) ELSE
                      coeffphase4_5 WHEN ( cur_count = to_unsigned(96, 8) ) ELSE
                      coeffphase4_6 WHEN ( cur_count = to_unsigned(97, 8) ) ELSE
                      coeffphase4_7 WHEN ( cur_count = to_unsigned(98, 8) ) ELSE
                      coeffphase4_8 WHEN ( cur_count = to_unsigned(99, 8) ) ELSE
                      coeffphase4_9 WHEN ( cur_count = to_unsigned(100, 8) ) ELSE
                      coeffphase4_10 WHEN ( cur_count = to_unsigned(101, 8) ) ELSE
                      coeffphase4_11 WHEN ( cur_count = to_unsigned(102, 8) ) ELSE
                      coeffphase4_12 WHEN ( cur_count = to_unsigned(103, 8) ) ELSE
                      coeffphase4_13 WHEN ( cur_count = to_unsigned(104, 8) ) ELSE
                      coeffphase3_1 WHEN ( cur_count = to_unsigned(105, 8) ) ELSE
                      coeffphase3_2 WHEN ( cur_count = to_unsigned(106, 8) ) ELSE
                      coeffphase3_3 WHEN ( cur_count = to_unsigned(107, 8) ) ELSE
                      coeffphase3_4 WHEN ( cur_count = to_unsigned(108, 8) ) ELSE
                      coeffphase3_5 WHEN ( cur_count = to_unsigned(109, 8) ) ELSE
                      coeffphase3_6 WHEN ( cur_count = to_unsigned(110, 8) ) ELSE
                      coeffphase3_7 WHEN ( cur_count = to_unsigned(111, 8) ) ELSE
                      coeffphase3_8 WHEN ( cur_count = to_unsigned(112, 8) ) ELSE
                      coeffphase3_9 WHEN ( cur_count = to_unsigned(113, 8) ) ELSE
                      coeffphase3_10 WHEN ( cur_count = to_unsigned(114, 8) ) ELSE
                      coeffphase3_11 WHEN ( cur_count = to_unsigned(115, 8) ) ELSE
                      coeffphase3_12 WHEN ( cur_count = to_unsigned(116, 8) ) ELSE
                      coeffphase3_13 WHEN ( cur_count = to_unsigned(117, 8) ) ELSE
                      coeffphase2_1 WHEN ( cur_count = to_unsigned(118, 8) ) ELSE
                      coeffphase2_2 WHEN ( cur_count = to_unsigned(119, 8) ) ELSE
                      coeffphase2_3 WHEN ( cur_count = to_unsigned(120, 8) ) ELSE
                      coeffphase2_4 WHEN ( cur_count = to_unsigned(121, 8) ) ELSE
                      coeffphase2_5 WHEN ( cur_count = to_unsigned(122, 8) ) ELSE
                      coeffphase2_6 WHEN ( cur_count = to_unsigned(123, 8) ) ELSE
                      coeffphase2_7 WHEN ( cur_count = to_unsigned(124, 8) ) ELSE
                      coeffphase2_8 WHEN ( cur_count = to_unsigned(125, 8) ) ELSE
                      coeffphase2_9 WHEN ( cur_count = to_unsigned(126, 8) ) ELSE
                      coeffphase2_10 WHEN ( cur_count = to_unsigned(127, 8) ) ELSE
                      coeffphase2_11 WHEN ( cur_count = to_unsigned(128, 8) ) ELSE
                      coeffphase2_12 WHEN ( cur_count = to_unsigned(129, 8) ) ELSE
                      coeffphase2_13;
  product <= inputmux * product_mux;

  phasemux <= product WHEN ( phase_1 = '1' ) ELSE
                   const_zero;


  -- Add the products in linear fashion

  sumofproducts <= phasemux;

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= resize(sumofproducts, 76);

  -- Accumulator register with a mux to reset it with the first addend

  add_temp <= resize(sumofproducts_cast, 77) + resize(accreg_out, 77);
  acc_sum <= add_temp(75 DOWNTO 0);

  accreg_in <= sumofproducts_cast WHEN ( phase_14 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_14 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= resize(shift_right(accreg_final(61 DOWNTO 0) + ( "0" & (accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46) & NOT accreg_final(46))), 46), 16);

  output_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_reg = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
