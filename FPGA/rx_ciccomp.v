// -------------------------------------------------------------
//
// Module: rx_ciccomp
// Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
// Generated on: 2018-11-06 21:08:50
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// OptimizeForHDL: on
// EDAScriptGeneration: off
// Name: rx_ciccomp
// SerialPartition: 32
// TargetLanguage: Verilog
// TestBenchName: rx_ciccomp_tb
// TestBenchStimulus: step ramp chirp noise 
// GenerateHDLTestBench: off

// Filter Specifications:
//
// Sample Rate            : N/A (normalized frequency)
// Response               : CIC Compensator
// Specification          : Fp,Fst,Ap,Ast
// Decimation Factor      : 2
// Multirate Type         : Decimator
// Passband Edge          : 0.9
// CIC Rate Change Factor : 521
// Number of Sections     : 6
// Stopband Atten.        : 60 dB
// Passband Ripple        : 1 dB
// Differential Delay     : 1
// Stopband Edge          : 0.99
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Fully Serial
// Folding Factor        : 32
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 33
// Filter Length      : 66
// Stable             : Yes
// Linear Phase       : Yes (Type 2)
//
// Arithmetic         : fixed
// Numerator          : s16,14 -> [-2 2)
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module rx_ciccomp
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [15:0] filter_out; //sfix16_En15
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: rx_ciccomp
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter const_one = 1'b1; //boolean
  parameter signed [15:0] coeffphase1_1 = 16'b0000001000101001; //sfix16_En14
  parameter signed [15:0] coeffphase1_2 = 16'b0000000101011111; //sfix16_En14
  parameter signed [15:0] coeffphase1_3 = 16'b0000000110011100; //sfix16_En14
  parameter signed [15:0] coeffphase1_4 = 16'b0000000101100110; //sfix16_En14
  parameter signed [15:0] coeffphase1_5 = 16'b0000000010001010; //sfix16_En14
  parameter signed [15:0] coeffphase1_6 = 16'b1111111011110000; //sfix16_En14
  parameter signed [15:0] coeffphase1_7 = 16'b1111110010101110; //sfix16_En14
  parameter signed [15:0] coeffphase1_8 = 16'b1111101000010001; //sfix16_En14
  parameter signed [15:0] coeffphase1_9 = 16'b1111011110100110; //sfix16_En14
  parameter signed [15:0] coeffphase1_10 = 16'b1111011000110011; //sfix16_En14
  parameter signed [15:0] coeffphase1_11 = 16'b1111011010101010; //sfix16_En14
  parameter signed [15:0] coeffphase1_12 = 16'b1111101000010100; //sfix16_En14
  parameter signed [15:0] coeffphase1_13 = 16'b0000000110011100; //sfix16_En14
  parameter signed [15:0] coeffphase1_14 = 16'b0000111010101111; //sfix16_En14
  parameter signed [15:0] coeffphase1_15 = 16'b0010001101111010; //sfix16_En14
  parameter signed [15:0] coeffphase1_16 = 16'b0100001010110001; //sfix16_En14
  parameter signed [15:0] coeffphase1_17 = 16'b0100110100110011; //sfix16_En14
  parameter signed [15:0] coeffphase1_18 = 16'b1010110011101010; //sfix16_En14
  parameter signed [15:0] coeffphase1_19 = 16'b1100111001000010; //sfix16_En14
  parameter signed [15:0] coeffphase1_20 = 16'b1110100000010010; //sfix16_En14
  parameter signed [15:0] coeffphase1_21 = 16'b1111100010101000; //sfix16_En14
  parameter signed [15:0] coeffphase1_22 = 16'b0000001011000000; //sfix16_En14
  parameter signed [15:0] coeffphase1_23 = 16'b0000100000010001; //sfix16_En14
  parameter signed [15:0] coeffphase1_24 = 16'b0000100111011111; //sfix16_En14
  parameter signed [15:0] coeffphase1_25 = 16'b0000100101000000; //sfix16_En14
  parameter signed [15:0] coeffphase1_26 = 16'b0000011100110110; //sfix16_En14
  parameter signed [15:0] coeffphase1_27 = 16'b0000010010011101; //sfix16_En14
  parameter signed [15:0] coeffphase1_28 = 16'b0000001000011111; //sfix16_En14
  parameter signed [15:0] coeffphase1_29 = 16'b0000000000101011; //sfix16_En14
  parameter signed [15:0] coeffphase1_30 = 16'b1111111011110001; //sfix16_En14
  parameter signed [15:0] coeffphase1_31 = 16'b1111111001101101; //sfix16_En14
  parameter signed [15:0] coeffphase1_32 = 16'b1111111001111000; //sfix16_En14
  parameter signed [15:0] coeffphase1_33 = 16'b1111111011011000; //sfix16_En14
  parameter signed [15:0] coeffphase2_1 = 16'b1111111011011000; //sfix16_En14
  parameter signed [15:0] coeffphase2_2 = 16'b1111111001111000; //sfix16_En14
  parameter signed [15:0] coeffphase2_3 = 16'b1111111001101101; //sfix16_En14
  parameter signed [15:0] coeffphase2_4 = 16'b1111111011110001; //sfix16_En14
  parameter signed [15:0] coeffphase2_5 = 16'b0000000000101011; //sfix16_En14
  parameter signed [15:0] coeffphase2_6 = 16'b0000001000011111; //sfix16_En14
  parameter signed [15:0] coeffphase2_7 = 16'b0000010010011101; //sfix16_En14
  parameter signed [15:0] coeffphase2_8 = 16'b0000011100110110; //sfix16_En14
  parameter signed [15:0] coeffphase2_9 = 16'b0000100101000000; //sfix16_En14
  parameter signed [15:0] coeffphase2_10 = 16'b0000100111011111; //sfix16_En14
  parameter signed [15:0] coeffphase2_11 = 16'b0000100000010001; //sfix16_En14
  parameter signed [15:0] coeffphase2_12 = 16'b0000001011000000; //sfix16_En14
  parameter signed [15:0] coeffphase2_13 = 16'b1111100010101000; //sfix16_En14
  parameter signed [15:0] coeffphase2_14 = 16'b1110100000010010; //sfix16_En14
  parameter signed [15:0] coeffphase2_15 = 16'b1100111001000010; //sfix16_En14
  parameter signed [15:0] coeffphase2_16 = 16'b1010110011101010; //sfix16_En14
  parameter signed [15:0] coeffphase2_17 = 16'b0100110100110011; //sfix16_En14
  parameter signed [15:0] coeffphase2_18 = 16'b0100001010110001; //sfix16_En14
  parameter signed [15:0] coeffphase2_19 = 16'b0010001101111010; //sfix16_En14
  parameter signed [15:0] coeffphase2_20 = 16'b0000111010101111; //sfix16_En14
  parameter signed [15:0] coeffphase2_21 = 16'b0000000110011100; //sfix16_En14
  parameter signed [15:0] coeffphase2_22 = 16'b1111101000010100; //sfix16_En14
  parameter signed [15:0] coeffphase2_23 = 16'b1111011010101010; //sfix16_En14
  parameter signed [15:0] coeffphase2_24 = 16'b1111011000110011; //sfix16_En14
  parameter signed [15:0] coeffphase2_25 = 16'b1111011110100110; //sfix16_En14
  parameter signed [15:0] coeffphase2_26 = 16'b1111101000010001; //sfix16_En14
  parameter signed [15:0] coeffphase2_27 = 16'b1111110010101110; //sfix16_En14
  parameter signed [15:0] coeffphase2_28 = 16'b1111111011110000; //sfix16_En14
  parameter signed [15:0] coeffphase2_29 = 16'b0000000010001010; //sfix16_En14
  parameter signed [15:0] coeffphase2_30 = 16'b0000000101100110; //sfix16_En14
  parameter signed [15:0] coeffphase2_31 = 16'b0000000110011100; //sfix16_En14
  parameter signed [15:0] coeffphase2_32 = 16'b0000000101011111; //sfix16_En14
  parameter signed [15:0] coeffphase2_33 = 16'b0000001000101001; //sfix16_En14

  // Signals
  reg  [5:0] cur_count; // ufix6
  wire phase_0; // boolean
  wire phase_32; // boolean
  wire phase_33; // boolean
  wire phase_temp; // boolean
  wire phase_reg_temp; // boolean
  wire phase_reg; // boolean
  reg  int_delay_pipe [0:63] ; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [15:0] input_register; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase0 [0:32] ; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase1 [0:32] ; // sfix16_En15
  wire signed [16:0] tapsum_0_2and0_12; // sfix17_En15
  wire signed [15:0] add_signext; // sfix16_En15
  wire signed [15:0] add_signext_1; // sfix16_En15
  wire signed [16:0] tapsum_1_20and1_30; // sfix17_En15
  wire signed [15:0] add_signext_2; // sfix16_En15
  wire signed [15:0] add_signext_3; // sfix16_En15
  wire signed [16:0] input_pipeline_phase00_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase01_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase03_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase04_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase05_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase06_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase07_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase08_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase09_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase010_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase011_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase013_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase014_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase015_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase016_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase017_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase018_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase019_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase020_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase021_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase022_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase023_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase024_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase025_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase026_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase027_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase028_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase029_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase030_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase031_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase032_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase10_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase11_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase12_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase13_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase14_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase15_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase16_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase17_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase18_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase19_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase110_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase111_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase112_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase113_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase114_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase115_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase116_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase117_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase118_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase119_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase121_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase122_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase123_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase124_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase125_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase126_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase127_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase128_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase129_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase131_cast; // sfix17_En15
  wire signed [16:0] input_pipeline_phase132_cast; // sfix17_En15
  wire signed [16:0] inputmux; // sfix17_En15
  wire signed [32:0] product; // sfix33_En29
  wire signed [15:0] product_mux; // sfix16_En14
  wire signed [32:0] sumofproducts; // sfix33_En29
  wire signed [63:0] sumofproducts_cast; // sfix64_En29
  wire signed [63:0] acc_sum; // sfix64_En29
  wire signed [63:0] accreg_in; // sfix64_En29
  reg  signed [63:0] accreg_out; // sfix64_En29
  wire signed [63:0] add_signext_4; // sfix64_En29
  wire signed [63:0] add_signext_5; // sfix64_En29
  wire signed [64:0] add_temp; // sfix65_En29
  reg  signed [63:0] accreg_final; // sfix64_En29
  wire signed [15:0] output_typeconvert; // sfix16_En15
  reg  signed [15:0] output_register; // sfix16_En15

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter
      if (reset == 1'b1) begin
        cur_count <= 6'b111111;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 6'b111111) begin
            cur_count <= 6'b000000;
          end
          else begin
            cur_count <= cur_count + 6'b000001;
          end
        end
      end
    end // Counter

  assign  phase_0 = (cur_count == 6'b000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_32 = (cur_count == 6'b100000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_33 = (cur_count == 6'b100001 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign phase_temp =  phase_0 & const_one;

  always @ (posedge clk or posedge reset)
    begin: ceout_delay_process
      if (reset == 1'b1) begin
        int_delay_pipe[0] <= 1'b0;
        int_delay_pipe[1] <= 1'b0;
        int_delay_pipe[2] <= 1'b0;
        int_delay_pipe[3] <= 1'b0;
        int_delay_pipe[4] <= 1'b0;
        int_delay_pipe[5] <= 1'b0;
        int_delay_pipe[6] <= 1'b0;
        int_delay_pipe[7] <= 1'b0;
        int_delay_pipe[8] <= 1'b0;
        int_delay_pipe[9] <= 1'b0;
        int_delay_pipe[10] <= 1'b0;
        int_delay_pipe[11] <= 1'b0;
        int_delay_pipe[12] <= 1'b0;
        int_delay_pipe[13] <= 1'b0;
        int_delay_pipe[14] <= 1'b0;
        int_delay_pipe[15] <= 1'b0;
        int_delay_pipe[16] <= 1'b0;
        int_delay_pipe[17] <= 1'b0;
        int_delay_pipe[18] <= 1'b0;
        int_delay_pipe[19] <= 1'b0;
        int_delay_pipe[20] <= 1'b0;
        int_delay_pipe[21] <= 1'b0;
        int_delay_pipe[22] <= 1'b0;
        int_delay_pipe[23] <= 1'b0;
        int_delay_pipe[24] <= 1'b0;
        int_delay_pipe[25] <= 1'b0;
        int_delay_pipe[26] <= 1'b0;
        int_delay_pipe[27] <= 1'b0;
        int_delay_pipe[28] <= 1'b0;
        int_delay_pipe[29] <= 1'b0;
        int_delay_pipe[30] <= 1'b0;
        int_delay_pipe[31] <= 1'b0;
        int_delay_pipe[32] <= 1'b0;
        int_delay_pipe[33] <= 1'b0;
        int_delay_pipe[34] <= 1'b0;
        int_delay_pipe[35] <= 1'b0;
        int_delay_pipe[36] <= 1'b0;
        int_delay_pipe[37] <= 1'b0;
        int_delay_pipe[38] <= 1'b0;
        int_delay_pipe[39] <= 1'b0;
        int_delay_pipe[40] <= 1'b0;
        int_delay_pipe[41] <= 1'b0;
        int_delay_pipe[42] <= 1'b0;
        int_delay_pipe[43] <= 1'b0;
        int_delay_pipe[44] <= 1'b0;
        int_delay_pipe[45] <= 1'b0;
        int_delay_pipe[46] <= 1'b0;
        int_delay_pipe[47] <= 1'b0;
        int_delay_pipe[48] <= 1'b0;
        int_delay_pipe[49] <= 1'b0;
        int_delay_pipe[50] <= 1'b0;
        int_delay_pipe[51] <= 1'b0;
        int_delay_pipe[52] <= 1'b0;
        int_delay_pipe[53] <= 1'b0;
        int_delay_pipe[54] <= 1'b0;
        int_delay_pipe[55] <= 1'b0;
        int_delay_pipe[56] <= 1'b0;
        int_delay_pipe[57] <= 1'b0;
        int_delay_pipe[58] <= 1'b0;
        int_delay_pipe[59] <= 1'b0;
        int_delay_pipe[60] <= 1'b0;
        int_delay_pipe[61] <= 1'b0;
        int_delay_pipe[62] <= 1'b0;
        int_delay_pipe[63] <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          int_delay_pipe[1] <= int_delay_pipe[0];
          int_delay_pipe[2] <= int_delay_pipe[1];
          int_delay_pipe[3] <= int_delay_pipe[2];
          int_delay_pipe[4] <= int_delay_pipe[3];
          int_delay_pipe[5] <= int_delay_pipe[4];
          int_delay_pipe[6] <= int_delay_pipe[5];
          int_delay_pipe[7] <= int_delay_pipe[6];
          int_delay_pipe[8] <= int_delay_pipe[7];
          int_delay_pipe[9] <= int_delay_pipe[8];
          int_delay_pipe[10] <= int_delay_pipe[9];
          int_delay_pipe[11] <= int_delay_pipe[10];
          int_delay_pipe[12] <= int_delay_pipe[11];
          int_delay_pipe[13] <= int_delay_pipe[12];
          int_delay_pipe[14] <= int_delay_pipe[13];
          int_delay_pipe[15] <= int_delay_pipe[14];
          int_delay_pipe[16] <= int_delay_pipe[15];
          int_delay_pipe[17] <= int_delay_pipe[16];
          int_delay_pipe[18] <= int_delay_pipe[17];
          int_delay_pipe[19] <= int_delay_pipe[18];
          int_delay_pipe[20] <= int_delay_pipe[19];
          int_delay_pipe[21] <= int_delay_pipe[20];
          int_delay_pipe[22] <= int_delay_pipe[21];
          int_delay_pipe[23] <= int_delay_pipe[22];
          int_delay_pipe[24] <= int_delay_pipe[23];
          int_delay_pipe[25] <= int_delay_pipe[24];
          int_delay_pipe[26] <= int_delay_pipe[25];
          int_delay_pipe[27] <= int_delay_pipe[26];
          int_delay_pipe[28] <= int_delay_pipe[27];
          int_delay_pipe[29] <= int_delay_pipe[28];
          int_delay_pipe[30] <= int_delay_pipe[29];
          int_delay_pipe[31] <= int_delay_pipe[30];
          int_delay_pipe[32] <= int_delay_pipe[31];
          int_delay_pipe[33] <= int_delay_pipe[32];
          int_delay_pipe[34] <= int_delay_pipe[33];
          int_delay_pipe[35] <= int_delay_pipe[34];
          int_delay_pipe[36] <= int_delay_pipe[35];
          int_delay_pipe[37] <= int_delay_pipe[36];
          int_delay_pipe[38] <= int_delay_pipe[37];
          int_delay_pipe[39] <= int_delay_pipe[38];
          int_delay_pipe[40] <= int_delay_pipe[39];
          int_delay_pipe[41] <= int_delay_pipe[40];
          int_delay_pipe[42] <= int_delay_pipe[41];
          int_delay_pipe[43] <= int_delay_pipe[42];
          int_delay_pipe[44] <= int_delay_pipe[43];
          int_delay_pipe[45] <= int_delay_pipe[44];
          int_delay_pipe[46] <= int_delay_pipe[45];
          int_delay_pipe[47] <= int_delay_pipe[46];
          int_delay_pipe[48] <= int_delay_pipe[47];
          int_delay_pipe[49] <= int_delay_pipe[48];
          int_delay_pipe[50] <= int_delay_pipe[49];
          int_delay_pipe[51] <= int_delay_pipe[50];
          int_delay_pipe[52] <= int_delay_pipe[51];
          int_delay_pipe[53] <= int_delay_pipe[52];
          int_delay_pipe[54] <= int_delay_pipe[53];
          int_delay_pipe[55] <= int_delay_pipe[54];
          int_delay_pipe[56] <= int_delay_pipe[55];
          int_delay_pipe[57] <= int_delay_pipe[56];
          int_delay_pipe[58] <= int_delay_pipe[57];
          int_delay_pipe[59] <= int_delay_pipe[58];
          int_delay_pipe[60] <= int_delay_pipe[59];
          int_delay_pipe[61] <= int_delay_pipe[60];
          int_delay_pipe[62] <= int_delay_pipe[61];
          int_delay_pipe[63] <= int_delay_pipe[62];
          int_delay_pipe[0] <= phase_temp;
        end
      end
    end // ceout_delay_process
  assign phase_reg_temp = int_delay_pipe[63];

  assign phase_reg =  phase_reg_temp & phase_temp;

  always @ (posedge clk or posedge reset)
    begin: ce_out_register_process
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ce_out_reg <= phase_reg;
        end
      end
    end // ce_out_register_process

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
        input_pipeline_phase0[5] <= 0;
        input_pipeline_phase0[6] <= 0;
        input_pipeline_phase0[7] <= 0;
        input_pipeline_phase0[8] <= 0;
        input_pipeline_phase0[9] <= 0;
        input_pipeline_phase0[10] <= 0;
        input_pipeline_phase0[11] <= 0;
        input_pipeline_phase0[12] <= 0;
        input_pipeline_phase0[13] <= 0;
        input_pipeline_phase0[14] <= 0;
        input_pipeline_phase0[15] <= 0;
        input_pipeline_phase0[16] <= 0;
        input_pipeline_phase0[17] <= 0;
        input_pipeline_phase0[18] <= 0;
        input_pipeline_phase0[19] <= 0;
        input_pipeline_phase0[20] <= 0;
        input_pipeline_phase0[21] <= 0;
        input_pipeline_phase0[22] <= 0;
        input_pipeline_phase0[23] <= 0;
        input_pipeline_phase0[24] <= 0;
        input_pipeline_phase0[25] <= 0;
        input_pipeline_phase0[26] <= 0;
        input_pipeline_phase0[27] <= 0;
        input_pipeline_phase0[28] <= 0;
        input_pipeline_phase0[29] <= 0;
        input_pipeline_phase0[30] <= 0;
        input_pipeline_phase0[31] <= 0;
        input_pipeline_phase0[32] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase0[0] <= input_register;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
          input_pipeline_phase0[5] <= input_pipeline_phase0[4];
          input_pipeline_phase0[6] <= input_pipeline_phase0[5];
          input_pipeline_phase0[7] <= input_pipeline_phase0[6];
          input_pipeline_phase0[8] <= input_pipeline_phase0[7];
          input_pipeline_phase0[9] <= input_pipeline_phase0[8];
          input_pipeline_phase0[10] <= input_pipeline_phase0[9];
          input_pipeline_phase0[11] <= input_pipeline_phase0[10];
          input_pipeline_phase0[12] <= input_pipeline_phase0[11];
          input_pipeline_phase0[13] <= input_pipeline_phase0[12];
          input_pipeline_phase0[14] <= input_pipeline_phase0[13];
          input_pipeline_phase0[15] <= input_pipeline_phase0[14];
          input_pipeline_phase0[16] <= input_pipeline_phase0[15];
          input_pipeline_phase0[17] <= input_pipeline_phase0[16];
          input_pipeline_phase0[18] <= input_pipeline_phase0[17];
          input_pipeline_phase0[19] <= input_pipeline_phase0[18];
          input_pipeline_phase0[20] <= input_pipeline_phase0[19];
          input_pipeline_phase0[21] <= input_pipeline_phase0[20];
          input_pipeline_phase0[22] <= input_pipeline_phase0[21];
          input_pipeline_phase0[23] <= input_pipeline_phase0[22];
          input_pipeline_phase0[24] <= input_pipeline_phase0[23];
          input_pipeline_phase0[25] <= input_pipeline_phase0[24];
          input_pipeline_phase0[26] <= input_pipeline_phase0[25];
          input_pipeline_phase0[27] <= input_pipeline_phase0[26];
          input_pipeline_phase0[28] <= input_pipeline_phase0[27];
          input_pipeline_phase0[29] <= input_pipeline_phase0[28];
          input_pipeline_phase0[30] <= input_pipeline_phase0[29];
          input_pipeline_phase0[31] <= input_pipeline_phase0[30];
          input_pipeline_phase0[32] <= input_pipeline_phase0[31];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
        input_pipeline_phase1[7] <= 0;
        input_pipeline_phase1[8] <= 0;
        input_pipeline_phase1[9] <= 0;
        input_pipeline_phase1[10] <= 0;
        input_pipeline_phase1[11] <= 0;
        input_pipeline_phase1[12] <= 0;
        input_pipeline_phase1[13] <= 0;
        input_pipeline_phase1[14] <= 0;
        input_pipeline_phase1[15] <= 0;
        input_pipeline_phase1[16] <= 0;
        input_pipeline_phase1[17] <= 0;
        input_pipeline_phase1[18] <= 0;
        input_pipeline_phase1[19] <= 0;
        input_pipeline_phase1[20] <= 0;
        input_pipeline_phase1[21] <= 0;
        input_pipeline_phase1[22] <= 0;
        input_pipeline_phase1[23] <= 0;
        input_pipeline_phase1[24] <= 0;
        input_pipeline_phase1[25] <= 0;
        input_pipeline_phase1[26] <= 0;
        input_pipeline_phase1[27] <= 0;
        input_pipeline_phase1[28] <= 0;
        input_pipeline_phase1[29] <= 0;
        input_pipeline_phase1[30] <= 0;
        input_pipeline_phase1[31] <= 0;
        input_pipeline_phase1[32] <= 0;
      end
      else begin
        if (phase_32 == 1'b1) begin
          input_pipeline_phase1[0] <= input_register;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
          input_pipeline_phase1[7] <= input_pipeline_phase1[6];
          input_pipeline_phase1[8] <= input_pipeline_phase1[7];
          input_pipeline_phase1[9] <= input_pipeline_phase1[8];
          input_pipeline_phase1[10] <= input_pipeline_phase1[9];
          input_pipeline_phase1[11] <= input_pipeline_phase1[10];
          input_pipeline_phase1[12] <= input_pipeline_phase1[11];
          input_pipeline_phase1[13] <= input_pipeline_phase1[12];
          input_pipeline_phase1[14] <= input_pipeline_phase1[13];
          input_pipeline_phase1[15] <= input_pipeline_phase1[14];
          input_pipeline_phase1[16] <= input_pipeline_phase1[15];
          input_pipeline_phase1[17] <= input_pipeline_phase1[16];
          input_pipeline_phase1[18] <= input_pipeline_phase1[17];
          input_pipeline_phase1[19] <= input_pipeline_phase1[18];
          input_pipeline_phase1[20] <= input_pipeline_phase1[19];
          input_pipeline_phase1[21] <= input_pipeline_phase1[20];
          input_pipeline_phase1[22] <= input_pipeline_phase1[21];
          input_pipeline_phase1[23] <= input_pipeline_phase1[22];
          input_pipeline_phase1[24] <= input_pipeline_phase1[23];
          input_pipeline_phase1[25] <= input_pipeline_phase1[24];
          input_pipeline_phase1[26] <= input_pipeline_phase1[25];
          input_pipeline_phase1[27] <= input_pipeline_phase1[26];
          input_pipeline_phase1[28] <= input_pipeline_phase1[27];
          input_pipeline_phase1[29] <= input_pipeline_phase1[28];
          input_pipeline_phase1[30] <= input_pipeline_phase1[29];
          input_pipeline_phase1[31] <= input_pipeline_phase1[30];
          input_pipeline_phase1[32] <= input_pipeline_phase1[31];
        end
      end
    end // Delay_Pipeline_Phase1_process


  // Adding (or subtracting) the taps based on the symmetry (or asymmetry)

  assign add_signext = input_pipeline_phase0[2];
  assign add_signext_1 = input_pipeline_phase0[12];
  assign tapsum_0_2and0_12 = add_signext + add_signext_1;

  assign add_signext_2 = input_pipeline_phase1[20];
  assign add_signext_3 = input_pipeline_phase1[30];
  assign tapsum_1_20and1_30 = add_signext_2 + add_signext_3;

  // Mux(es) to select the input taps for multipliers 

  assign input_pipeline_phase00_cast = $signed({{1{input_pipeline_phase0[0][15]}}, input_pipeline_phase0[0]});

  assign input_pipeline_phase01_cast = $signed({{1{input_pipeline_phase0[1][15]}}, input_pipeline_phase0[1]});

  assign input_pipeline_phase03_cast = $signed({{1{input_pipeline_phase0[3][15]}}, input_pipeline_phase0[3]});

  assign input_pipeline_phase04_cast = $signed({{1{input_pipeline_phase0[4][15]}}, input_pipeline_phase0[4]});

  assign input_pipeline_phase05_cast = $signed({{1{input_pipeline_phase0[5][15]}}, input_pipeline_phase0[5]});

  assign input_pipeline_phase06_cast = $signed({{1{input_pipeline_phase0[6][15]}}, input_pipeline_phase0[6]});

  assign input_pipeline_phase07_cast = $signed({{1{input_pipeline_phase0[7][15]}}, input_pipeline_phase0[7]});

  assign input_pipeline_phase08_cast = $signed({{1{input_pipeline_phase0[8][15]}}, input_pipeline_phase0[8]});

  assign input_pipeline_phase09_cast = $signed({{1{input_pipeline_phase0[9][15]}}, input_pipeline_phase0[9]});

  assign input_pipeline_phase010_cast = $signed({{1{input_pipeline_phase0[10][15]}}, input_pipeline_phase0[10]});

  assign input_pipeline_phase011_cast = $signed({{1{input_pipeline_phase0[11][15]}}, input_pipeline_phase0[11]});

  assign input_pipeline_phase013_cast = $signed({{1{input_pipeline_phase0[13][15]}}, input_pipeline_phase0[13]});

  assign input_pipeline_phase014_cast = $signed({{1{input_pipeline_phase0[14][15]}}, input_pipeline_phase0[14]});

  assign input_pipeline_phase015_cast = $signed({{1{input_pipeline_phase0[15][15]}}, input_pipeline_phase0[15]});

  assign input_pipeline_phase016_cast = $signed({{1{input_pipeline_phase0[16][15]}}, input_pipeline_phase0[16]});

  assign input_pipeline_phase017_cast = $signed({{1{input_pipeline_phase0[17][15]}}, input_pipeline_phase0[17]});

  assign input_pipeline_phase018_cast = $signed({{1{input_pipeline_phase0[18][15]}}, input_pipeline_phase0[18]});

  assign input_pipeline_phase019_cast = $signed({{1{input_pipeline_phase0[19][15]}}, input_pipeline_phase0[19]});

  assign input_pipeline_phase020_cast = $signed({{1{input_pipeline_phase0[20][15]}}, input_pipeline_phase0[20]});

  assign input_pipeline_phase021_cast = $signed({{1{input_pipeline_phase0[21][15]}}, input_pipeline_phase0[21]});

  assign input_pipeline_phase022_cast = $signed({{1{input_pipeline_phase0[22][15]}}, input_pipeline_phase0[22]});

  assign input_pipeline_phase023_cast = $signed({{1{input_pipeline_phase0[23][15]}}, input_pipeline_phase0[23]});

  assign input_pipeline_phase024_cast = $signed({{1{input_pipeline_phase0[24][15]}}, input_pipeline_phase0[24]});

  assign input_pipeline_phase025_cast = $signed({{1{input_pipeline_phase0[25][15]}}, input_pipeline_phase0[25]});

  assign input_pipeline_phase026_cast = $signed({{1{input_pipeline_phase0[26][15]}}, input_pipeline_phase0[26]});

  assign input_pipeline_phase027_cast = $signed({{1{input_pipeline_phase0[27][15]}}, input_pipeline_phase0[27]});

  assign input_pipeline_phase028_cast = $signed({{1{input_pipeline_phase0[28][15]}}, input_pipeline_phase0[28]});

  assign input_pipeline_phase029_cast = $signed({{1{input_pipeline_phase0[29][15]}}, input_pipeline_phase0[29]});

  assign input_pipeline_phase030_cast = $signed({{1{input_pipeline_phase0[30][15]}}, input_pipeline_phase0[30]});

  assign input_pipeline_phase031_cast = $signed({{1{input_pipeline_phase0[31][15]}}, input_pipeline_phase0[31]});

  assign input_pipeline_phase032_cast = $signed({{1{input_pipeline_phase0[32][15]}}, input_pipeline_phase0[32]});

  assign input_pipeline_phase10_cast = $signed({{1{input_pipeline_phase1[0][15]}}, input_pipeline_phase1[0]});

  assign input_pipeline_phase11_cast = $signed({{1{input_pipeline_phase1[1][15]}}, input_pipeline_phase1[1]});

  assign input_pipeline_phase12_cast = $signed({{1{input_pipeline_phase1[2][15]}}, input_pipeline_phase1[2]});

  assign input_pipeline_phase13_cast = $signed({{1{input_pipeline_phase1[3][15]}}, input_pipeline_phase1[3]});

  assign input_pipeline_phase14_cast = $signed({{1{input_pipeline_phase1[4][15]}}, input_pipeline_phase1[4]});

  assign input_pipeline_phase15_cast = $signed({{1{input_pipeline_phase1[5][15]}}, input_pipeline_phase1[5]});

  assign input_pipeline_phase16_cast = $signed({{1{input_pipeline_phase1[6][15]}}, input_pipeline_phase1[6]});

  assign input_pipeline_phase17_cast = $signed({{1{input_pipeline_phase1[7][15]}}, input_pipeline_phase1[7]});

  assign input_pipeline_phase18_cast = $signed({{1{input_pipeline_phase1[8][15]}}, input_pipeline_phase1[8]});

  assign input_pipeline_phase19_cast = $signed({{1{input_pipeline_phase1[9][15]}}, input_pipeline_phase1[9]});

  assign input_pipeline_phase110_cast = $signed({{1{input_pipeline_phase1[10][15]}}, input_pipeline_phase1[10]});

  assign input_pipeline_phase111_cast = $signed({{1{input_pipeline_phase1[11][15]}}, input_pipeline_phase1[11]});

  assign input_pipeline_phase112_cast = $signed({{1{input_pipeline_phase1[12][15]}}, input_pipeline_phase1[12]});

  assign input_pipeline_phase113_cast = $signed({{1{input_pipeline_phase1[13][15]}}, input_pipeline_phase1[13]});

  assign input_pipeline_phase114_cast = $signed({{1{input_pipeline_phase1[14][15]}}, input_pipeline_phase1[14]});

  assign input_pipeline_phase115_cast = $signed({{1{input_pipeline_phase1[15][15]}}, input_pipeline_phase1[15]});

  assign input_pipeline_phase116_cast = $signed({{1{input_pipeline_phase1[16][15]}}, input_pipeline_phase1[16]});

  assign input_pipeline_phase117_cast = $signed({{1{input_pipeline_phase1[17][15]}}, input_pipeline_phase1[17]});

  assign input_pipeline_phase118_cast = $signed({{1{input_pipeline_phase1[18][15]}}, input_pipeline_phase1[18]});

  assign input_pipeline_phase119_cast = $signed({{1{input_pipeline_phase1[19][15]}}, input_pipeline_phase1[19]});

  assign input_pipeline_phase121_cast = $signed({{1{input_pipeline_phase1[21][15]}}, input_pipeline_phase1[21]});

  assign input_pipeline_phase122_cast = $signed({{1{input_pipeline_phase1[22][15]}}, input_pipeline_phase1[22]});

  assign input_pipeline_phase123_cast = $signed({{1{input_pipeline_phase1[23][15]}}, input_pipeline_phase1[23]});

  assign input_pipeline_phase124_cast = $signed({{1{input_pipeline_phase1[24][15]}}, input_pipeline_phase1[24]});

  assign input_pipeline_phase125_cast = $signed({{1{input_pipeline_phase1[25][15]}}, input_pipeline_phase1[25]});

  assign input_pipeline_phase126_cast = $signed({{1{input_pipeline_phase1[26][15]}}, input_pipeline_phase1[26]});

  assign input_pipeline_phase127_cast = $signed({{1{input_pipeline_phase1[27][15]}}, input_pipeline_phase1[27]});

  assign input_pipeline_phase128_cast = $signed({{1{input_pipeline_phase1[28][15]}}, input_pipeline_phase1[28]});

  assign input_pipeline_phase129_cast = $signed({{1{input_pipeline_phase1[29][15]}}, input_pipeline_phase1[29]});

  assign input_pipeline_phase131_cast = $signed({{1{input_pipeline_phase1[31][15]}}, input_pipeline_phase1[31]});

  assign input_pipeline_phase132_cast = $signed({{1{input_pipeline_phase1[32][15]}}, input_pipeline_phase1[32]});

  assign inputmux = (cur_count == 6'b000001) ? input_pipeline_phase00_cast :
                   (cur_count == 6'b000010) ? input_pipeline_phase01_cast :
                   (cur_count == 6'b000011) ? tapsum_0_2and0_12 :
                   (cur_count == 6'b000100) ? input_pipeline_phase03_cast :
                   (cur_count == 6'b000101) ? input_pipeline_phase04_cast :
                   (cur_count == 6'b000110) ? input_pipeline_phase05_cast :
                   (cur_count == 6'b000111) ? input_pipeline_phase06_cast :
                   (cur_count == 6'b001000) ? input_pipeline_phase07_cast :
                   (cur_count == 6'b001001) ? input_pipeline_phase08_cast :
                   (cur_count == 6'b001010) ? input_pipeline_phase09_cast :
                   (cur_count == 6'b001011) ? input_pipeline_phase010_cast :
                   (cur_count == 6'b001100) ? input_pipeline_phase011_cast :
                   (cur_count == 6'b001101) ? input_pipeline_phase013_cast :
                   (cur_count == 6'b001110) ? input_pipeline_phase014_cast :
                   (cur_count == 6'b001111) ? input_pipeline_phase015_cast :
                   (cur_count == 6'b010000) ? input_pipeline_phase016_cast :
                   (cur_count == 6'b010001) ? input_pipeline_phase017_cast :
                   (cur_count == 6'b010010) ? input_pipeline_phase018_cast :
                   (cur_count == 6'b010011) ? input_pipeline_phase019_cast :
                   (cur_count == 6'b010100) ? input_pipeline_phase020_cast :
                   (cur_count == 6'b010101) ? input_pipeline_phase021_cast :
                   (cur_count == 6'b010110) ? input_pipeline_phase022_cast :
                   (cur_count == 6'b010111) ? input_pipeline_phase023_cast :
                   (cur_count == 6'b011000) ? input_pipeline_phase024_cast :
                   (cur_count == 6'b011001) ? input_pipeline_phase025_cast :
                   (cur_count == 6'b011010) ? input_pipeline_phase026_cast :
                   (cur_count == 6'b011011) ? input_pipeline_phase027_cast :
                   (cur_count == 6'b011100) ? input_pipeline_phase028_cast :
                   (cur_count == 6'b011101) ? input_pipeline_phase029_cast :
                   (cur_count == 6'b011110) ? input_pipeline_phase030_cast :
                   (cur_count == 6'b011111) ? input_pipeline_phase031_cast :
                   (cur_count == 6'b100000) ? input_pipeline_phase032_cast :
                   (cur_count == 6'b100001) ? input_pipeline_phase10_cast :
                   (cur_count == 6'b100010) ? input_pipeline_phase11_cast :
                   (cur_count == 6'b100011) ? input_pipeline_phase12_cast :
                   (cur_count == 6'b100100) ? input_pipeline_phase13_cast :
                   (cur_count == 6'b100101) ? input_pipeline_phase14_cast :
                   (cur_count == 6'b100110) ? input_pipeline_phase15_cast :
                   (cur_count == 6'b100111) ? input_pipeline_phase16_cast :
                   (cur_count == 6'b101000) ? input_pipeline_phase17_cast :
                   (cur_count == 6'b101001) ? input_pipeline_phase18_cast :
                   (cur_count == 6'b101010) ? input_pipeline_phase19_cast :
                   (cur_count == 6'b101011) ? input_pipeline_phase110_cast :
                   (cur_count == 6'b101100) ? input_pipeline_phase111_cast :
                   (cur_count == 6'b101101) ? input_pipeline_phase112_cast :
                   (cur_count == 6'b101110) ? input_pipeline_phase113_cast :
                   (cur_count == 6'b101111) ? input_pipeline_phase114_cast :
                   (cur_count == 6'b110000) ? input_pipeline_phase115_cast :
                   (cur_count == 6'b110001) ? input_pipeline_phase116_cast :
                   (cur_count == 6'b110010) ? input_pipeline_phase117_cast :
                   (cur_count == 6'b110011) ? input_pipeline_phase118_cast :
                   (cur_count == 6'b110100) ? input_pipeline_phase119_cast :
                   (cur_count == 6'b110101) ? tapsum_1_20and1_30 :
                   (cur_count == 6'b110110) ? input_pipeline_phase121_cast :
                   (cur_count == 6'b110111) ? input_pipeline_phase122_cast :
                   (cur_count == 6'b111000) ? input_pipeline_phase123_cast :
                   (cur_count == 6'b111001) ? input_pipeline_phase124_cast :
                   (cur_count == 6'b111010) ? input_pipeline_phase125_cast :
                   (cur_count == 6'b111011) ? input_pipeline_phase126_cast :
                   (cur_count == 6'b111100) ? input_pipeline_phase127_cast :
                   (cur_count == 6'b111101) ? input_pipeline_phase128_cast :
                   (cur_count == 6'b111110) ? input_pipeline_phase129_cast :
                   (cur_count == 6'b111111) ? input_pipeline_phase131_cast :
                   input_pipeline_phase132_cast;

  assign product_mux = (cur_count == 6'b000001) ? coeffphase1_1 :
                      (cur_count == 6'b000010) ? coeffphase1_2 :
                      (cur_count == 6'b000011) ? coeffphase1_3 :
                      (cur_count == 6'b000100) ? coeffphase1_4 :
                      (cur_count == 6'b000101) ? coeffphase1_5 :
                      (cur_count == 6'b000110) ? coeffphase1_6 :
                      (cur_count == 6'b000111) ? coeffphase1_7 :
                      (cur_count == 6'b001000) ? coeffphase1_8 :
                      (cur_count == 6'b001001) ? coeffphase1_9 :
                      (cur_count == 6'b001010) ? coeffphase1_10 :
                      (cur_count == 6'b001011) ? coeffphase1_11 :
                      (cur_count == 6'b001100) ? coeffphase1_12 :
                      (cur_count == 6'b001101) ? coeffphase1_14 :
                      (cur_count == 6'b001110) ? coeffphase1_15 :
                      (cur_count == 6'b001111) ? coeffphase1_16 :
                      (cur_count == 6'b010000) ? coeffphase1_17 :
                      (cur_count == 6'b010001) ? coeffphase1_18 :
                      (cur_count == 6'b010010) ? coeffphase1_19 :
                      (cur_count == 6'b010011) ? coeffphase1_20 :
                      (cur_count == 6'b010100) ? coeffphase1_21 :
                      (cur_count == 6'b010101) ? coeffphase1_22 :
                      (cur_count == 6'b010110) ? coeffphase1_23 :
                      (cur_count == 6'b010111) ? coeffphase1_24 :
                      (cur_count == 6'b011000) ? coeffphase1_25 :
                      (cur_count == 6'b011001) ? coeffphase1_26 :
                      (cur_count == 6'b011010) ? coeffphase1_27 :
                      (cur_count == 6'b011011) ? coeffphase1_28 :
                      (cur_count == 6'b011100) ? coeffphase1_29 :
                      (cur_count == 6'b011101) ? coeffphase1_30 :
                      (cur_count == 6'b011110) ? coeffphase1_31 :
                      (cur_count == 6'b011111) ? coeffphase1_32 :
                      (cur_count == 6'b100000) ? coeffphase1_33 :
                      (cur_count == 6'b100001) ? coeffphase2_1 :
                      (cur_count == 6'b100010) ? coeffphase2_2 :
                      (cur_count == 6'b100011) ? coeffphase2_3 :
                      (cur_count == 6'b100100) ? coeffphase2_4 :
                      (cur_count == 6'b100101) ? coeffphase2_5 :
                      (cur_count == 6'b100110) ? coeffphase2_6 :
                      (cur_count == 6'b100111) ? coeffphase2_7 :
                      (cur_count == 6'b101000) ? coeffphase2_8 :
                      (cur_count == 6'b101001) ? coeffphase2_9 :
                      (cur_count == 6'b101010) ? coeffphase2_10 :
                      (cur_count == 6'b101011) ? coeffphase2_11 :
                      (cur_count == 6'b101100) ? coeffphase2_12 :
                      (cur_count == 6'b101101) ? coeffphase2_13 :
                      (cur_count == 6'b101110) ? coeffphase2_14 :
                      (cur_count == 6'b101111) ? coeffphase2_15 :
                      (cur_count == 6'b110000) ? coeffphase2_16 :
                      (cur_count == 6'b110001) ? coeffphase2_17 :
                      (cur_count == 6'b110010) ? coeffphase2_18 :
                      (cur_count == 6'b110011) ? coeffphase2_19 :
                      (cur_count == 6'b110100) ? coeffphase2_20 :
                      (cur_count == 6'b110101) ? coeffphase2_21 :
                      (cur_count == 6'b110110) ? coeffphase2_22 :
                      (cur_count == 6'b110111) ? coeffphase2_23 :
                      (cur_count == 6'b111000) ? coeffphase2_24 :
                      (cur_count == 6'b111001) ? coeffphase2_25 :
                      (cur_count == 6'b111010) ? coeffphase2_26 :
                      (cur_count == 6'b111011) ? coeffphase2_27 :
                      (cur_count == 6'b111100) ? coeffphase2_28 :
                      (cur_count == 6'b111101) ? coeffphase2_29 :
                      (cur_count == 6'b111110) ? coeffphase2_30 :
                      (cur_count == 6'b111111) ? coeffphase2_32 :
                      coeffphase2_33;
  assign product = inputmux * product_mux;



  // Add the products in linear fashion

  assign sumofproducts = product;

  // Resize the sum of products to the accumulator type for full precision addition

  assign sumofproducts_cast = $signed({{31{sumofproducts[32]}}, sumofproducts});

  // Accumulator register with a mux to reset it with the first addend

  assign add_signext_4 = sumofproducts_cast;
  assign add_signext_5 = accreg_out;
  assign add_temp = add_signext_4 + add_signext_5;
  assign acc_sum = add_temp[63:0];

  assign accreg_in = (phase_33 == 1'b1) ? sumofproducts_cast :
                    acc_sum;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_process
      if (reset == 1'b1) begin
        accreg_out <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          accreg_out <= accreg_in;
        end
      end
    end // Acc_reg_process

  // Register to hold the final value of the accumulated sum

  always @ (posedge clk or posedge reset)
    begin: Acc_finalreg_process
      if (reset == 1'b1) begin
        accreg_final <= 0;
      end
      else begin
        if (phase_33 == 1'b1) begin
          accreg_final <= accreg_out;
        end
      end
    end // Acc_finalreg_process

  assign output_typeconvert = (accreg_final[29:0] + {accreg_final[14], {13{~accreg_final[14]}}})>>>14;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_reg == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // rx_ciccomp
