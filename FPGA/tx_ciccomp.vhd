-- -------------------------------------------------------------
--
-- Module: tx_ciccomp
-- Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
-- Generated on: 2019-11-02 11:13:06
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- Name: tx_ciccomp
-- SerialPartition: 13
-- TestBenchName: tx_ciccomp_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : CIC Compensator
-- Specification          : N,Fp,Fst
-- Interpolation Factor   : 10
-- Multirate Type         : Interpolator
-- Stopband Edge          : 0.55
-- Passband Edge          : 0.45
-- Differential Delay     : 2
-- CIC Rate Change Factor : 256
-- Number of Sections     : 5
-- Filter Order           : 128
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 13
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure      : Direct-Form FIR Polyphase Interpolator
-- Interpolation Factor  : 10
-- Polyphase Length      : 13
-- Filter Length         : 129
-- Stable                : Yes
-- Linear Phase          : Yes (Type 1)
--
-- Arithmetic            : fixed
-- Numerator             : s16,11 -> [-16 16)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY tx_ciccomp IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         ce_out                          :   OUT   std_logic  
         );

END tx_ciccomp;


----------------------------------------------------------------
--Module Architecture: tx_ciccomp
----------------------------------------------------------------
ARCHITECTURE rtl OF tx_ciccomp IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeffphase1_1                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase1_2                  : signed(15 DOWNTO 0) := to_signed(-1, 16); -- sfix16_En11
  CONSTANT coeffphase1_3                  : signed(15 DOWNTO 0) := to_signed(8, 16); -- sfix16_En11
  CONSTANT coeffphase1_4                  : signed(15 DOWNTO 0) := to_signed(-41, 16); -- sfix16_En11
  CONSTANT coeffphase1_5                  : signed(15 DOWNTO 0) := to_signed(167, 16); -- sfix16_En11
  CONSTANT coeffphase1_6                  : signed(15 DOWNTO 0) := to_signed(-724, 16); -- sfix16_En11
  CONSTANT coeffphase1_7                  : signed(15 DOWNTO 0) := to_signed(6265, 16); -- sfix16_En11
  CONSTANT coeffphase1_8                  : signed(15 DOWNTO 0) := to_signed(-3580, 16); -- sfix16_En11
  CONSTANT coeffphase1_9                  : signed(15 DOWNTO 0) := to_signed(527, 16); -- sfix16_En11
  CONSTANT coeffphase1_10                 : signed(15 DOWNTO 0) := to_signed(-126, 16); -- sfix16_En11
  CONSTANT coeffphase1_11                 : signed(15 DOWNTO 0) := to_signed(30, 16); -- sfix16_En11
  CONSTANT coeffphase1_12                 : signed(15 DOWNTO 0) := to_signed(-6, 16); -- sfix16_En11
  CONSTANT coeffphase1_13                 : signed(15 DOWNTO 0) := to_signed(1, 16); -- sfix16_En11
  CONSTANT coeffphase2_1                  : signed(15 DOWNTO 0) := to_signed(-1, 16); -- sfix16_En11
  CONSTANT coeffphase2_2                  : signed(15 DOWNTO 0) := to_signed(23, 16); -- sfix16_En11
  CONSTANT coeffphase2_3                  : signed(15 DOWNTO 0) := to_signed(-137, 16); -- sfix16_En11
  CONSTANT coeffphase2_4                  : signed(15 DOWNTO 0) := to_signed(500, 16); -- sfix16_En11
  CONSTANT coeffphase2_5                  : signed(15 DOWNTO 0) := to_signed(-1416, 16); -- sfix16_En11
  CONSTANT coeffphase2_6                  : signed(15 DOWNTO 0) := to_signed(3643, 16); -- sfix16_En11
  CONSTANT coeffphase2_7                  : signed(15 DOWNTO 0) := to_signed(-10662, 16); -- sfix16_En11
  CONSTANT coeffphase2_8                  : signed(15 DOWNTO 0) := to_signed(-6800, 16); -- sfix16_En11
  CONSTANT coeffphase2_9                  : signed(15 DOWNTO 0) := to_signed(2493, 16); -- sfix16_En11
  CONSTANT coeffphase2_10                 : signed(15 DOWNTO 0) := to_signed(-953, 16); -- sfix16_En11
  CONSTANT coeffphase2_11                 : signed(15 DOWNTO 0) := to_signed(309, 16); -- sfix16_En11
  CONSTANT coeffphase2_12                 : signed(15 DOWNTO 0) := to_signed(-73, 16); -- sfix16_En11
  CONSTANT coeffphase2_13                 : signed(15 DOWNTO 0) := to_signed(9, 16); -- sfix16_En11
  CONSTANT coeffphase3_1                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase3_2                  : signed(15 DOWNTO 0) := to_signed(2, 16); -- sfix16_En11
  CONSTANT coeffphase3_3                  : signed(15 DOWNTO 0) := to_signed(-12, 16); -- sfix16_En11
  CONSTANT coeffphase3_4                  : signed(15 DOWNTO 0) := to_signed(55, 16); -- sfix16_En11
  CONSTANT coeffphase3_5                  : signed(15 DOWNTO 0) := to_signed(-220, 16); -- sfix16_En11
  CONSTANT coeffphase3_6                  : signed(15 DOWNTO 0) := to_signed(1016, 16); -- sfix16_En11
  CONSTANT coeffphase3_7                  : signed(15 DOWNTO 0) := to_signed(-12285, 16); -- sfix16_En11
  CONSTANT coeffphase3_8                  : signed(15 DOWNTO 0) := to_signed(2227, 16); -- sfix16_En11
  CONSTANT coeffphase3_9                  : signed(15 DOWNTO 0) := to_signed(-390, 16); -- sfix16_En11
  CONSTANT coeffphase3_10                 : signed(15 DOWNTO 0) := to_signed(96, 16); -- sfix16_En11
  CONSTANT coeffphase3_11                 : signed(15 DOWNTO 0) := to_signed(-22, 16); -- sfix16_En11
  CONSTANT coeffphase3_12                 : signed(15 DOWNTO 0) := to_signed(4, 16); -- sfix16_En11
  CONSTANT coeffphase3_13                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase4_1                  : signed(15 DOWNTO 0) := to_signed(3, 16); -- sfix16_En11
  CONSTANT coeffphase4_2                  : signed(15 DOWNTO 0) := to_signed(-35, 16); -- sfix16_En11
  CONSTANT coeffphase4_3                  : signed(15 DOWNTO 0) := to_signed(182, 16); -- sfix16_En11
  CONSTANT coeffphase4_4                  : signed(15 DOWNTO 0) := to_signed(-625, 16); -- sfix16_En11
  CONSTANT coeffphase4_5                  : signed(15 DOWNTO 0) := to_signed(1713, 16); -- sfix16_En11
  CONSTANT coeffphase4_6                  : signed(15 DOWNTO 0) := to_signed(-4438, 16); -- sfix16_En11
  CONSTANT coeffphase4_7                  : signed(15 DOWNTO 0) := to_signed(10997, 16); -- sfix16_En11
  CONSTANT coeffphase4_8                  : signed(15 DOWNTO 0) := to_signed(5459, 16); -- sfix16_En11
  CONSTANT coeffphase4_9                  : signed(15 DOWNTO 0) := to_signed(-2068, 16); -- sfix16_En11
  CONSTANT coeffphase4_10                 : signed(15 DOWNTO 0) := to_signed(775, 16); -- sfix16_En11
  CONSTANT coeffphase4_11                 : signed(15 DOWNTO 0) := to_signed(-239, 16); -- sfix16_En11
  CONSTANT coeffphase4_12                 : signed(15 DOWNTO 0) := to_signed(51, 16); -- sfix16_En11
  CONSTANT coeffphase4_13                 : signed(15 DOWNTO 0) := to_signed(-5, 16); -- sfix16_En11
  CONSTANT coeffphase5_1                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase5_2                  : signed(15 DOWNTO 0) := to_signed(-3, 16); -- sfix16_En11
  CONSTANT coeffphase5_3                  : signed(15 DOWNTO 0) := to_signed(16, 16); -- sfix16_En11
  CONSTANT coeffphase5_4                  : signed(15 DOWNTO 0) := to_signed(-72, 16); -- sfix16_En11
  CONSTANT coeffphase5_5                  : signed(15 DOWNTO 0) := to_signed(292, 16); -- sfix16_En11
  CONSTANT coeffphase5_6                  : signed(15 DOWNTO 0) := to_signed(-1472, 16); -- sfix16_En11
  CONSTANT coeffphase5_7                  : signed(15 DOWNTO 0) := to_signed(26738, 16); -- sfix16_En11
  CONSTANT coeffphase5_8                  : signed(15 DOWNTO 0) := to_signed(-1472, 16); -- sfix16_En11
  CONSTANT coeffphase5_9                  : signed(15 DOWNTO 0) := to_signed(292, 16); -- sfix16_En11
  CONSTANT coeffphase5_10                 : signed(15 DOWNTO 0) := to_signed(-72, 16); -- sfix16_En11
  CONSTANT coeffphase5_11                 : signed(15 DOWNTO 0) := to_signed(16, 16); -- sfix16_En11
  CONSTANT coeffphase5_12                 : signed(15 DOWNTO 0) := to_signed(-3, 16); -- sfix16_En11
  CONSTANT coeffphase5_13                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase6_1                  : signed(15 DOWNTO 0) := to_signed(-5, 16); -- sfix16_En11
  CONSTANT coeffphase6_2                  : signed(15 DOWNTO 0) := to_signed(51, 16); -- sfix16_En11
  CONSTANT coeffphase6_3                  : signed(15 DOWNTO 0) := to_signed(-239, 16); -- sfix16_En11
  CONSTANT coeffphase6_4                  : signed(15 DOWNTO 0) := to_signed(775, 16); -- sfix16_En11
  CONSTANT coeffphase6_5                  : signed(15 DOWNTO 0) := to_signed(-2068, 16); -- sfix16_En11
  CONSTANT coeffphase6_6                  : signed(15 DOWNTO 0) := to_signed(5459, 16); -- sfix16_En11
  CONSTANT coeffphase6_7                  : signed(15 DOWNTO 0) := to_signed(10997, 16); -- sfix16_En11
  CONSTANT coeffphase6_8                  : signed(15 DOWNTO 0) := to_signed(-4438, 16); -- sfix16_En11
  CONSTANT coeffphase6_9                  : signed(15 DOWNTO 0) := to_signed(1713, 16); -- sfix16_En11
  CONSTANT coeffphase6_10                 : signed(15 DOWNTO 0) := to_signed(-625, 16); -- sfix16_En11
  CONSTANT coeffphase6_11                 : signed(15 DOWNTO 0) := to_signed(182, 16); -- sfix16_En11
  CONSTANT coeffphase6_12                 : signed(15 DOWNTO 0) := to_signed(-35, 16); -- sfix16_En11
  CONSTANT coeffphase6_13                 : signed(15 DOWNTO 0) := to_signed(3, 16); -- sfix16_En11
  CONSTANT coeffphase7_1                  : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase7_2                  : signed(15 DOWNTO 0) := to_signed(4, 16); -- sfix16_En11
  CONSTANT coeffphase7_3                  : signed(15 DOWNTO 0) := to_signed(-22, 16); -- sfix16_En11
  CONSTANT coeffphase7_4                  : signed(15 DOWNTO 0) := to_signed(96, 16); -- sfix16_En11
  CONSTANT coeffphase7_5                  : signed(15 DOWNTO 0) := to_signed(-390, 16); -- sfix16_En11
  CONSTANT coeffphase7_6                  : signed(15 DOWNTO 0) := to_signed(2227, 16); -- sfix16_En11
  CONSTANT coeffphase7_7                  : signed(15 DOWNTO 0) := to_signed(-12285, 16); -- sfix16_En11
  CONSTANT coeffphase7_8                  : signed(15 DOWNTO 0) := to_signed(1016, 16); -- sfix16_En11
  CONSTANT coeffphase7_9                  : signed(15 DOWNTO 0) := to_signed(-220, 16); -- sfix16_En11
  CONSTANT coeffphase7_10                 : signed(15 DOWNTO 0) := to_signed(55, 16); -- sfix16_En11
  CONSTANT coeffphase7_11                 : signed(15 DOWNTO 0) := to_signed(-12, 16); -- sfix16_En11
  CONSTANT coeffphase7_12                 : signed(15 DOWNTO 0) := to_signed(2, 16); -- sfix16_En11
  CONSTANT coeffphase7_13                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase8_1                  : signed(15 DOWNTO 0) := to_signed(9, 16); -- sfix16_En11
  CONSTANT coeffphase8_2                  : signed(15 DOWNTO 0) := to_signed(-73, 16); -- sfix16_En11
  CONSTANT coeffphase8_3                  : signed(15 DOWNTO 0) := to_signed(309, 16); -- sfix16_En11
  CONSTANT coeffphase8_4                  : signed(15 DOWNTO 0) := to_signed(-953, 16); -- sfix16_En11
  CONSTANT coeffphase8_5                  : signed(15 DOWNTO 0) := to_signed(2493, 16); -- sfix16_En11
  CONSTANT coeffphase8_6                  : signed(15 DOWNTO 0) := to_signed(-6800, 16); -- sfix16_En11
  CONSTANT coeffphase8_7                  : signed(15 DOWNTO 0) := to_signed(-10662, 16); -- sfix16_En11
  CONSTANT coeffphase8_8                  : signed(15 DOWNTO 0) := to_signed(3643, 16); -- sfix16_En11
  CONSTANT coeffphase8_9                  : signed(15 DOWNTO 0) := to_signed(-1416, 16); -- sfix16_En11
  CONSTANT coeffphase8_10                 : signed(15 DOWNTO 0) := to_signed(500, 16); -- sfix16_En11
  CONSTANT coeffphase8_11                 : signed(15 DOWNTO 0) := to_signed(-137, 16); -- sfix16_En11
  CONSTANT coeffphase8_12                 : signed(15 DOWNTO 0) := to_signed(23, 16); -- sfix16_En11
  CONSTANT coeffphase8_13                 : signed(15 DOWNTO 0) := to_signed(-1, 16); -- sfix16_En11
  CONSTANT coeffphase9_1                  : signed(15 DOWNTO 0) := to_signed(1, 16); -- sfix16_En11
  CONSTANT coeffphase9_2                  : signed(15 DOWNTO 0) := to_signed(-6, 16); -- sfix16_En11
  CONSTANT coeffphase9_3                  : signed(15 DOWNTO 0) := to_signed(30, 16); -- sfix16_En11
  CONSTANT coeffphase9_4                  : signed(15 DOWNTO 0) := to_signed(-126, 16); -- sfix16_En11
  CONSTANT coeffphase9_5                  : signed(15 DOWNTO 0) := to_signed(527, 16); -- sfix16_En11
  CONSTANT coeffphase9_6                  : signed(15 DOWNTO 0) := to_signed(-3580, 16); -- sfix16_En11
  CONSTANT coeffphase9_7                  : signed(15 DOWNTO 0) := to_signed(6265, 16); -- sfix16_En11
  CONSTANT coeffphase9_8                  : signed(15 DOWNTO 0) := to_signed(-724, 16); -- sfix16_En11
  CONSTANT coeffphase9_9                  : signed(15 DOWNTO 0) := to_signed(167, 16); -- sfix16_En11
  CONSTANT coeffphase9_10                 : signed(15 DOWNTO 0) := to_signed(-41, 16); -- sfix16_En11
  CONSTANT coeffphase9_11                 : signed(15 DOWNTO 0) := to_signed(8, 16); -- sfix16_En11
  CONSTANT coeffphase9_12                 : signed(15 DOWNTO 0) := to_signed(-1, 16); -- sfix16_En11
  CONSTANT coeffphase9_13                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11
  CONSTANT coeffphase10_1                 : signed(15 DOWNTO 0) := to_signed(-15, 16); -- sfix16_En11
  CONSTANT coeffphase10_2                 : signed(15 DOWNTO 0) := to_signed(101, 16); -- sfix16_En11
  CONSTANT coeffphase10_3                 : signed(15 DOWNTO 0) := to_signed(-395, 16); -- sfix16_En11
  CONSTANT coeffphase10_4                 : signed(15 DOWNTO 0) := to_signed(1165, 16); -- sfix16_En11
  CONSTANT coeffphase10_5                 : signed(15 DOWNTO 0) := to_signed(-3008, 16); -- sfix16_En11
  CONSTANT coeffphase10_6                 : signed(15 DOWNTO 0) := to_signed(8566, 16); -- sfix16_En11
  CONSTANT coeffphase10_7                 : signed(15 DOWNTO 0) := to_signed(8566, 16); -- sfix16_En11
  CONSTANT coeffphase10_8                 : signed(15 DOWNTO 0) := to_signed(-3008, 16); -- sfix16_En11
  CONSTANT coeffphase10_9                 : signed(15 DOWNTO 0) := to_signed(1165, 16); -- sfix16_En11
  CONSTANT coeffphase10_10                : signed(15 DOWNTO 0) := to_signed(-395, 16); -- sfix16_En11
  CONSTANT coeffphase10_11                : signed(15 DOWNTO 0) := to_signed(101, 16); -- sfix16_En11
  CONSTANT coeffphase10_12                : signed(15 DOWNTO 0) := to_signed(-15, 16); -- sfix16_En11
  CONSTANT coeffphase10_13                : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En11

  CONSTANT const_zero                     : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En26
  -- Signals
  SIGNAL cur_count                        : unsigned(7 DOWNTO 0); -- ufix8
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_1_1                        : std_logic; -- boolean
  SIGNAL phase_105                        : std_logic; -- boolean
  SIGNAL phase_14                         : std_logic; -- boolean
  SIGNAL phase_13                         : std_logic; -- boolean
  SIGNAL phase_13_1                       : std_logic; -- boolean
  SIGNAL phase_27                         : std_logic; -- boolean
  SIGNAL phase_53                         : std_logic; -- boolean
  SIGNAL phase_79                         : std_logic; -- boolean
  SIGNAL phase_92                         : std_logic; -- boolean
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 12); -- sfix16_En15
  SIGNAL inputmux                         : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL product1                         : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL product1_mux                     : signed(15 DOWNTO 0); -- sfix16_En11
  SIGNAL phasemux                         : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_1_2                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL mulpwr2_temp                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL prod_powertwo_1_3                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_1_13               : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_2_1                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL mulpwr2_temp_1                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL prod_powertwo_3_2                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_3_12               : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_5_3                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_5_11               : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_7_2                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_7_12               : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_8_13               : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL mulpwr2_temp_2                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL prod_powertwo_9_1                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_9_11               : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL prod_powertwo_9_12               : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL mulpwr2_temp_3                   : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL powertwo_mux_1_2                 : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_1_3                 : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_1_13                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_2_1                 : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_3_2                 : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_3_12                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_5_3                 : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_5_11                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_7_2                 : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_7_12                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_8_13                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_9_1                 : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_9_11                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL powertwo_mux_9_12                : signed(31 DOWNTO 0); -- sfix32_En26
  SIGNAL sumofproducts                    : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL sum_1                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp                         : signed(32 DOWNTO 0); -- sfix33_En26
  SIGNAL sum_2                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_1                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_3                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_2                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_4                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_3                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_5                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_4                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_6                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_5                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_7                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_6                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_8                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_7                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_9                            : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_8                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_10                           : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_9                       : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_11                           : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_10                      : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_12                           : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_11                      : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sum_13                           : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_12                      : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL add_temp_13                      : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL sumofproducts_cast               : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL acc_sum                          : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL accreg_in                        : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL accreg_out                       : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL add_temp_14                      : signed(36 DOWNTO 0); -- sfix37_En26
  SIGNAL accreg_final                     : signed(35 DOWNTO 0); -- sfix36_En26
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(129, 8);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(129, 8) THEN
          cur_count <= to_unsigned(0, 8);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 8);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 8) AND clk_enable = '1' ELSE '0';

  phase_1 <= '1' WHEN cur_count = to_unsigned(1, 8) AND clk_enable = '1' ELSE '0';

  phase_1_1 <= '1' WHEN  (((cur_count = to_unsigned(1, 8))  OR
                           (cur_count = to_unsigned(2, 8))  OR
                           (cur_count = to_unsigned(3, 8))  OR
                           (cur_count = to_unsigned(4, 8))  OR
                           (cur_count = to_unsigned(5, 8))  OR
                           (cur_count = to_unsigned(6, 8))  OR
                           (cur_count = to_unsigned(7, 8))  OR
                           (cur_count = to_unsigned(8, 8))  OR
                           (cur_count = to_unsigned(9, 8))  OR
                           (cur_count = to_unsigned(14, 8))  OR
                           (cur_count = to_unsigned(15, 8))  OR
                           (cur_count = to_unsigned(16, 8))  OR
                           (cur_count = to_unsigned(17, 8))  OR
                           (cur_count = to_unsigned(18, 8))  OR
                           (cur_count = to_unsigned(19, 8))  OR
                           (cur_count = to_unsigned(20, 8))  OR
                           (cur_count = to_unsigned(21, 8))  OR
                           (cur_count = to_unsigned(22, 8))  OR
                           (cur_count = to_unsigned(23, 8))  OR
                           (cur_count = to_unsigned(24, 8))  OR
                           (cur_count = to_unsigned(25, 8))  OR
                           (cur_count = to_unsigned(27, 8))  OR
                           (cur_count = to_unsigned(28, 8))  OR
                           (cur_count = to_unsigned(29, 8))  OR
                           (cur_count = to_unsigned(30, 8))  OR
                           (cur_count = to_unsigned(31, 8))  OR
                           (cur_count = to_unsigned(32, 8))  OR
                           (cur_count = to_unsigned(33, 8))  OR
                           (cur_count = to_unsigned(34, 8))  OR
                           (cur_count = to_unsigned(35, 8))  OR
                           (cur_count = to_unsigned(40, 8))  OR
                           (cur_count = to_unsigned(41, 8))  OR
                           (cur_count = to_unsigned(42, 8))  OR
                           (cur_count = to_unsigned(43, 8))  OR
                           (cur_count = to_unsigned(44, 8))  OR
                           (cur_count = to_unsigned(45, 8))  OR
                           (cur_count = to_unsigned(46, 8))  OR
                           (cur_count = to_unsigned(47, 8))  OR
                           (cur_count = to_unsigned(48, 8))  OR
                           (cur_count = to_unsigned(49, 8))  OR
                           (cur_count = to_unsigned(50, 8))  OR
                           (cur_count = to_unsigned(51, 8))  OR
                           (cur_count = to_unsigned(52, 8))  OR
                           (cur_count = to_unsigned(53, 8))  OR
                           (cur_count = to_unsigned(54, 8))  OR
                           (cur_count = to_unsigned(55, 8))  OR
                           (cur_count = to_unsigned(56, 8))  OR
                           (cur_count = to_unsigned(57, 8))  OR
                           (cur_count = to_unsigned(58, 8))  OR
                           (cur_count = to_unsigned(59, 8))  OR
                           (cur_count = to_unsigned(60, 8))  OR
                           (cur_count = to_unsigned(61, 8))  OR
                           (cur_count = to_unsigned(66, 8))  OR
                           (cur_count = to_unsigned(67, 8))  OR
                           (cur_count = to_unsigned(68, 8))  OR
                           (cur_count = to_unsigned(69, 8))  OR
                           (cur_count = to_unsigned(70, 8))  OR
                           (cur_count = to_unsigned(71, 8))  OR
                           (cur_count = to_unsigned(72, 8))  OR
                           (cur_count = to_unsigned(73, 8))  OR
                           (cur_count = to_unsigned(74, 8))  OR
                           (cur_count = to_unsigned(75, 8))  OR
                           (cur_count = to_unsigned(76, 8))  OR
                           (cur_count = to_unsigned(77, 8))  OR
                           (cur_count = to_unsigned(78, 8))  OR
                           (cur_count = to_unsigned(79, 8))  OR
                           (cur_count = to_unsigned(80, 8))  OR
                           (cur_count = to_unsigned(81, 8))  OR
                           (cur_count = to_unsigned(82, 8))  OR
                           (cur_count = to_unsigned(83, 8))  OR
                           (cur_count = to_unsigned(84, 8))  OR
                           (cur_count = to_unsigned(85, 8))  OR
                           (cur_count = to_unsigned(86, 8))  OR
                           (cur_count = to_unsigned(87, 8))  OR
                           (cur_count = to_unsigned(92, 8))  OR
                           (cur_count = to_unsigned(93, 8))  OR
                           (cur_count = to_unsigned(94, 8))  OR
                           (cur_count = to_unsigned(95, 8))  OR
                           (cur_count = to_unsigned(96, 8))  OR
                           (cur_count = to_unsigned(97, 8))  OR
                           (cur_count = to_unsigned(98, 8))  OR
                           (cur_count = to_unsigned(99, 8))  OR
                           (cur_count = to_unsigned(100, 8))  OR
                           (cur_count = to_unsigned(101, 8))  OR
                           (cur_count = to_unsigned(102, 8))  OR
                           (cur_count = to_unsigned(103, 8))  OR
                           (cur_count = to_unsigned(105, 8))  OR
                           (cur_count = to_unsigned(106, 8))  OR
                           (cur_count = to_unsigned(107, 8))  OR
                           (cur_count = to_unsigned(108, 8))  OR
                           (cur_count = to_unsigned(109, 8))  OR
                           (cur_count = to_unsigned(110, 8))  OR
                           (cur_count = to_unsigned(111, 8))  OR
                           (cur_count = to_unsigned(112, 8))  OR
                           (cur_count = to_unsigned(113, 8))  OR
                           (cur_count = to_unsigned(118, 8))  OR
                           (cur_count = to_unsigned(119, 8))  OR
                           (cur_count = to_unsigned(120, 8))  OR
                           (cur_count = to_unsigned(121, 8))  OR
                           (cur_count = to_unsigned(122, 8))  OR
                           (cur_count = to_unsigned(123, 8))  OR
                           (cur_count = to_unsigned(124, 8))  OR
                           (cur_count = to_unsigned(125, 8))  OR
                           (cur_count = to_unsigned(126, 8))  OR
                           (cur_count = to_unsigned(127, 8))  OR
                           (cur_count = to_unsigned(128, 8))  OR
                           (cur_count = to_unsigned(129, 8)))  AND clk_enable = '1') ELSE '0';

  phase_105 <= '1' WHEN cur_count = to_unsigned(105, 8) AND clk_enable = '1' ELSE '0';

  phase_14 <= '1' WHEN cur_count = to_unsigned(14, 8) AND clk_enable = '1' ELSE '0';

  phase_13 <= '1' WHEN  (((cur_count = to_unsigned(14, 8))  OR
                          (cur_count = to_unsigned(27, 8))  OR
                          (cur_count = to_unsigned(40, 8))  OR
                          (cur_count = to_unsigned(53, 8))  OR
                          (cur_count = to_unsigned(66, 8))  OR
                          (cur_count = to_unsigned(79, 8))  OR
                          (cur_count = to_unsigned(92, 8))  OR
                          (cur_count = to_unsigned(105, 8))  OR
                          (cur_count = to_unsigned(118, 8))  OR
                          (cur_count = to_unsigned(1, 8)))  AND clk_enable = '1') ELSE '0';

  phase_13_1 <= '1' WHEN  (((cur_count = to_unsigned(15, 8))  OR
                            (cur_count = to_unsigned(28, 8))  OR
                            (cur_count = to_unsigned(41, 8))  OR
                            (cur_count = to_unsigned(54, 8))  OR
                            (cur_count = to_unsigned(67, 8))  OR
                            (cur_count = to_unsigned(80, 8))  OR
                            (cur_count = to_unsigned(93, 8))  OR
                            (cur_count = to_unsigned(106, 8))  OR
                            (cur_count = to_unsigned(119, 8))  OR
                            (cur_count = to_unsigned(2, 8)))  AND clk_enable = '1') ELSE '0';

  phase_27 <= '1' WHEN cur_count = to_unsigned(27, 8) AND clk_enable = '1' ELSE '0';

  phase_53 <= '1' WHEN cur_count = to_unsigned(53, 8) AND clk_enable = '1' ELSE '0';

  phase_79 <= '1' WHEN cur_count = to_unsigned(79, 8) AND clk_enable = '1' ELSE '0';

  phase_92 <= '1' WHEN cur_count = to_unsigned(92, 8) AND clk_enable = '1' ELSE '0';

  --   ---------------- Delay Registers ----------------

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 12) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 12) <= delay_pipeline(0 TO 11);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  -- Mux(es) to select the input taps for multipliers 

  inputmux <= delay_pipeline(3) WHEN ( cur_count = to_unsigned(1, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(2, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(3, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(4, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(5, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(6, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(7, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(8, 8) ) ELSE
                   delay_pipeline(11) WHEN ( cur_count = to_unsigned(9, 8) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count = to_unsigned(14, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(15, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(16, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(17, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(18, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(19, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(20, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(21, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(22, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(23, 8) ) ELSE
                   delay_pipeline(11) WHEN ( cur_count = to_unsigned(24, 8) ) ELSE
                   delay_pipeline(12) WHEN ( cur_count = to_unsigned(25, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(27, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(28, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(29, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(30, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(31, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(32, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(33, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(34, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(35, 8) ) ELSE
                   delay_pipeline(0) WHEN ( cur_count = to_unsigned(40, 8) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count = to_unsigned(41, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(42, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(43, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(44, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(45, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(46, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(47, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(48, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(49, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(50, 8) ) ELSE
                   delay_pipeline(11) WHEN ( cur_count = to_unsigned(51, 8) ) ELSE
                   delay_pipeline(12) WHEN ( cur_count = to_unsigned(52, 8) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count = to_unsigned(53, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(54, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(55, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(56, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(57, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(58, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(59, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(60, 8) ) ELSE
                   delay_pipeline(11) WHEN ( cur_count = to_unsigned(61, 8) ) ELSE
                   delay_pipeline(0) WHEN ( cur_count = to_unsigned(66, 8) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count = to_unsigned(67, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(68, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(69, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(70, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(71, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(72, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(73, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(74, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(75, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(76, 8) ) ELSE
                   delay_pipeline(11) WHEN ( cur_count = to_unsigned(77, 8) ) ELSE
                   delay_pipeline(12) WHEN ( cur_count = to_unsigned(78, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(79, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(80, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(81, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(82, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(83, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(84, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(85, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(86, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(87, 8) ) ELSE
                   delay_pipeline(0) WHEN ( cur_count = to_unsigned(92, 8) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count = to_unsigned(93, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(94, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(95, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(96, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(97, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(98, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(99, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(100, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(101, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(102, 8) ) ELSE
                   delay_pipeline(11) WHEN ( cur_count = to_unsigned(103, 8) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count = to_unsigned(105, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(106, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(107, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(108, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(109, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(110, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(111, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(112, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(113, 8) ) ELSE
                   delay_pipeline(0) WHEN ( cur_count = to_unsigned(118, 8) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count = to_unsigned(119, 8) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count = to_unsigned(120, 8) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count = to_unsigned(121, 8) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count = to_unsigned(122, 8) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count = to_unsigned(123, 8) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count = to_unsigned(124, 8) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count = to_unsigned(125, 8) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count = to_unsigned(126, 8) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count = to_unsigned(127, 8) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count = to_unsigned(128, 8) ) ELSE
                   delay_pipeline(11);

  product1_mux <= coeffphase1_4 WHEN ( cur_count = to_unsigned(1, 8) ) ELSE
                       coeffphase1_5 WHEN ( cur_count = to_unsigned(2, 8) ) ELSE
                       coeffphase1_6 WHEN ( cur_count = to_unsigned(3, 8) ) ELSE
                       coeffphase1_7 WHEN ( cur_count = to_unsigned(4, 8) ) ELSE
                       coeffphase1_8 WHEN ( cur_count = to_unsigned(5, 8) ) ELSE
                       coeffphase1_9 WHEN ( cur_count = to_unsigned(6, 8) ) ELSE
                       coeffphase1_10 WHEN ( cur_count = to_unsigned(7, 8) ) ELSE
                       coeffphase1_11 WHEN ( cur_count = to_unsigned(8, 8) ) ELSE
                       coeffphase1_12 WHEN ( cur_count = to_unsigned(9, 8) ) ELSE
                       coeffphase2_2 WHEN ( cur_count = to_unsigned(14, 8) ) ELSE
                       coeffphase2_3 WHEN ( cur_count = to_unsigned(15, 8) ) ELSE
                       coeffphase2_4 WHEN ( cur_count = to_unsigned(16, 8) ) ELSE
                       coeffphase2_5 WHEN ( cur_count = to_unsigned(17, 8) ) ELSE
                       coeffphase2_6 WHEN ( cur_count = to_unsigned(18, 8) ) ELSE
                       coeffphase2_7 WHEN ( cur_count = to_unsigned(19, 8) ) ELSE
                       coeffphase2_8 WHEN ( cur_count = to_unsigned(20, 8) ) ELSE
                       coeffphase2_9 WHEN ( cur_count = to_unsigned(21, 8) ) ELSE
                       coeffphase2_10 WHEN ( cur_count = to_unsigned(22, 8) ) ELSE
                       coeffphase2_11 WHEN ( cur_count = to_unsigned(23, 8) ) ELSE
                       coeffphase2_12 WHEN ( cur_count = to_unsigned(24, 8) ) ELSE
                       coeffphase2_13 WHEN ( cur_count = to_unsigned(25, 8) ) ELSE
                       coeffphase3_3 WHEN ( cur_count = to_unsigned(27, 8) ) ELSE
                       coeffphase3_4 WHEN ( cur_count = to_unsigned(28, 8) ) ELSE
                       coeffphase3_5 WHEN ( cur_count = to_unsigned(29, 8) ) ELSE
                       coeffphase3_6 WHEN ( cur_count = to_unsigned(30, 8) ) ELSE
                       coeffphase3_7 WHEN ( cur_count = to_unsigned(31, 8) ) ELSE
                       coeffphase3_8 WHEN ( cur_count = to_unsigned(32, 8) ) ELSE
                       coeffphase3_9 WHEN ( cur_count = to_unsigned(33, 8) ) ELSE
                       coeffphase3_10 WHEN ( cur_count = to_unsigned(34, 8) ) ELSE
                       coeffphase3_11 WHEN ( cur_count = to_unsigned(35, 8) ) ELSE
                       coeffphase4_1 WHEN ( cur_count = to_unsigned(40, 8) ) ELSE
                       coeffphase4_2 WHEN ( cur_count = to_unsigned(41, 8) ) ELSE
                       coeffphase4_3 WHEN ( cur_count = to_unsigned(42, 8) ) ELSE
                       coeffphase4_4 WHEN ( cur_count = to_unsigned(43, 8) ) ELSE
                       coeffphase4_5 WHEN ( cur_count = to_unsigned(44, 8) ) ELSE
                       coeffphase4_6 WHEN ( cur_count = to_unsigned(45, 8) ) ELSE
                       coeffphase4_7 WHEN ( cur_count = to_unsigned(46, 8) ) ELSE
                       coeffphase4_8 WHEN ( cur_count = to_unsigned(47, 8) ) ELSE
                       coeffphase4_9 WHEN ( cur_count = to_unsigned(48, 8) ) ELSE
                       coeffphase4_10 WHEN ( cur_count = to_unsigned(49, 8) ) ELSE
                       coeffphase4_11 WHEN ( cur_count = to_unsigned(50, 8) ) ELSE
                       coeffphase4_12 WHEN ( cur_count = to_unsigned(51, 8) ) ELSE
                       coeffphase4_13 WHEN ( cur_count = to_unsigned(52, 8) ) ELSE
                       coeffphase5_2 WHEN ( cur_count = to_unsigned(53, 8) ) ELSE
                       coeffphase5_4 WHEN ( cur_count = to_unsigned(54, 8) ) ELSE
                       coeffphase5_5 WHEN ( cur_count = to_unsigned(55, 8) ) ELSE
                       coeffphase5_6 WHEN ( cur_count = to_unsigned(56, 8) ) ELSE
                       coeffphase5_7 WHEN ( cur_count = to_unsigned(57, 8) ) ELSE
                       coeffphase5_8 WHEN ( cur_count = to_unsigned(58, 8) ) ELSE
                       coeffphase5_9 WHEN ( cur_count = to_unsigned(59, 8) ) ELSE
                       coeffphase5_10 WHEN ( cur_count = to_unsigned(60, 8) ) ELSE
                       coeffphase5_12 WHEN ( cur_count = to_unsigned(61, 8) ) ELSE
                       coeffphase6_1 WHEN ( cur_count = to_unsigned(66, 8) ) ELSE
                       coeffphase6_2 WHEN ( cur_count = to_unsigned(67, 8) ) ELSE
                       coeffphase6_3 WHEN ( cur_count = to_unsigned(68, 8) ) ELSE
                       coeffphase6_4 WHEN ( cur_count = to_unsigned(69, 8) ) ELSE
                       coeffphase6_5 WHEN ( cur_count = to_unsigned(70, 8) ) ELSE
                       coeffphase6_6 WHEN ( cur_count = to_unsigned(71, 8) ) ELSE
                       coeffphase6_7 WHEN ( cur_count = to_unsigned(72, 8) ) ELSE
                       coeffphase6_8 WHEN ( cur_count = to_unsigned(73, 8) ) ELSE
                       coeffphase6_9 WHEN ( cur_count = to_unsigned(74, 8) ) ELSE
                       coeffphase6_10 WHEN ( cur_count = to_unsigned(75, 8) ) ELSE
                       coeffphase6_11 WHEN ( cur_count = to_unsigned(76, 8) ) ELSE
                       coeffphase6_12 WHEN ( cur_count = to_unsigned(77, 8) ) ELSE
                       coeffphase6_13 WHEN ( cur_count = to_unsigned(78, 8) ) ELSE
                       coeffphase7_3 WHEN ( cur_count = to_unsigned(79, 8) ) ELSE
                       coeffphase7_4 WHEN ( cur_count = to_unsigned(80, 8) ) ELSE
                       coeffphase7_5 WHEN ( cur_count = to_unsigned(81, 8) ) ELSE
                       coeffphase7_6 WHEN ( cur_count = to_unsigned(82, 8) ) ELSE
                       coeffphase7_7 WHEN ( cur_count = to_unsigned(83, 8) ) ELSE
                       coeffphase7_8 WHEN ( cur_count = to_unsigned(84, 8) ) ELSE
                       coeffphase7_9 WHEN ( cur_count = to_unsigned(85, 8) ) ELSE
                       coeffphase7_10 WHEN ( cur_count = to_unsigned(86, 8) ) ELSE
                       coeffphase7_11 WHEN ( cur_count = to_unsigned(87, 8) ) ELSE
                       coeffphase8_1 WHEN ( cur_count = to_unsigned(92, 8) ) ELSE
                       coeffphase8_2 WHEN ( cur_count = to_unsigned(93, 8) ) ELSE
                       coeffphase8_3 WHEN ( cur_count = to_unsigned(94, 8) ) ELSE
                       coeffphase8_4 WHEN ( cur_count = to_unsigned(95, 8) ) ELSE
                       coeffphase8_5 WHEN ( cur_count = to_unsigned(96, 8) ) ELSE
                       coeffphase8_6 WHEN ( cur_count = to_unsigned(97, 8) ) ELSE
                       coeffphase8_7 WHEN ( cur_count = to_unsigned(98, 8) ) ELSE
                       coeffphase8_8 WHEN ( cur_count = to_unsigned(99, 8) ) ELSE
                       coeffphase8_9 WHEN ( cur_count = to_unsigned(100, 8) ) ELSE
                       coeffphase8_10 WHEN ( cur_count = to_unsigned(101, 8) ) ELSE
                       coeffphase8_11 WHEN ( cur_count = to_unsigned(102, 8) ) ELSE
                       coeffphase8_12 WHEN ( cur_count = to_unsigned(103, 8) ) ELSE
                       coeffphase9_2 WHEN ( cur_count = to_unsigned(105, 8) ) ELSE
                       coeffphase9_3 WHEN ( cur_count = to_unsigned(106, 8) ) ELSE
                       coeffphase9_4 WHEN ( cur_count = to_unsigned(107, 8) ) ELSE
                       coeffphase9_5 WHEN ( cur_count = to_unsigned(108, 8) ) ELSE
                       coeffphase9_6 WHEN ( cur_count = to_unsigned(109, 8) ) ELSE
                       coeffphase9_7 WHEN ( cur_count = to_unsigned(110, 8) ) ELSE
                       coeffphase9_8 WHEN ( cur_count = to_unsigned(111, 8) ) ELSE
                       coeffphase9_9 WHEN ( cur_count = to_unsigned(112, 8) ) ELSE
                       coeffphase9_10 WHEN ( cur_count = to_unsigned(113, 8) ) ELSE
                       coeffphase10_1 WHEN ( cur_count = to_unsigned(118, 8) ) ELSE
                       coeffphase10_2 WHEN ( cur_count = to_unsigned(119, 8) ) ELSE
                       coeffphase10_3 WHEN ( cur_count = to_unsigned(120, 8) ) ELSE
                       coeffphase10_4 WHEN ( cur_count = to_unsigned(121, 8) ) ELSE
                       coeffphase10_5 WHEN ( cur_count = to_unsigned(122, 8) ) ELSE
                       coeffphase10_6 WHEN ( cur_count = to_unsigned(123, 8) ) ELSE
                       coeffphase10_7 WHEN ( cur_count = to_unsigned(124, 8) ) ELSE
                       coeffphase10_8 WHEN ( cur_count = to_unsigned(125, 8) ) ELSE
                       coeffphase10_9 WHEN ( cur_count = to_unsigned(126, 8) ) ELSE
                       coeffphase10_10 WHEN ( cur_count = to_unsigned(127, 8) ) ELSE
                       coeffphase10_11 WHEN ( cur_count = to_unsigned(128, 8) ) ELSE
                       coeffphase10_12;
  product1 <= inputmux * product1_mux;

  phasemux <= product1 WHEN ( phase_1_1 = '1' ) ELSE
                   const_zero;

  -- Implementing products without a multiplier for coefficients with values equal to a power of 2.

  -- value of 'coeffphase1_2' is -0.00048828

  mulpwr2_temp <= ('0' & delay_pipeline(1)) WHEN delay_pipeline(1) = "1000000000000000"
      ELSE -resize(delay_pipeline(1),17);

  prod_powertwo_1_2 <= resize(mulpwr2_temp, 32);

  -- value of 'coeffphase1_3' is 0.0039063

  prod_powertwo_1_3 <= resize(delay_pipeline(2)(15 DOWNTO 0) & '0' & '0' & '0', 32);

  -- value of 'coeffphase1_13' is 0.00048828

  prod_powertwo_1_13 <= resize(delay_pipeline(12), 32);

  -- value of 'coeffphase2_1' is -0.00048828

  mulpwr2_temp_1 <= ('0' & delay_pipeline(0)) WHEN delay_pipeline(0) = "1000000000000000"
      ELSE -resize(delay_pipeline(0),17);

  prod_powertwo_2_1 <= resize(mulpwr2_temp_1, 32);

  -- value of 'coeffphase3_2' is 0.00097656

  prod_powertwo_3_2 <= resize(delay_pipeline(1)(15 DOWNTO 0) & '0', 32);

  -- value of 'coeffphase3_12' is 0.0019531

  prod_powertwo_3_12 <= resize(delay_pipeline(11)(15 DOWNTO 0) & '0' & '0', 32);

  -- value of 'coeffphase5_3' is 0.0078125

  prod_powertwo_5_3 <= resize(delay_pipeline(2)(15 DOWNTO 0) & '0' & '0' & '0' & '0', 32);

  -- value of 'coeffphase5_11' is 0.0078125

  prod_powertwo_5_11 <= resize(delay_pipeline(10)(15 DOWNTO 0) & '0' & '0' & '0' & '0', 32);

  -- value of 'coeffphase7_2' is 0.0019531

  prod_powertwo_7_2 <= resize(delay_pipeline(1)(15 DOWNTO 0) & '0' & '0', 32);

  -- value of 'coeffphase7_12' is 0.00097656

  prod_powertwo_7_12 <= resize(delay_pipeline(11)(15 DOWNTO 0) & '0', 32);

  -- value of 'coeffphase8_13' is -0.00048828

  mulpwr2_temp_2 <= ('0' & delay_pipeline(12)) WHEN delay_pipeline(12) = "1000000000000000"
      ELSE -resize(delay_pipeline(12),17);

  prod_powertwo_8_13 <= resize(mulpwr2_temp_2, 32);

  -- value of 'coeffphase9_1' is 0.00048828

  prod_powertwo_9_1 <= resize(delay_pipeline(0), 32);

  -- value of 'coeffphase9_11' is 0.0039063

  prod_powertwo_9_11 <= resize(delay_pipeline(10)(15 DOWNTO 0) & '0' & '0' & '0', 32);

  -- value of 'coeffphase9_12' is -0.00048828

  mulpwr2_temp_3 <= ('0' & delay_pipeline(11)) WHEN delay_pipeline(11) = "1000000000000000"
      ELSE -resize(delay_pipeline(11),17);

  prod_powertwo_9_12 <= resize(mulpwr2_temp_3, 32);

  -- Mux(es) to select the power of 2 products for the corresponding polyphase

  powertwo_mux_1_2 <= prod_powertwo_1_2 WHEN ( phase_1 = '1' ) ELSE
                           const_zero;
  powertwo_mux_1_3 <= prod_powertwo_1_3 WHEN ( phase_1 = '1' ) ELSE
                           const_zero;
  powertwo_mux_1_13 <= prod_powertwo_1_13 WHEN ( phase_1 = '1' ) ELSE
                            const_zero;
  powertwo_mux_2_1 <= prod_powertwo_2_1 WHEN ( phase_14 = '1' ) ELSE
                           const_zero;
  powertwo_mux_3_2 <= prod_powertwo_3_2 WHEN ( phase_27 = '1' ) ELSE
                           const_zero;
  powertwo_mux_3_12 <= prod_powertwo_3_12 WHEN ( phase_27 = '1' ) ELSE
                            const_zero;
  powertwo_mux_5_3 <= prod_powertwo_5_3 WHEN ( phase_53 = '1' ) ELSE
                           const_zero;
  powertwo_mux_5_11 <= prod_powertwo_5_11 WHEN ( phase_53 = '1' ) ELSE
                            const_zero;
  powertwo_mux_7_2 <= prod_powertwo_7_2 WHEN ( phase_79 = '1' ) ELSE
                           const_zero;
  powertwo_mux_7_12 <= prod_powertwo_7_12 WHEN ( phase_79 = '1' ) ELSE
                            const_zero;
  powertwo_mux_8_13 <= prod_powertwo_8_13 WHEN ( phase_92 = '1' ) ELSE
                            const_zero;
  powertwo_mux_9_1 <= prod_powertwo_9_1 WHEN ( phase_105 = '1' ) ELSE
                           const_zero;
  powertwo_mux_9_11 <= prod_powertwo_9_11 WHEN ( phase_105 = '1' ) ELSE
                            const_zero;
  powertwo_mux_9_12 <= prod_powertwo_9_12 WHEN ( phase_105 = '1' ) ELSE
                            const_zero;

  -- Add the products in linear fashion

  add_temp <= resize(phasemux, 33) + resize(powertwo_mux_1_2, 33);
  sum_1 <= resize(add_temp, 36);

  add_temp_1 <= resize(sum_1, 37) + resize(powertwo_mux_1_3, 37);
  sum_2 <= add_temp_1(35 DOWNTO 0);

  add_temp_2 <= resize(sum_2, 37) + resize(powertwo_mux_1_13, 37);
  sum_3 <= add_temp_2(35 DOWNTO 0);

  add_temp_3 <= resize(sum_3, 37) + resize(powertwo_mux_2_1, 37);
  sum_4 <= add_temp_3(35 DOWNTO 0);

  add_temp_4 <= resize(sum_4, 37) + resize(powertwo_mux_3_2, 37);
  sum_5 <= add_temp_4(35 DOWNTO 0);

  add_temp_5 <= resize(sum_5, 37) + resize(powertwo_mux_3_12, 37);
  sum_6 <= add_temp_5(35 DOWNTO 0);

  add_temp_6 <= resize(sum_6, 37) + resize(powertwo_mux_5_3, 37);
  sum_7 <= add_temp_6(35 DOWNTO 0);

  add_temp_7 <= resize(sum_7, 37) + resize(powertwo_mux_5_11, 37);
  sum_8 <= add_temp_7(35 DOWNTO 0);

  add_temp_8 <= resize(sum_8, 37) + resize(powertwo_mux_7_2, 37);
  sum_9 <= add_temp_8(35 DOWNTO 0);

  add_temp_9 <= resize(sum_9, 37) + resize(powertwo_mux_7_12, 37);
  sum_10 <= add_temp_9(35 DOWNTO 0);

  add_temp_10 <= resize(sum_10, 37) + resize(powertwo_mux_8_13, 37);
  sum_11 <= add_temp_10(35 DOWNTO 0);

  add_temp_11 <= resize(sum_11, 37) + resize(powertwo_mux_9_1, 37);
  sum_12 <= add_temp_11(35 DOWNTO 0);

  add_temp_12 <= resize(sum_12, 37) + resize(powertwo_mux_9_11, 37);
  sum_13 <= add_temp_12(35 DOWNTO 0);

  add_temp_13 <= resize(sum_13, 37) + resize(powertwo_mux_9_12, 37);
  sumofproducts <= add_temp_13(35 DOWNTO 0);

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= sumofproducts;

  -- Accumulator register with a mux to reset it with the first addend

  add_temp_14 <= resize(sumofproducts_cast, 37) + resize(accreg_out, 37);
  acc_sum <= add_temp_14(35 DOWNTO 0);

  accreg_in <= sumofproducts_cast WHEN ( phase_13 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_13 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= resize(shift_right(accreg_final(26 DOWNTO 0) + ( "0" & (accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11) & NOT accreg_final(11))), 11), 16);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_13_1 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  ce_out <= phase_0;
  filter_out <= std_logic_vector(output_register);
END rtl;
