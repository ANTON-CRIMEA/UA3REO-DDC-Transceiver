-- -------------------------------------------------------------
--
-- Module: tx_ciccomp
-- Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
-- Generated on: 2019-04-07 13:02:52
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- Name: tx_ciccomp
-- SerialPartition: 14
-- TestBenchName: tx_ciccomp_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : CIC Compensator
-- Specification          : N,Fp,Fst
-- Interpolation Factor   : 2
-- Multirate Type         : Interpolator
-- CIC Rate Change Factor : 512
-- Stopband Edge          : 0.55
-- Passband Edge          : 0.45
-- Filter Order           : 54
-- Number of Sections     : 5
-- Differential Delay     : 1
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 14
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure      : Direct-Form FIR Polyphase Interpolator
-- Interpolation Factor  : 2
-- Polyphase Length      : 28
-- Filter Length         : 55
-- Stable                : Yes
-- Linear Phase          : Yes (Type 1)
--
-- Arithmetic            : fixed
-- Numerator             : s16,14 -> [-2 2)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY tx_ciccomp IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         ce_out                          :   OUT   std_logic  
         );

END tx_ciccomp;


----------------------------------------------------------------
--Module Architecture: tx_ciccomp
----------------------------------------------------------------
ARCHITECTURE rtl OF tx_ciccomp IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeffphase1_1                  : signed(15 DOWNTO 0) := to_signed(-115, 16); -- sfix16_En14
  CONSTANT coeffphase1_2                  : signed(15 DOWNTO 0) := to_signed(126, 16); -- sfix16_En14
  CONSTANT coeffphase1_3                  : signed(15 DOWNTO 0) := to_signed(-182, 16); -- sfix16_En14
  CONSTANT coeffphase1_4                  : signed(15 DOWNTO 0) := to_signed(269, 16); -- sfix16_En14
  CONSTANT coeffphase1_5                  : signed(15 DOWNTO 0) := to_signed(-369, 16); -- sfix16_En14
  CONSTANT coeffphase1_6                  : signed(15 DOWNTO 0) := to_signed(508, 16); -- sfix16_En14
  CONSTANT coeffphase1_7                  : signed(15 DOWNTO 0) := to_signed(-675, 16); -- sfix16_En14
  CONSTANT coeffphase1_8                  : signed(15 DOWNTO 0) := to_signed(902, 16); -- sfix16_En14
  CONSTANT coeffphase1_9                  : signed(15 DOWNTO 0) := to_signed(-1192, 16); -- sfix16_En14
  CONSTANT coeffphase1_10                 : signed(15 DOWNTO 0) := to_signed(1603, 16); -- sfix16_En14
  CONSTANT coeffphase1_11                 : signed(15 DOWNTO 0) := to_signed(-2201, 16); -- sfix16_En14
  CONSTANT coeffphase1_12                 : signed(15 DOWNTO 0) := to_signed(3212, 16); -- sfix16_En14
  CONSTANT coeffphase1_13                 : signed(15 DOWNTO 0) := to_signed(-5268, 16); -- sfix16_En14
  CONSTANT coeffphase1_14                 : signed(15 DOWNTO 0) := to_signed(11539, 16); -- sfix16_En14
  CONSTANT coeffphase1_15                 : signed(15 DOWNTO 0) := to_signed(11539, 16); -- sfix16_En14
  CONSTANT coeffphase1_16                 : signed(15 DOWNTO 0) := to_signed(-5268, 16); -- sfix16_En14
  CONSTANT coeffphase1_17                 : signed(15 DOWNTO 0) := to_signed(3212, 16); -- sfix16_En14
  CONSTANT coeffphase1_18                 : signed(15 DOWNTO 0) := to_signed(-2201, 16); -- sfix16_En14
  CONSTANT coeffphase1_19                 : signed(15 DOWNTO 0) := to_signed(1603, 16); -- sfix16_En14
  CONSTANT coeffphase1_20                 : signed(15 DOWNTO 0) := to_signed(-1192, 16); -- sfix16_En14
  CONSTANT coeffphase1_21                 : signed(15 DOWNTO 0) := to_signed(902, 16); -- sfix16_En14
  CONSTANT coeffphase1_22                 : signed(15 DOWNTO 0) := to_signed(-675, 16); -- sfix16_En14
  CONSTANT coeffphase1_23                 : signed(15 DOWNTO 0) := to_signed(508, 16); -- sfix16_En14
  CONSTANT coeffphase1_24                 : signed(15 DOWNTO 0) := to_signed(-369, 16); -- sfix16_En14
  CONSTANT coeffphase1_25                 : signed(15 DOWNTO 0) := to_signed(269, 16); -- sfix16_En14
  CONSTANT coeffphase1_26                 : signed(15 DOWNTO 0) := to_signed(-182, 16); -- sfix16_En14
  CONSTANT coeffphase1_27                 : signed(15 DOWNTO 0) := to_signed(126, 16); -- sfix16_En14
  CONSTANT coeffphase1_28                 : signed(15 DOWNTO 0) := to_signed(-115, 16); -- sfix16_En14
  CONSTANT coeffphase2_1                  : signed(15 DOWNTO 0) := to_signed(-5, 16); -- sfix16_En14
  CONSTANT coeffphase2_2                  : signed(15 DOWNTO 0) := to_signed(1, 16); -- sfix16_En14
  CONSTANT coeffphase2_3                  : signed(15 DOWNTO 0) := to_signed(-9, 16); -- sfix16_En14
  CONSTANT coeffphase2_4                  : signed(15 DOWNTO 0) := to_signed(8, 16); -- sfix16_En14
  CONSTANT coeffphase2_5                  : signed(15 DOWNTO 0) := to_signed(-18, 16); -- sfix16_En14
  CONSTANT coeffphase2_6                  : signed(15 DOWNTO 0) := to_signed(22, 16); -- sfix16_En14
  CONSTANT coeffphase2_7                  : signed(15 DOWNTO 0) := to_signed(-39, 16); -- sfix16_En14
  CONSTANT coeffphase2_8                  : signed(15 DOWNTO 0) := to_signed(55, 16); -- sfix16_En14
  CONSTANT coeffphase2_9                  : signed(15 DOWNTO 0) := to_signed(-94, 16); -- sfix16_En14
  CONSTANT coeffphase2_10                 : signed(15 DOWNTO 0) := to_signed(153, 16); -- sfix16_En14
  CONSTANT coeffphase2_11                 : signed(15 DOWNTO 0) := to_signed(-292, 16); -- sfix16_En14
  CONSTANT coeffphase2_12                 : signed(15 DOWNTO 0) := to_signed(644, 16); -- sfix16_En14
  CONSTANT coeffphase2_13                 : signed(15 DOWNTO 0) := to_signed(-2119, 16); -- sfix16_En14
  CONSTANT coeffphase2_14                 : signed(15 DOWNTO 0) := to_signed(19704, 16); -- sfix16_En14
  CONSTANT coeffphase2_15                 : signed(15 DOWNTO 0) := to_signed(-2119, 16); -- sfix16_En14
  CONSTANT coeffphase2_16                 : signed(15 DOWNTO 0) := to_signed(644, 16); -- sfix16_En14
  CONSTANT coeffphase2_17                 : signed(15 DOWNTO 0) := to_signed(-292, 16); -- sfix16_En14
  CONSTANT coeffphase2_18                 : signed(15 DOWNTO 0) := to_signed(153, 16); -- sfix16_En14
  CONSTANT coeffphase2_19                 : signed(15 DOWNTO 0) := to_signed(-94, 16); -- sfix16_En14
  CONSTANT coeffphase2_20                 : signed(15 DOWNTO 0) := to_signed(55, 16); -- sfix16_En14
  CONSTANT coeffphase2_21                 : signed(15 DOWNTO 0) := to_signed(-39, 16); -- sfix16_En14
  CONSTANT coeffphase2_22                 : signed(15 DOWNTO 0) := to_signed(22, 16); -- sfix16_En14
  CONSTANT coeffphase2_23                 : signed(15 DOWNTO 0) := to_signed(-18, 16); -- sfix16_En14
  CONSTANT coeffphase2_24                 : signed(15 DOWNTO 0) := to_signed(8, 16); -- sfix16_En14
  CONSTANT coeffphase2_25                 : signed(15 DOWNTO 0) := to_signed(-9, 16); -- sfix16_En14
  CONSTANT coeffphase2_26                 : signed(15 DOWNTO 0) := to_signed(1, 16); -- sfix16_En14
  CONSTANT coeffphase2_27                 : signed(15 DOWNTO 0) := to_signed(-5, 16); -- sfix16_En14
  CONSTANT coeffphase2_28                 : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16_En14

  CONSTANT const_zero                     : signed(32 DOWNTO 0) := to_signed(0, 33); -- sfix33_En29
  CONSTANT const_zero_1                   : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En29
  -- Signals
  SIGNAL cur_count                        : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_15                         : std_logic; -- boolean
  SIGNAL phase_14                         : std_logic; -- boolean
  SIGNAL phase_14_1                       : std_logic; -- boolean
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 27); -- sfix16_En15
  SIGNAL tapsum_and                       : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_1                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_2                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_3                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_4                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_5                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_6                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_7                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_8                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_9                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_10                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_11                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_12                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_13                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_14                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_15                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_16                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_17                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_18                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_19                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_20                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_21                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_22                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_23                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_24                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline13_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL inputmux                         : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL product1                         : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL product1_mux                     : signed(15 DOWNTO 0); -- sfix16_En14
  SIGNAL phasemux                         : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL prod_powertwo_2_2                : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL prod_powertwo_2_4                : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL prod_powertwo_2_24               : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL prod_powertwo_2_26               : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL powertwo_mux_2_2                 : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL powertwo_mux_2_4                 : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL powertwo_mux_2_24                : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL powertwo_mux_2_26                : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL sumofproducts                    : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL sum_1                            : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL add_temp                         : signed(33 DOWNTO 0); -- sfix34_En29
  SIGNAL sum_2                            : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL add_temp_1                       : signed(37 DOWNTO 0); -- sfix38_En29
  SIGNAL sum_3                            : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL add_temp_2                       : signed(37 DOWNTO 0); -- sfix38_En29
  SIGNAL add_temp_3                       : signed(37 DOWNTO 0); -- sfix38_En29
  SIGNAL sumofproducts_cast               : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL acc_sum                          : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL accreg_in                        : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL accreg_out                       : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL add_temp_4                       : signed(37 DOWNTO 0); -- sfix38_En29
  SIGNAL accreg_final                     : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(27, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(27, 5) THEN
          cur_count <= to_unsigned(0, 5);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 5) AND clk_enable = '1' ELSE '0';

  phase_1 <= '1' WHEN  (((cur_count = to_unsigned(1, 5))  OR
                         (cur_count = to_unsigned(2, 5))  OR
                         (cur_count = to_unsigned(3, 5))  OR
                         (cur_count = to_unsigned(4, 5))  OR
                         (cur_count = to_unsigned(5, 5))  OR
                         (cur_count = to_unsigned(6, 5))  OR
                         (cur_count = to_unsigned(7, 5))  OR
                         (cur_count = to_unsigned(8, 5))  OR
                         (cur_count = to_unsigned(9, 5))  OR
                         (cur_count = to_unsigned(10, 5))  OR
                         (cur_count = to_unsigned(11, 5))  OR
                         (cur_count = to_unsigned(12, 5))  OR
                         (cur_count = to_unsigned(13, 5))  OR
                         (cur_count = to_unsigned(14, 5))  OR
                         (cur_count = to_unsigned(15, 5))  OR
                         (cur_count = to_unsigned(16, 5))  OR
                         (cur_count = to_unsigned(17, 5))  OR
                         (cur_count = to_unsigned(18, 5))  OR
                         (cur_count = to_unsigned(19, 5))  OR
                         (cur_count = to_unsigned(20, 5))  OR
                         (cur_count = to_unsigned(21, 5))  OR
                         (cur_count = to_unsigned(22, 5))  OR
                         (cur_count = to_unsigned(23, 5))  OR
                         (cur_count = to_unsigned(24, 5))  OR
                         (cur_count = to_unsigned(25, 5))  OR
                         (cur_count = to_unsigned(26, 5)))  AND clk_enable = '1') ELSE '0';

  phase_15 <= '1' WHEN cur_count = to_unsigned(15, 5) AND clk_enable = '1' ELSE '0';

  phase_14 <= '1' WHEN  (((cur_count = to_unsigned(15, 5))  OR
                          (cur_count = to_unsigned(1, 5)))  AND clk_enable = '1') ELSE '0';

  phase_14_1 <= '1' WHEN  (((cur_count = to_unsigned(16, 5))  OR
                            (cur_count = to_unsigned(2, 5)))  AND clk_enable = '1') ELSE '0';

  --   ---------------- Delay Registers ----------------

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 27) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 27) <= delay_pipeline(0 TO 26);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  -- Adding (or subtracting) the taps based on the symmetry (or asymmetry)

  tapsum_and <= resize(delay_pipeline(0), 17) + resize(delay_pipeline(27), 17);

  tapsum_and_1 <= resize(delay_pipeline(1), 17) + resize(delay_pipeline(26), 17);

  tapsum_and_2 <= resize(delay_pipeline(2), 17) + resize(delay_pipeline(25), 17);

  tapsum_and_3 <= resize(delay_pipeline(3), 17) + resize(delay_pipeline(24), 17);

  tapsum_and_4 <= resize(delay_pipeline(4), 17) + resize(delay_pipeline(23), 17);

  tapsum_and_5 <= resize(delay_pipeline(5), 17) + resize(delay_pipeline(22), 17);

  tapsum_and_6 <= resize(delay_pipeline(6), 17) + resize(delay_pipeline(21), 17);

  tapsum_and_7 <= resize(delay_pipeline(7), 17) + resize(delay_pipeline(20), 17);

  tapsum_and_8 <= resize(delay_pipeline(8), 17) + resize(delay_pipeline(19), 17);

  tapsum_and_9 <= resize(delay_pipeline(9), 17) + resize(delay_pipeline(18), 17);

  tapsum_and_10 <= resize(delay_pipeline(10), 17) + resize(delay_pipeline(17), 17);

  tapsum_and_11 <= resize(delay_pipeline(11), 17) + resize(delay_pipeline(16), 17);

  tapsum_and_12 <= resize(delay_pipeline(12), 17) + resize(delay_pipeline(15), 17);

  tapsum_and_13 <= resize(delay_pipeline(13), 17) + resize(delay_pipeline(14), 17);

  tapsum_and_14 <= resize(delay_pipeline(0), 17) + resize(delay_pipeline(26), 17);

  tapsum_and_15 <= resize(delay_pipeline(2), 17) + resize(delay_pipeline(24), 17);

  tapsum_and_16 <= resize(delay_pipeline(4), 17) + resize(delay_pipeline(22), 17);

  tapsum_and_17 <= resize(delay_pipeline(5), 17) + resize(delay_pipeline(21), 17);

  tapsum_and_18 <= resize(delay_pipeline(6), 17) + resize(delay_pipeline(20), 17);

  tapsum_and_19 <= resize(delay_pipeline(7), 17) + resize(delay_pipeline(19), 17);

  tapsum_and_20 <= resize(delay_pipeline(8), 17) + resize(delay_pipeline(18), 17);

  tapsum_and_21 <= resize(delay_pipeline(9), 17) + resize(delay_pipeline(17), 17);

  tapsum_and_22 <= resize(delay_pipeline(10), 17) + resize(delay_pipeline(16), 17);

  tapsum_and_23 <= resize(delay_pipeline(11), 17) + resize(delay_pipeline(15), 17);

  tapsum_and_24 <= resize(delay_pipeline(12), 17) + resize(delay_pipeline(14), 17);

  -- Mux(es) to select the input taps for multipliers 

  delay_pipeline13_cast <= resize(delay_pipeline(13), 17);

  inputmux <= tapsum_and WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                   tapsum_and_1 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                   tapsum_and_2 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                   tapsum_and_3 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                   tapsum_and_4 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                   tapsum_and_5 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                   tapsum_and_6 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                   tapsum_and_7 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                   tapsum_and_8 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                   tapsum_and_9 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                   tapsum_and_10 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                   tapsum_and_11 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                   tapsum_and_12 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                   tapsum_and_13 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                   tapsum_and_14 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                   tapsum_and_15 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                   tapsum_and_16 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                   tapsum_and_17 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                   tapsum_and_18 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                   tapsum_and_19 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                   tapsum_and_20 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                   tapsum_and_21 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                   tapsum_and_22 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                   tapsum_and_23 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                   tapsum_and_24 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                   delay_pipeline13_cast;

  product1_mux <= coeffphase1_1 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                       coeffphase1_2 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                       coeffphase1_3 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                       coeffphase1_4 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                       coeffphase1_5 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                       coeffphase1_6 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                       coeffphase1_7 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                       coeffphase1_8 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                       coeffphase1_9 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                       coeffphase1_10 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                       coeffphase1_11 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                       coeffphase1_12 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                       coeffphase1_13 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                       coeffphase1_14 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                       coeffphase2_1 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                       coeffphase2_3 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                       coeffphase2_5 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                       coeffphase2_6 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                       coeffphase2_7 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                       coeffphase2_8 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                       coeffphase2_9 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                       coeffphase2_10 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                       coeffphase2_11 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                       coeffphase2_12 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                       coeffphase2_13 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                       coeffphase2_14;
  product1 <= inputmux * product1_mux;

  phasemux <= product1 WHEN ( phase_1 = '1' ) ELSE
                   const_zero;

  -- Implementing products without a multiplier for coefficients with values equal to a power of 2.

  -- value of 'coeffphase2_2' is 6.1035e-05

  prod_powertwo_2_2 <= resize(delay_pipeline(1), 32);

  -- value of 'coeffphase2_4' is 0.00048828

  prod_powertwo_2_4 <= resize(delay_pipeline(3)(15 DOWNTO 0) & '0' & '0' & '0', 32);

  -- value of 'coeffphase2_24' is 0.00048828

  prod_powertwo_2_24 <= resize(delay_pipeline(23)(15 DOWNTO 0) & '0' & '0' & '0', 32);

  -- value of 'coeffphase2_26' is 6.1035e-05

  prod_powertwo_2_26 <= resize(delay_pipeline(25), 32);

  -- Mux(es) to select the power of 2 products for the corresponding polyphase

  powertwo_mux_2_2 <= prod_powertwo_2_2 WHEN ( phase_15 = '1' ) ELSE
                           const_zero_1;
  powertwo_mux_2_4 <= prod_powertwo_2_4 WHEN ( phase_15 = '1' ) ELSE
                           const_zero_1;
  powertwo_mux_2_24 <= prod_powertwo_2_24 WHEN ( phase_15 = '1' ) ELSE
                            const_zero_1;
  powertwo_mux_2_26 <= prod_powertwo_2_26 WHEN ( phase_15 = '1' ) ELSE
                            const_zero_1;

  -- Add the products in linear fashion

  add_temp <= resize(phasemux, 34) + resize(powertwo_mux_2_2, 34);
  sum_1 <= resize(add_temp, 37);

  add_temp_1 <= resize(sum_1, 38) + resize(powertwo_mux_2_4, 38);
  sum_2 <= add_temp_1(36 DOWNTO 0);

  add_temp_2 <= resize(sum_2, 38) + resize(powertwo_mux_2_24, 38);
  sum_3 <= add_temp_2(36 DOWNTO 0);

  add_temp_3 <= resize(sum_3, 38) + resize(powertwo_mux_2_26, 38);
  sumofproducts <= add_temp_3(36 DOWNTO 0);

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= sumofproducts;

  -- Accumulator register with a mux to reset it with the first addend

  add_temp_4 <= resize(sumofproducts_cast, 38) + resize(accreg_out, 38);
  acc_sum <= add_temp_4(36 DOWNTO 0);

  accreg_in <= sumofproducts_cast WHEN ( phase_14 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_14 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= resize(shift_right(accreg_final(29 DOWNTO 0) + ( "0" & (accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14))), 14), 16);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_14_1 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  ce_out <= phase_0;
  filter_out <= std_logic_vector(output_register);
END rtl;
