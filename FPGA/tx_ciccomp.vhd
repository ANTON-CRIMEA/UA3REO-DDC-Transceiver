-- -------------------------------------------------------------
--
-- Module: tx_ciccomp
-- Generated by MATLAB(R) 9.9 and Filter Design HDL Coder 3.1.8.
-- Generated on: 2021-02-09 12:04:41
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- Name: tx_ciccomp
-- SerialPartition: 26
-- TestBenchName: tx_ciccomp_tb
-- TestBenchStimulus: impulse step ramp chirp noise 

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : CIC Compensator
-- Specification          : Fp,Fst,Ap,Ast
-- Number of Sections     : 1
-- Differential Delay     : 1
-- CIC Rate Change Factor : 1280
-- Stopband Atten.        : 60 dB
-- Passband Ripple        : 0.3 dB
-- Stopband Edge          : 0.55
-- Passband Edge          : 0.45
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 26
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form Symmetric FIR
-- Filter Length     : 51
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s16,15 -> [-1 1)
-- Input             : s32,0 -> [-2147483648 2147483648)
-- Filter Internals  : Full Precision
--   Output          : s48,15 -> [-4294967296 4294967296)  (auto determined)
--   Tap Sum         : s33,0 -> [-4294967296 4294967296)  (auto determined)
--   Product         : s48,15 -> [-4294967296 4294967296)  (auto determined)
--   Accumulator     : s48,15 -> [-4294967296 4294967296)  (auto determined)
--   Round Mode      : No rounding
--   Overflow Mode   : No overflow
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY tx_ciccomp IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32
         filter_out                      :   OUT   std_logic_vector(47 DOWNTO 0)  -- sfix48_En15
         );

END tx_ciccomp;


----------------------------------------------------------------
--Module Architecture: tx_ciccomp
----------------------------------------------------------------
ARCHITECTURE rtl OF tx_ciccomp IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(-69, 16); -- sfix16_En15
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(-185, 16); -- sfix16_En15
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(-113, 16); -- sfix16_En15
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(104, 16); -- sfix16_En15
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(135, 16); -- sfix16_En15
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(-130, 16); -- sfix16_En15
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(-191, 16); -- sfix16_En15
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(156, 16); -- sfix16_En15
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(277, 16); -- sfix16_En15
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(-185, 16); -- sfix16_En15
  CONSTANT coeff11                        : signed(15 DOWNTO 0) := to_signed(-390, 16); -- sfix16_En15
  CONSTANT coeff12                        : signed(15 DOWNTO 0) := to_signed(211, 16); -- sfix16_En15
  CONSTANT coeff13                        : signed(15 DOWNTO 0) := to_signed(540, 16); -- sfix16_En15
  CONSTANT coeff14                        : signed(15 DOWNTO 0) := to_signed(-236, 16); -- sfix16_En15
  CONSTANT coeff15                        : signed(15 DOWNTO 0) := to_signed(-740, 16); -- sfix16_En15
  CONSTANT coeff16                        : signed(15 DOWNTO 0) := to_signed(256, 16); -- sfix16_En15
  CONSTANT coeff17                        : signed(15 DOWNTO 0) := to_signed(1019, 16); -- sfix16_En15
  CONSTANT coeff18                        : signed(15 DOWNTO 0) := to_signed(-269, 16); -- sfix16_En15
  CONSTANT coeff19                        : signed(15 DOWNTO 0) := to_signed(-1437, 16); -- sfix16_En15
  CONSTANT coeff20                        : signed(15 DOWNTO 0) := to_signed(268, 16); -- sfix16_En15
  CONSTANT coeff21                        : signed(15 DOWNTO 0) := to_signed(2150, 16); -- sfix16_En15
  CONSTANT coeff22                        : signed(15 DOWNTO 0) := to_signed(-229, 16); -- sfix16_En15
  CONSTANT coeff23                        : signed(15 DOWNTO 0) := to_signed(-3720, 16); -- sfix16_En15
  CONSTANT coeff24                        : signed(15 DOWNTO 0) := to_signed(-28, 16); -- sfix16_En15
  CONSTANT coeff25                        : signed(15 DOWNTO 0) := to_signed(10608, 16); -- sfix16_En15
  CONSTANT coeff26                        : signed(15 DOWNTO 0) := to_signed(16635, 16); -- sfix16_En15

  CONSTANT const_zero                     : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32
  -- Signals
  SIGNAL cur_count                        : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL phase_25                         : std_logic; -- boolean
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 50); -- sfix32
  SIGNAL preaddmux_a1                     : signed(31 DOWNTO 0); -- sfix32
  SIGNAL preaddmux_b1                     : signed(31 DOWNTO 0); -- sfix32
  SIGNAL tapsum_1                         : signed(32 DOWNTO 0); -- sfix33
  SIGNAL tapsum_mcand_1                   : signed(32 DOWNTO 0); -- sfix33
  SIGNAL acc_final                        : signed(47 DOWNTO 0); -- sfix48_En15
  SIGNAL acc_out_1                        : signed(47 DOWNTO 0); -- sfix48_En15
  SIGNAL product_1                        : signed(47 DOWNTO 0); -- sfix48_En15
  SIGNAL product_1_mux                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp                         : signed(48 DOWNTO 0); -- sfix49_En15
  SIGNAL prod_typeconvert_1               : signed(47 DOWNTO 0); -- sfix48_En15
  SIGNAL acc_sum_1                        : signed(47 DOWNTO 0); -- sfix48_En15
  SIGNAL acc_in_1                         : signed(47 DOWNTO 0); -- sfix48_En15
  SIGNAL add_temp                         : signed(48 DOWNTO 0); -- sfix49_En15
  SIGNAL output_typeconvert               : signed(47 DOWNTO 0); -- sfix48_En15
  SIGNAL output_register                  : signed(47 DOWNTO 0); -- sfix48_En15


BEGIN

  -- Block Statements
  Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(25, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(25, 5) THEN
          cur_count <= to_unsigned(0, 5);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter_process;

  phase_25 <= '1' WHEN cur_count = to_unsigned(25, 5) AND clk_enable = '1' ELSE '0';

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 5) AND clk_enable = '1' ELSE '0';

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 50) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_25 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 50) <= delay_pipeline(0 TO 49);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  preaddmux_a1 <= delay_pipeline(0) WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                       delay_pipeline(1) WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                       delay_pipeline(2) WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                       delay_pipeline(3) WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                       delay_pipeline(4) WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                       delay_pipeline(5) WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                       delay_pipeline(6) WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                       delay_pipeline(7) WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                       delay_pipeline(8) WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                       delay_pipeline(9) WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                       delay_pipeline(10) WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                       delay_pipeline(11) WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                       delay_pipeline(12) WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                       delay_pipeline(13) WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                       delay_pipeline(14) WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                       delay_pipeline(15) WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                       delay_pipeline(16) WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                       delay_pipeline(17) WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                       delay_pipeline(18) WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                       delay_pipeline(19) WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                       delay_pipeline(20) WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                       delay_pipeline(21) WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                       delay_pipeline(22) WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                       delay_pipeline(23) WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                       delay_pipeline(24) WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                       delay_pipeline(25);
  preaddmux_b1 <= delay_pipeline(50) WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                       delay_pipeline(49) WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                       delay_pipeline(48) WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                       delay_pipeline(47) WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                       delay_pipeline(46) WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                       delay_pipeline(45) WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                       delay_pipeline(44) WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                       delay_pipeline(43) WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                       delay_pipeline(42) WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                       delay_pipeline(41) WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                       delay_pipeline(40) WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                       delay_pipeline(39) WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                       delay_pipeline(38) WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                       delay_pipeline(37) WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                       delay_pipeline(36) WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                       delay_pipeline(35) WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                       delay_pipeline(34) WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                       delay_pipeline(33) WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                       delay_pipeline(32) WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                       delay_pipeline(31) WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                       delay_pipeline(30) WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                       delay_pipeline(29) WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                       delay_pipeline(28) WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                       delay_pipeline(27) WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                       delay_pipeline(26) WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                       const_zero;
  tapsum_1 <= resize(preaddmux_a1, 33) + resize(preaddmux_b1, 33);

  tapsum_mcand_1 <= tapsum_1;

  --   ------------------ Serial partition # 1 ------------------

  product_1_mux <= coeff1 WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                        coeff2 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                        coeff3 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                        coeff4 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                        coeff5 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                        coeff6 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                        coeff7 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                        coeff8 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                        coeff9 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                        coeff10 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                        coeff11 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                        coeff12 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                        coeff13 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                        coeff14 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                        coeff15 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                        coeff16 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                        coeff17 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                        coeff18 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                        coeff19 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                        coeff20 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                        coeff21 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                        coeff22 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                        coeff23 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                        coeff24 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                        coeff25 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                        coeff26;
  mul_temp <= tapsum_mcand_1 * product_1_mux;
  product_1 <= mul_temp(47 DOWNTO 0);

  prod_typeconvert_1 <= product_1;

  add_temp <= resize(prod_typeconvert_1, 49) + resize(acc_out_1, 49);
  acc_sum_1 <= add_temp(47 DOWNTO 0);

  acc_in_1 <= prod_typeconvert_1 WHEN ( phase_0 = '1' ) ELSE
                   acc_sum_1;

  Acc_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_out_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        acc_out_1 <= acc_in_1;
      END IF;
    END IF; 
  END PROCESS Acc_reg_1_process;

  Finalsum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        acc_final <= acc_out_1;
      END IF;
    END IF; 
  END PROCESS Finalsum_reg_process;

  output_typeconvert <= acc_final;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_25 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
