-- -------------------------------------------------------------
--
-- Module: tx_ciccomp
-- Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
-- Generated on: 2019-04-14 02:00:04
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- Name: tx_ciccomp
-- SerialPartition: 23
-- TestBenchName: tx_ciccomp_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate            : N/A (normalized frequency)
-- Response               : CIC Compensator
-- Specification          : Fp,Fst,Ap,Ast
-- Interpolation Factor   : 2
-- Multirate Type         : Interpolator
-- Differential Delay     : 1
-- Passband Edge          : 0.45
-- Number of Sections     : 5
-- Stopband Atten.        : 60 dB
-- Passband Ripple        : 1 dB
-- CIC Rate Change Factor : 512
-- Stopband Edge          : 0.55
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 23
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure      : Direct-Form FIR Polyphase Interpolator
-- Interpolation Factor  : 2
-- Polyphase Length      : 24
-- Filter Length         : 48
-- Stable                : Yes
-- Linear Phase          : Yes (Type 2)
--
-- Arithmetic            : fixed
-- Numerator             : s16,14 -> [-2 2)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY tx_ciccomp IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         ce_out                          :   OUT   std_logic  
         );

END tx_ciccomp;


----------------------------------------------------------------
--Module Architecture: tx_ciccomp
----------------------------------------------------------------
ARCHITECTURE rtl OF tx_ciccomp IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeffphase1_1                  : signed(15 DOWNTO 0) := to_signed(161, 16); -- sfix16_En14
  CONSTANT coeffphase1_2                  : signed(15 DOWNTO 0) := to_signed(417, 16); -- sfix16_En14
  CONSTANT coeffphase1_3                  : signed(15 DOWNTO 0) := to_signed(-375, 16); -- sfix16_En14
  CONSTANT coeffphase1_4                  : signed(15 DOWNTO 0) := to_signed(466, 16); -- sfix16_En14
  CONSTANT coeffphase1_5                  : signed(15 DOWNTO 0) := to_signed(-611, 16); -- sfix16_En14
  CONSTANT coeffphase1_6                  : signed(15 DOWNTO 0) := to_signed(790, 16); -- sfix16_En14
  CONSTANT coeffphase1_7                  : signed(15 DOWNTO 0) := to_signed(-1018, 16); -- sfix16_En14
  CONSTANT coeffphase1_8                  : signed(15 DOWNTO 0) := to_signed(1303, 16); -- sfix16_En14
  CONSTANT coeffphase1_9                  : signed(15 DOWNTO 0) := to_signed(-1682, 16); -- sfix16_En14
  CONSTANT coeffphase1_10                 : signed(15 DOWNTO 0) := to_signed(2226, 16); -- sfix16_En14
  CONSTANT coeffphase1_11                 : signed(15 DOWNTO 0) := to_signed(-3111, 16); -- sfix16_En14
  CONSTANT coeffphase1_12                 : signed(15 DOWNTO 0) := to_signed(4653, 16); -- sfix16_En14
  CONSTANT coeffphase1_13                 : signed(15 DOWNTO 0) := to_signed(16930, 16); -- sfix16_En14
  CONSTANT coeffphase1_14                 : signed(15 DOWNTO 0) := to_signed(-4879, 16); -- sfix16_En14
  CONSTANT coeffphase1_15                 : signed(15 DOWNTO 0) := to_signed(2354, 16); -- sfix16_En14
  CONSTANT coeffphase1_16                 : signed(15 DOWNTO 0) := to_signed(-1336, 16); -- sfix16_En14
  CONSTANT coeffphase1_17                 : signed(15 DOWNTO 0) := to_signed(796, 16); -- sfix16_En14
  CONSTANT coeffphase1_18                 : signed(15 DOWNTO 0) := to_signed(-466, 16); -- sfix16_En14
  CONSTANT coeffphase1_19                 : signed(15 DOWNTO 0) := to_signed(254, 16); -- sfix16_En14
  CONSTANT coeffphase1_20                 : signed(15 DOWNTO 0) := to_signed(-114, 16); -- sfix16_En14
  CONSTANT coeffphase1_21                 : signed(15 DOWNTO 0) := to_signed(26, 16); -- sfix16_En14
  CONSTANT coeffphase1_22                 : signed(15 DOWNTO 0) := to_signed(27, 16); -- sfix16_En14
  CONSTANT coeffphase1_23                 : signed(15 DOWNTO 0) := to_signed(-58, 16); -- sfix16_En14
  CONSTANT coeffphase1_24                 : signed(15 DOWNTO 0) := to_signed(437, 16); -- sfix16_En14
  CONSTANT coeffphase2_1                  : signed(15 DOWNTO 0) := to_signed(437, 16); -- sfix16_En14
  CONSTANT coeffphase2_2                  : signed(15 DOWNTO 0) := to_signed(-58, 16); -- sfix16_En14
  CONSTANT coeffphase2_3                  : signed(15 DOWNTO 0) := to_signed(27, 16); -- sfix16_En14
  CONSTANT coeffphase2_4                  : signed(15 DOWNTO 0) := to_signed(26, 16); -- sfix16_En14
  CONSTANT coeffphase2_5                  : signed(15 DOWNTO 0) := to_signed(-114, 16); -- sfix16_En14
  CONSTANT coeffphase2_6                  : signed(15 DOWNTO 0) := to_signed(254, 16); -- sfix16_En14
  CONSTANT coeffphase2_7                  : signed(15 DOWNTO 0) := to_signed(-466, 16); -- sfix16_En14
  CONSTANT coeffphase2_8                  : signed(15 DOWNTO 0) := to_signed(796, 16); -- sfix16_En14
  CONSTANT coeffphase2_9                  : signed(15 DOWNTO 0) := to_signed(-1336, 16); -- sfix16_En14
  CONSTANT coeffphase2_10                 : signed(15 DOWNTO 0) := to_signed(2354, 16); -- sfix16_En14
  CONSTANT coeffphase2_11                 : signed(15 DOWNTO 0) := to_signed(-4879, 16); -- sfix16_En14
  CONSTANT coeffphase2_12                 : signed(15 DOWNTO 0) := to_signed(16930, 16); -- sfix16_En14
  CONSTANT coeffphase2_13                 : signed(15 DOWNTO 0) := to_signed(4653, 16); -- sfix16_En14
  CONSTANT coeffphase2_14                 : signed(15 DOWNTO 0) := to_signed(-3111, 16); -- sfix16_En14
  CONSTANT coeffphase2_15                 : signed(15 DOWNTO 0) := to_signed(2226, 16); -- sfix16_En14
  CONSTANT coeffphase2_16                 : signed(15 DOWNTO 0) := to_signed(-1682, 16); -- sfix16_En14
  CONSTANT coeffphase2_17                 : signed(15 DOWNTO 0) := to_signed(1303, 16); -- sfix16_En14
  CONSTANT coeffphase2_18                 : signed(15 DOWNTO 0) := to_signed(-1018, 16); -- sfix16_En14
  CONSTANT coeffphase2_19                 : signed(15 DOWNTO 0) := to_signed(790, 16); -- sfix16_En14
  CONSTANT coeffphase2_20                 : signed(15 DOWNTO 0) := to_signed(-611, 16); -- sfix16_En14
  CONSTANT coeffphase2_21                 : signed(15 DOWNTO 0) := to_signed(466, 16); -- sfix16_En14
  CONSTANT coeffphase2_22                 : signed(15 DOWNTO 0) := to_signed(-375, 16); -- sfix16_En14
  CONSTANT coeffphase2_23                 : signed(15 DOWNTO 0) := to_signed(417, 16); -- sfix16_En14
  CONSTANT coeffphase2_24                 : signed(15 DOWNTO 0) := to_signed(161, 16); -- sfix16_En14

  -- Signals
  SIGNAL cur_count                        : unsigned(5 DOWNTO 0); -- ufix6
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_23                         : std_logic; -- boolean
  SIGNAL phase_23_1                       : std_logic; -- boolean
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 23); -- sfix16_En15
  SIGNAL tapsum_and                       : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL tapsum_and_1                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline0_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline1_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline2_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline4_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline5_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline6_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline7_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline8_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline9_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline10_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline11_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline12_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline13_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline14_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline15_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline16_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline18_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline19_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline20_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline21_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline22_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline23_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline0_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline1_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline2_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline3_cast             : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline4_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline5_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline7_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline8_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline9_cast_1           : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline10_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline11_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline12_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline13_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline14_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline15_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline16_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline17_cast            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline18_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline19_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline21_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline22_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL delay_pipeline23_cast_1          : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL inputmux                         : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL product1                         : signed(32 DOWNTO 0); -- sfix33_En29
  SIGNAL product1_mux                     : signed(15 DOWNTO 0); -- sfix16_En14
  SIGNAL sumofproducts                    : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL sumofproducts_cast               : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL acc_sum                          : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL accreg_in                        : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL accreg_out                       : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL add_temp                         : signed(37 DOWNTO 0); -- sfix38_En29
  SIGNAL accreg_final                     : signed(36 DOWNTO 0); -- sfix37_En29
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(45, 6);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(45, 6) THEN
          cur_count <= to_unsigned(0, 6);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 6);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 6) AND clk_enable = '1' ELSE '0';

  phase_23 <= '1' WHEN  (((cur_count = to_unsigned(24, 6))  OR
                          (cur_count = to_unsigned(1, 6)))  AND clk_enable = '1') ELSE '0';

  phase_23_1 <= '1' WHEN  (((cur_count = to_unsigned(25, 6))  OR
                            (cur_count = to_unsigned(2, 6)))  AND clk_enable = '1') ELSE '0';

  --   ---------------- Delay Registers ----------------

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 23) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 23) <= delay_pipeline(0 TO 22);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  -- Adding (or subtracting) the taps based on the symmetry (or asymmetry)

  tapsum_and <= resize(delay_pipeline(3), 17) - resize(delay_pipeline(17), 17);

  tapsum_and_1 <= resize(delay_pipeline(6), 17) - resize(delay_pipeline(20), 17);

  -- Mux(es) to select the input taps for multipliers 

  delay_pipeline0_cast <= resize(delay_pipeline(0), 17);

  delay_pipeline1_cast <= resize(delay_pipeline(1), 17);

  delay_pipeline2_cast <= resize(delay_pipeline(2), 17);

  delay_pipeline4_cast <= resize(delay_pipeline(4), 17);

  delay_pipeline5_cast <= resize(delay_pipeline(5), 17);

  delay_pipeline6_cast <= resize(delay_pipeline(6), 17);

  delay_pipeline7_cast <= resize(delay_pipeline(7), 17);

  delay_pipeline8_cast <= resize(delay_pipeline(8), 17);

  delay_pipeline9_cast <= resize(delay_pipeline(9), 17);

  delay_pipeline10_cast <= resize(delay_pipeline(10), 17);

  delay_pipeline11_cast <= resize(delay_pipeline(11), 17);

  delay_pipeline12_cast <= resize(delay_pipeline(12), 17);

  delay_pipeline13_cast <= resize(delay_pipeline(13), 17);

  delay_pipeline14_cast <= resize(delay_pipeline(14), 17);

  delay_pipeline15_cast <= resize(delay_pipeline(15), 17);

  delay_pipeline16_cast <= resize(delay_pipeline(16), 17);

  delay_pipeline18_cast <= resize(delay_pipeline(18), 17);

  delay_pipeline19_cast <= resize(delay_pipeline(19), 17);

  delay_pipeline20_cast <= resize(delay_pipeline(20), 17);

  delay_pipeline21_cast <= resize(delay_pipeline(21), 17);

  delay_pipeline22_cast <= resize(delay_pipeline(22), 17);

  delay_pipeline23_cast <= resize(delay_pipeline(23), 17);

  delay_pipeline0_cast_1 <= resize(delay_pipeline(0), 17);

  delay_pipeline1_cast_1 <= resize(delay_pipeline(1), 17);

  delay_pipeline2_cast_1 <= resize(delay_pipeline(2), 17);

  delay_pipeline3_cast <= resize(delay_pipeline(3), 17);

  delay_pipeline4_cast_1 <= resize(delay_pipeline(4), 17);

  delay_pipeline5_cast_1 <= resize(delay_pipeline(5), 17);

  delay_pipeline7_cast_1 <= resize(delay_pipeline(7), 17);

  delay_pipeline8_cast_1 <= resize(delay_pipeline(8), 17);

  delay_pipeline9_cast_1 <= resize(delay_pipeline(9), 17);

  delay_pipeline10_cast_1 <= resize(delay_pipeline(10), 17);

  delay_pipeline11_cast_1 <= resize(delay_pipeline(11), 17);

  delay_pipeline12_cast_1 <= resize(delay_pipeline(12), 17);

  delay_pipeline13_cast_1 <= resize(delay_pipeline(13), 17);

  delay_pipeline14_cast_1 <= resize(delay_pipeline(14), 17);

  delay_pipeline15_cast_1 <= resize(delay_pipeline(15), 17);

  delay_pipeline16_cast_1 <= resize(delay_pipeline(16), 17);

  delay_pipeline17_cast <= resize(delay_pipeline(17), 17);

  delay_pipeline18_cast_1 <= resize(delay_pipeline(18), 17);

  delay_pipeline19_cast_1 <= resize(delay_pipeline(19), 17);

  delay_pipeline21_cast_1 <= resize(delay_pipeline(21), 17);

  delay_pipeline22_cast_1 <= resize(delay_pipeline(22), 17);

  delay_pipeline23_cast_1 <= resize(delay_pipeline(23), 17);

  inputmux <= delay_pipeline0_cast WHEN ( cur_count = to_unsigned(1, 6) ) ELSE
                   delay_pipeline1_cast WHEN ( cur_count = to_unsigned(2, 6) ) ELSE
                   delay_pipeline2_cast WHEN ( cur_count = to_unsigned(3, 6) ) ELSE
                   tapsum_and WHEN ( cur_count = to_unsigned(4, 6) ) ELSE
                   delay_pipeline4_cast WHEN ( cur_count = to_unsigned(5, 6) ) ELSE
                   delay_pipeline5_cast WHEN ( cur_count = to_unsigned(6, 6) ) ELSE
                   delay_pipeline6_cast WHEN ( cur_count = to_unsigned(7, 6) ) ELSE
                   delay_pipeline7_cast WHEN ( cur_count = to_unsigned(8, 6) ) ELSE
                   delay_pipeline8_cast WHEN ( cur_count = to_unsigned(9, 6) ) ELSE
                   delay_pipeline9_cast WHEN ( cur_count = to_unsigned(10, 6) ) ELSE
                   delay_pipeline10_cast WHEN ( cur_count = to_unsigned(11, 6) ) ELSE
                   delay_pipeline11_cast WHEN ( cur_count = to_unsigned(12, 6) ) ELSE
                   delay_pipeline12_cast WHEN ( cur_count = to_unsigned(13, 6) ) ELSE
                   delay_pipeline13_cast WHEN ( cur_count = to_unsigned(14, 6) ) ELSE
                   delay_pipeline14_cast WHEN ( cur_count = to_unsigned(15, 6) ) ELSE
                   delay_pipeline15_cast WHEN ( cur_count = to_unsigned(16, 6) ) ELSE
                   delay_pipeline16_cast WHEN ( cur_count = to_unsigned(17, 6) ) ELSE
                   delay_pipeline18_cast WHEN ( cur_count = to_unsigned(18, 6) ) ELSE
                   delay_pipeline19_cast WHEN ( cur_count = to_unsigned(19, 6) ) ELSE
                   delay_pipeline20_cast WHEN ( cur_count = to_unsigned(20, 6) ) ELSE
                   delay_pipeline21_cast WHEN ( cur_count = to_unsigned(21, 6) ) ELSE
                   delay_pipeline22_cast WHEN ( cur_count = to_unsigned(22, 6) ) ELSE
                   delay_pipeline23_cast WHEN ( cur_count = to_unsigned(23, 6) ) ELSE
                   delay_pipeline0_cast_1 WHEN ( cur_count = to_unsigned(24, 6) ) ELSE
                   delay_pipeline1_cast_1 WHEN ( cur_count = to_unsigned(25, 6) ) ELSE
                   delay_pipeline2_cast_1 WHEN ( cur_count = to_unsigned(26, 6) ) ELSE
                   delay_pipeline3_cast WHEN ( cur_count = to_unsigned(27, 6) ) ELSE
                   delay_pipeline4_cast_1 WHEN ( cur_count = to_unsigned(28, 6) ) ELSE
                   delay_pipeline5_cast_1 WHEN ( cur_count = to_unsigned(29, 6) ) ELSE
                   tapsum_and_1 WHEN ( cur_count = to_unsigned(30, 6) ) ELSE
                   delay_pipeline7_cast_1 WHEN ( cur_count = to_unsigned(31, 6) ) ELSE
                   delay_pipeline8_cast_1 WHEN ( cur_count = to_unsigned(32, 6) ) ELSE
                   delay_pipeline9_cast_1 WHEN ( cur_count = to_unsigned(33, 6) ) ELSE
                   delay_pipeline10_cast_1 WHEN ( cur_count = to_unsigned(34, 6) ) ELSE
                   delay_pipeline11_cast_1 WHEN ( cur_count = to_unsigned(35, 6) ) ELSE
                   delay_pipeline12_cast_1 WHEN ( cur_count = to_unsigned(36, 6) ) ELSE
                   delay_pipeline13_cast_1 WHEN ( cur_count = to_unsigned(37, 6) ) ELSE
                   delay_pipeline14_cast_1 WHEN ( cur_count = to_unsigned(38, 6) ) ELSE
                   delay_pipeline15_cast_1 WHEN ( cur_count = to_unsigned(39, 6) ) ELSE
                   delay_pipeline16_cast_1 WHEN ( cur_count = to_unsigned(40, 6) ) ELSE
                   delay_pipeline17_cast WHEN ( cur_count = to_unsigned(41, 6) ) ELSE
                   delay_pipeline18_cast_1 WHEN ( cur_count = to_unsigned(42, 6) ) ELSE
                   delay_pipeline19_cast_1 WHEN ( cur_count = to_unsigned(43, 6) ) ELSE
                   delay_pipeline21_cast_1 WHEN ( cur_count = to_unsigned(44, 6) ) ELSE
                   delay_pipeline22_cast_1 WHEN ( cur_count = to_unsigned(45, 6) ) ELSE
                   delay_pipeline23_cast_1;

  product1_mux <= coeffphase1_1 WHEN ( cur_count = to_unsigned(1, 6) ) ELSE
                       coeffphase1_2 WHEN ( cur_count = to_unsigned(2, 6) ) ELSE
                       coeffphase1_3 WHEN ( cur_count = to_unsigned(3, 6) ) ELSE
                       coeffphase1_4 WHEN ( cur_count = to_unsigned(4, 6) ) ELSE
                       coeffphase1_5 WHEN ( cur_count = to_unsigned(5, 6) ) ELSE
                       coeffphase1_6 WHEN ( cur_count = to_unsigned(6, 6) ) ELSE
                       coeffphase1_7 WHEN ( cur_count = to_unsigned(7, 6) ) ELSE
                       coeffphase1_8 WHEN ( cur_count = to_unsigned(8, 6) ) ELSE
                       coeffphase1_9 WHEN ( cur_count = to_unsigned(9, 6) ) ELSE
                       coeffphase1_10 WHEN ( cur_count = to_unsigned(10, 6) ) ELSE
                       coeffphase1_11 WHEN ( cur_count = to_unsigned(11, 6) ) ELSE
                       coeffphase1_12 WHEN ( cur_count = to_unsigned(12, 6) ) ELSE
                       coeffphase1_13 WHEN ( cur_count = to_unsigned(13, 6) ) ELSE
                       coeffphase1_14 WHEN ( cur_count = to_unsigned(14, 6) ) ELSE
                       coeffphase1_15 WHEN ( cur_count = to_unsigned(15, 6) ) ELSE
                       coeffphase1_16 WHEN ( cur_count = to_unsigned(16, 6) ) ELSE
                       coeffphase1_17 WHEN ( cur_count = to_unsigned(17, 6) ) ELSE
                       coeffphase1_19 WHEN ( cur_count = to_unsigned(18, 6) ) ELSE
                       coeffphase1_20 WHEN ( cur_count = to_unsigned(19, 6) ) ELSE
                       coeffphase1_21 WHEN ( cur_count = to_unsigned(20, 6) ) ELSE
                       coeffphase1_22 WHEN ( cur_count = to_unsigned(21, 6) ) ELSE
                       coeffphase1_23 WHEN ( cur_count = to_unsigned(22, 6) ) ELSE
                       coeffphase1_24 WHEN ( cur_count = to_unsigned(23, 6) ) ELSE
                       coeffphase2_1 WHEN ( cur_count = to_unsigned(24, 6) ) ELSE
                       coeffphase2_2 WHEN ( cur_count = to_unsigned(25, 6) ) ELSE
                       coeffphase2_3 WHEN ( cur_count = to_unsigned(26, 6) ) ELSE
                       coeffphase2_4 WHEN ( cur_count = to_unsigned(27, 6) ) ELSE
                       coeffphase2_5 WHEN ( cur_count = to_unsigned(28, 6) ) ELSE
                       coeffphase2_6 WHEN ( cur_count = to_unsigned(29, 6) ) ELSE
                       coeffphase2_7 WHEN ( cur_count = to_unsigned(30, 6) ) ELSE
                       coeffphase2_8 WHEN ( cur_count = to_unsigned(31, 6) ) ELSE
                       coeffphase2_9 WHEN ( cur_count = to_unsigned(32, 6) ) ELSE
                       coeffphase2_10 WHEN ( cur_count = to_unsigned(33, 6) ) ELSE
                       coeffphase2_11 WHEN ( cur_count = to_unsigned(34, 6) ) ELSE
                       coeffphase2_12 WHEN ( cur_count = to_unsigned(35, 6) ) ELSE
                       coeffphase2_13 WHEN ( cur_count = to_unsigned(36, 6) ) ELSE
                       coeffphase2_14 WHEN ( cur_count = to_unsigned(37, 6) ) ELSE
                       coeffphase2_15 WHEN ( cur_count = to_unsigned(38, 6) ) ELSE
                       coeffphase2_16 WHEN ( cur_count = to_unsigned(39, 6) ) ELSE
                       coeffphase2_17 WHEN ( cur_count = to_unsigned(40, 6) ) ELSE
                       coeffphase2_18 WHEN ( cur_count = to_unsigned(41, 6) ) ELSE
                       coeffphase2_19 WHEN ( cur_count = to_unsigned(42, 6) ) ELSE
                       coeffphase2_20 WHEN ( cur_count = to_unsigned(43, 6) ) ELSE
                       coeffphase2_22 WHEN ( cur_count = to_unsigned(44, 6) ) ELSE
                       coeffphase2_23 WHEN ( cur_count = to_unsigned(45, 6) ) ELSE
                       coeffphase2_24;
  product1 <= inputmux * product1_mux;



  -- Add the products in linear fashion

  sumofproducts <= resize(product1, 37);

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= sumofproducts;

  -- Accumulator register with a mux to reset it with the first addend

  add_temp <= resize(sumofproducts_cast, 38) + resize(accreg_out, 38);
  acc_sum <= add_temp(36 DOWNTO 0);

  accreg_in <= sumofproducts_cast WHEN ( phase_23 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_23 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= resize(shift_right(accreg_final(29 DOWNTO 0) + ( "0" & (accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14) & NOT accreg_final(14))), 14), 16);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_23_1 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  ce_out <= phase_0;
  filter_out <= std_logic_vector(output_register);
END rtl;
