-- -------------------------------------------------------------
--
-- Module: rx_hilb
-- Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
-- Generated on: 2019-05-19 11:29:50
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- Name: rx_hilb
-- SerialPartition: 92
-- TestBenchName: rx_hilb_tb
-- TestBenchStimulus: impulse step ramp chirp noise 
-- GenerateHDLTestBench: off

-- Filter Specifications:
--
-- Sample Rate      : N/A (normalized frequency)
-- Response         : Hilbert Transformer
-- Specification    : TW,Ap
-- Transition Width : 0.05
-- Passband Ripple  : 0.2 dB
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 92
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 92
-- Stable            : Yes
-- Linear Phase      : Yes (Type 4)
-- Arithmetic        : fixed
-- Numerator         : s16,15 -> [-1 1)
-- Input             : s16,15 -> [-1 1)
-- Filter Internals  : Specify Precision
--   Output          : s16,15 -> [-1 1)
--   Product         : s32,29 -> [-4 4)
--   Accumulator     : s40,29 -> [-1024 1024)
--   Round Mode      : convergent
--   Overflow Mode   : wrap
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY rx_hilb IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
         );

END rx_hilb;


----------------------------------------------------------------
--Module Architecture: rx_hilb
----------------------------------------------------------------
ARCHITECTURE rtl OF rx_hilb IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  -- Constants
  CONSTANT coeff1                         : signed(15 DOWNTO 0) := to_signed(-214, 16); -- sfix16_En15
  CONSTANT coeff2                         : signed(15 DOWNTO 0) := to_signed(-21, 16); -- sfix16_En15
  CONSTANT coeff3                         : signed(15 DOWNTO 0) := to_signed(-82, 16); -- sfix16_En15
  CONSTANT coeff4                         : signed(15 DOWNTO 0) := to_signed(-29, 16); -- sfix16_En15
  CONSTANT coeff5                         : signed(15 DOWNTO 0) := to_signed(-99, 16); -- sfix16_En15
  CONSTANT coeff6                         : signed(15 DOWNTO 0) := to_signed(-39, 16); -- sfix16_En15
  CONSTANT coeff7                         : signed(15 DOWNTO 0) := to_signed(-117, 16); -- sfix16_En15
  CONSTANT coeff8                         : signed(15 DOWNTO 0) := to_signed(-51, 16); -- sfix16_En15
  CONSTANT coeff9                         : signed(15 DOWNTO 0) := to_signed(-138, 16); -- sfix16_En15
  CONSTANT coeff10                        : signed(15 DOWNTO 0) := to_signed(-65, 16); -- sfix16_En15
  CONSTANT coeff11                        : signed(15 DOWNTO 0) := to_signed(-161, 16); -- sfix16_En15
  CONSTANT coeff12                        : signed(15 DOWNTO 0) := to_signed(-82, 16); -- sfix16_En15
  CONSTANT coeff13                        : signed(15 DOWNTO 0) := to_signed(-187, 16); -- sfix16_En15
  CONSTANT coeff14                        : signed(15 DOWNTO 0) := to_signed(-101, 16); -- sfix16_En15
  CONSTANT coeff15                        : signed(15 DOWNTO 0) := to_signed(-216, 16); -- sfix16_En15
  CONSTANT coeff16                        : signed(15 DOWNTO 0) := to_signed(-123, 16); -- sfix16_En15
  CONSTANT coeff17                        : signed(15 DOWNTO 0) := to_signed(-249, 16); -- sfix16_En15
  CONSTANT coeff18                        : signed(15 DOWNTO 0) := to_signed(-149, 16); -- sfix16_En15
  CONSTANT coeff19                        : signed(15 DOWNTO 0) := to_signed(-285, 16); -- sfix16_En15
  CONSTANT coeff20                        : signed(15 DOWNTO 0) := to_signed(-180, 16); -- sfix16_En15
  CONSTANT coeff21                        : signed(15 DOWNTO 0) := to_signed(-326, 16); -- sfix16_En15
  CONSTANT coeff22                        : signed(15 DOWNTO 0) := to_signed(-216, 16); -- sfix16_En15
  CONSTANT coeff23                        : signed(15 DOWNTO 0) := to_signed(-373, 16); -- sfix16_En15
  CONSTANT coeff24                        : signed(15 DOWNTO 0) := to_signed(-259, 16); -- sfix16_En15
  CONSTANT coeff25                        : signed(15 DOWNTO 0) := to_signed(-427, 16); -- sfix16_En15
  CONSTANT coeff26                        : signed(15 DOWNTO 0) := to_signed(-310, 16); -- sfix16_En15
  CONSTANT coeff27                        : signed(15 DOWNTO 0) := to_signed(-490, 16); -- sfix16_En15
  CONSTANT coeff28                        : signed(15 DOWNTO 0) := to_signed(-372, 16); -- sfix16_En15
  CONSTANT coeff29                        : signed(15 DOWNTO 0) := to_signed(-564, 16); -- sfix16_En15
  CONSTANT coeff30                        : signed(15 DOWNTO 0) := to_signed(-448, 16); -- sfix16_En15
  CONSTANT coeff31                        : signed(15 DOWNTO 0) := to_signed(-655, 16); -- sfix16_En15
  CONSTANT coeff32                        : signed(15 DOWNTO 0) := to_signed(-543, 16); -- sfix16_En15
  CONSTANT coeff33                        : signed(15 DOWNTO 0) := to_signed(-769, 16); -- sfix16_En15
  CONSTANT coeff34                        : signed(15 DOWNTO 0) := to_signed(-668, 16); -- sfix16_En15
  CONSTANT coeff35                        : signed(15 DOWNTO 0) := to_signed(-918, 16); -- sfix16_En15
  CONSTANT coeff36                        : signed(15 DOWNTO 0) := to_signed(-837, 16); -- sfix16_En15
  CONSTANT coeff37                        : signed(15 DOWNTO 0) := to_signed(-1123, 16); -- sfix16_En15
  CONSTANT coeff38                        : signed(15 DOWNTO 0) := to_signed(-1081, 16); -- sfix16_En15
  CONSTANT coeff39                        : signed(15 DOWNTO 0) := to_signed(-1430, 16); -- sfix16_En15
  CONSTANT coeff40                        : signed(15 DOWNTO 0) := to_signed(-1471, 16); -- sfix16_En15
  CONSTANT coeff41                        : signed(15 DOWNTO 0) := to_signed(-1950, 16); -- sfix16_En15
  CONSTANT coeff42                        : signed(15 DOWNTO 0) := to_signed(-2196, 16); -- sfix16_En15
  CONSTANT coeff43                        : signed(15 DOWNTO 0) := to_signed(-3048, 16); -- sfix16_En15
  CONSTANT coeff44                        : signed(15 DOWNTO 0) := to_signed(-4063, 16); -- sfix16_En15
  CONSTANT coeff45                        : signed(15 DOWNTO 0) := to_signed(-7036, 16); -- sfix16_En15
  CONSTANT coeff46                        : signed(15 DOWNTO 0) := to_signed(-20765, 16); -- sfix16_En15
  CONSTANT coeff47                        : signed(15 DOWNTO 0) := to_signed(20765, 16); -- sfix16_En15
  CONSTANT coeff48                        : signed(15 DOWNTO 0) := to_signed(7036, 16); -- sfix16_En15
  CONSTANT coeff49                        : signed(15 DOWNTO 0) := to_signed(4063, 16); -- sfix16_En15
  CONSTANT coeff50                        : signed(15 DOWNTO 0) := to_signed(3048, 16); -- sfix16_En15
  CONSTANT coeff51                        : signed(15 DOWNTO 0) := to_signed(2196, 16); -- sfix16_En15
  CONSTANT coeff52                        : signed(15 DOWNTO 0) := to_signed(1950, 16); -- sfix16_En15
  CONSTANT coeff53                        : signed(15 DOWNTO 0) := to_signed(1471, 16); -- sfix16_En15
  CONSTANT coeff54                        : signed(15 DOWNTO 0) := to_signed(1430, 16); -- sfix16_En15
  CONSTANT coeff55                        : signed(15 DOWNTO 0) := to_signed(1081, 16); -- sfix16_En15
  CONSTANT coeff56                        : signed(15 DOWNTO 0) := to_signed(1123, 16); -- sfix16_En15
  CONSTANT coeff57                        : signed(15 DOWNTO 0) := to_signed(837, 16); -- sfix16_En15
  CONSTANT coeff58                        : signed(15 DOWNTO 0) := to_signed(918, 16); -- sfix16_En15
  CONSTANT coeff59                        : signed(15 DOWNTO 0) := to_signed(668, 16); -- sfix16_En15
  CONSTANT coeff60                        : signed(15 DOWNTO 0) := to_signed(769, 16); -- sfix16_En15
  CONSTANT coeff61                        : signed(15 DOWNTO 0) := to_signed(543, 16); -- sfix16_En15
  CONSTANT coeff62                        : signed(15 DOWNTO 0) := to_signed(655, 16); -- sfix16_En15
  CONSTANT coeff63                        : signed(15 DOWNTO 0) := to_signed(448, 16); -- sfix16_En15
  CONSTANT coeff64                        : signed(15 DOWNTO 0) := to_signed(564, 16); -- sfix16_En15
  CONSTANT coeff65                        : signed(15 DOWNTO 0) := to_signed(372, 16); -- sfix16_En15
  CONSTANT coeff66                        : signed(15 DOWNTO 0) := to_signed(490, 16); -- sfix16_En15
  CONSTANT coeff67                        : signed(15 DOWNTO 0) := to_signed(310, 16); -- sfix16_En15
  CONSTANT coeff68                        : signed(15 DOWNTO 0) := to_signed(427, 16); -- sfix16_En15
  CONSTANT coeff69                        : signed(15 DOWNTO 0) := to_signed(259, 16); -- sfix16_En15
  CONSTANT coeff70                        : signed(15 DOWNTO 0) := to_signed(373, 16); -- sfix16_En15
  CONSTANT coeff71                        : signed(15 DOWNTO 0) := to_signed(216, 16); -- sfix16_En15
  CONSTANT coeff72                        : signed(15 DOWNTO 0) := to_signed(326, 16); -- sfix16_En15
  CONSTANT coeff73                        : signed(15 DOWNTO 0) := to_signed(180, 16); -- sfix16_En15
  CONSTANT coeff74                        : signed(15 DOWNTO 0) := to_signed(285, 16); -- sfix16_En15
  CONSTANT coeff75                        : signed(15 DOWNTO 0) := to_signed(149, 16); -- sfix16_En15
  CONSTANT coeff76                        : signed(15 DOWNTO 0) := to_signed(249, 16); -- sfix16_En15
  CONSTANT coeff77                        : signed(15 DOWNTO 0) := to_signed(123, 16); -- sfix16_En15
  CONSTANT coeff78                        : signed(15 DOWNTO 0) := to_signed(216, 16); -- sfix16_En15
  CONSTANT coeff79                        : signed(15 DOWNTO 0) := to_signed(101, 16); -- sfix16_En15
  CONSTANT coeff80                        : signed(15 DOWNTO 0) := to_signed(187, 16); -- sfix16_En15
  CONSTANT coeff81                        : signed(15 DOWNTO 0) := to_signed(82, 16); -- sfix16_En15
  CONSTANT coeff82                        : signed(15 DOWNTO 0) := to_signed(161, 16); -- sfix16_En15
  CONSTANT coeff83                        : signed(15 DOWNTO 0) := to_signed(65, 16); -- sfix16_En15
  CONSTANT coeff84                        : signed(15 DOWNTO 0) := to_signed(138, 16); -- sfix16_En15
  CONSTANT coeff85                        : signed(15 DOWNTO 0) := to_signed(51, 16); -- sfix16_En15
  CONSTANT coeff86                        : signed(15 DOWNTO 0) := to_signed(117, 16); -- sfix16_En15
  CONSTANT coeff87                        : signed(15 DOWNTO 0) := to_signed(39, 16); -- sfix16_En15
  CONSTANT coeff88                        : signed(15 DOWNTO 0) := to_signed(99, 16); -- sfix16_En15
  CONSTANT coeff89                        : signed(15 DOWNTO 0) := to_signed(29, 16); -- sfix16_En15
  CONSTANT coeff90                        : signed(15 DOWNTO 0) := to_signed(82, 16); -- sfix16_En15
  CONSTANT coeff91                        : signed(15 DOWNTO 0) := to_signed(21, 16); -- sfix16_En15
  CONSTANT coeff92                        : signed(15 DOWNTO 0) := to_signed(214, 16); -- sfix16_En15

  -- Signals
  SIGNAL cur_count                        : unsigned(6 DOWNTO 0); -- ufix7
  SIGNAL phase_91                         : std_logic; -- boolean
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 91); -- sfix16_En15
  SIGNAL inputmux_1                       : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL acc_final                        : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL acc_out_1                        : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL product_1                        : signed(31 DOWNTO 0); -- sfix32_En29
  SIGNAL product_1_mux                    : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL mul_temp                         : signed(31 DOWNTO 0); -- sfix32_En30
  SIGNAL prod_typeconvert_1               : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL acc_sum_1                        : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL acc_in_1                         : signed(39 DOWNTO 0); -- sfix40_En29
  SIGNAL add_temp                         : signed(40 DOWNTO 0); -- sfix41_En29
  SIGNAL output_typeconvert               : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL output_register                  : signed(15 DOWNTO 0); -- sfix16_En15


BEGIN

  -- Block Statements
  Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(91, 7);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(91, 7) THEN
          cur_count <= to_unsigned(0, 7);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 7);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter_process;

  phase_91 <= '1' WHEN cur_count = to_unsigned(91, 7) AND clk_enable = '1' ELSE '0';

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 7) AND clk_enable = '1' ELSE '0';

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 91) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_91 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 91) <= delay_pipeline(0 TO 90);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  inputmux_1 <= delay_pipeline(0) WHEN ( cur_count = to_unsigned(0, 7) ) ELSE
                     delay_pipeline(1) WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                     delay_pipeline(2) WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                     delay_pipeline(3) WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                     delay_pipeline(4) WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                     delay_pipeline(5) WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                     delay_pipeline(6) WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                     delay_pipeline(7) WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                     delay_pipeline(8) WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                     delay_pipeline(9) WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                     delay_pipeline(10) WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                     delay_pipeline(11) WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                     delay_pipeline(12) WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                     delay_pipeline(13) WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                     delay_pipeline(14) WHEN ( cur_count = to_unsigned(14, 7) ) ELSE
                     delay_pipeline(15) WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                     delay_pipeline(16) WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                     delay_pipeline(17) WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                     delay_pipeline(18) WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                     delay_pipeline(19) WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                     delay_pipeline(20) WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                     delay_pipeline(21) WHEN ( cur_count = to_unsigned(21, 7) ) ELSE
                     delay_pipeline(22) WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                     delay_pipeline(23) WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                     delay_pipeline(24) WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                     delay_pipeline(25) WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                     delay_pipeline(26) WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                     delay_pipeline(27) WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                     delay_pipeline(28) WHEN ( cur_count = to_unsigned(28, 7) ) ELSE
                     delay_pipeline(29) WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                     delay_pipeline(30) WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                     delay_pipeline(31) WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                     delay_pipeline(32) WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                     delay_pipeline(33) WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                     delay_pipeline(34) WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                     delay_pipeline(35) WHEN ( cur_count = to_unsigned(35, 7) ) ELSE
                     delay_pipeline(36) WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                     delay_pipeline(37) WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                     delay_pipeline(38) WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                     delay_pipeline(39) WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                     delay_pipeline(40) WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                     delay_pipeline(41) WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                     delay_pipeline(42) WHEN ( cur_count = to_unsigned(42, 7) ) ELSE
                     delay_pipeline(43) WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                     delay_pipeline(44) WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                     delay_pipeline(45) WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                     delay_pipeline(46) WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                     delay_pipeline(47) WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                     delay_pipeline(48) WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                     delay_pipeline(49) WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                     delay_pipeline(50) WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                     delay_pipeline(51) WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                     delay_pipeline(52) WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                     delay_pipeline(53) WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                     delay_pipeline(54) WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                     delay_pipeline(55) WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                     delay_pipeline(56) WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                     delay_pipeline(57) WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                     delay_pipeline(58) WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                     delay_pipeline(59) WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                     delay_pipeline(60) WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                     delay_pipeline(61) WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                     delay_pipeline(62) WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                     delay_pipeline(63) WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                     delay_pipeline(64) WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                     delay_pipeline(65) WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                     delay_pipeline(66) WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                     delay_pipeline(67) WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                     delay_pipeline(68) WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                     delay_pipeline(69) WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                     delay_pipeline(70) WHEN ( cur_count = to_unsigned(70, 7) ) ELSE
                     delay_pipeline(71) WHEN ( cur_count = to_unsigned(71, 7) ) ELSE
                     delay_pipeline(72) WHEN ( cur_count = to_unsigned(72, 7) ) ELSE
                     delay_pipeline(73) WHEN ( cur_count = to_unsigned(73, 7) ) ELSE
                     delay_pipeline(74) WHEN ( cur_count = to_unsigned(74, 7) ) ELSE
                     delay_pipeline(75) WHEN ( cur_count = to_unsigned(75, 7) ) ELSE
                     delay_pipeline(76) WHEN ( cur_count = to_unsigned(76, 7) ) ELSE
                     delay_pipeline(77) WHEN ( cur_count = to_unsigned(77, 7) ) ELSE
                     delay_pipeline(78) WHEN ( cur_count = to_unsigned(78, 7) ) ELSE
                     delay_pipeline(79) WHEN ( cur_count = to_unsigned(79, 7) ) ELSE
                     delay_pipeline(80) WHEN ( cur_count = to_unsigned(80, 7) ) ELSE
                     delay_pipeline(81) WHEN ( cur_count = to_unsigned(81, 7) ) ELSE
                     delay_pipeline(82) WHEN ( cur_count = to_unsigned(82, 7) ) ELSE
                     delay_pipeline(83) WHEN ( cur_count = to_unsigned(83, 7) ) ELSE
                     delay_pipeline(84) WHEN ( cur_count = to_unsigned(84, 7) ) ELSE
                     delay_pipeline(85) WHEN ( cur_count = to_unsigned(85, 7) ) ELSE
                     delay_pipeline(86) WHEN ( cur_count = to_unsigned(86, 7) ) ELSE
                     delay_pipeline(87) WHEN ( cur_count = to_unsigned(87, 7) ) ELSE
                     delay_pipeline(88) WHEN ( cur_count = to_unsigned(88, 7) ) ELSE
                     delay_pipeline(89) WHEN ( cur_count = to_unsigned(89, 7) ) ELSE
                     delay_pipeline(90) WHEN ( cur_count = to_unsigned(90, 7) ) ELSE
                     delay_pipeline(91);

  --   ------------------ Serial partition # 1 ------------------

  product_1_mux <= coeff1 WHEN ( cur_count = to_unsigned(0, 7) ) ELSE
                        coeff2 WHEN ( cur_count = to_unsigned(1, 7) ) ELSE
                        coeff3 WHEN ( cur_count = to_unsigned(2, 7) ) ELSE
                        coeff4 WHEN ( cur_count = to_unsigned(3, 7) ) ELSE
                        coeff5 WHEN ( cur_count = to_unsigned(4, 7) ) ELSE
                        coeff6 WHEN ( cur_count = to_unsigned(5, 7) ) ELSE
                        coeff7 WHEN ( cur_count = to_unsigned(6, 7) ) ELSE
                        coeff8 WHEN ( cur_count = to_unsigned(7, 7) ) ELSE
                        coeff9 WHEN ( cur_count = to_unsigned(8, 7) ) ELSE
                        coeff10 WHEN ( cur_count = to_unsigned(9, 7) ) ELSE
                        coeff11 WHEN ( cur_count = to_unsigned(10, 7) ) ELSE
                        coeff12 WHEN ( cur_count = to_unsigned(11, 7) ) ELSE
                        coeff13 WHEN ( cur_count = to_unsigned(12, 7) ) ELSE
                        coeff14 WHEN ( cur_count = to_unsigned(13, 7) ) ELSE
                        coeff15 WHEN ( cur_count = to_unsigned(14, 7) ) ELSE
                        coeff16 WHEN ( cur_count = to_unsigned(15, 7) ) ELSE
                        coeff17 WHEN ( cur_count = to_unsigned(16, 7) ) ELSE
                        coeff18 WHEN ( cur_count = to_unsigned(17, 7) ) ELSE
                        coeff19 WHEN ( cur_count = to_unsigned(18, 7) ) ELSE
                        coeff20 WHEN ( cur_count = to_unsigned(19, 7) ) ELSE
                        coeff21 WHEN ( cur_count = to_unsigned(20, 7) ) ELSE
                        coeff22 WHEN ( cur_count = to_unsigned(21, 7) ) ELSE
                        coeff23 WHEN ( cur_count = to_unsigned(22, 7) ) ELSE
                        coeff24 WHEN ( cur_count = to_unsigned(23, 7) ) ELSE
                        coeff25 WHEN ( cur_count = to_unsigned(24, 7) ) ELSE
                        coeff26 WHEN ( cur_count = to_unsigned(25, 7) ) ELSE
                        coeff27 WHEN ( cur_count = to_unsigned(26, 7) ) ELSE
                        coeff28 WHEN ( cur_count = to_unsigned(27, 7) ) ELSE
                        coeff29 WHEN ( cur_count = to_unsigned(28, 7) ) ELSE
                        coeff30 WHEN ( cur_count = to_unsigned(29, 7) ) ELSE
                        coeff31 WHEN ( cur_count = to_unsigned(30, 7) ) ELSE
                        coeff32 WHEN ( cur_count = to_unsigned(31, 7) ) ELSE
                        coeff33 WHEN ( cur_count = to_unsigned(32, 7) ) ELSE
                        coeff34 WHEN ( cur_count = to_unsigned(33, 7) ) ELSE
                        coeff35 WHEN ( cur_count = to_unsigned(34, 7) ) ELSE
                        coeff36 WHEN ( cur_count = to_unsigned(35, 7) ) ELSE
                        coeff37 WHEN ( cur_count = to_unsigned(36, 7) ) ELSE
                        coeff38 WHEN ( cur_count = to_unsigned(37, 7) ) ELSE
                        coeff39 WHEN ( cur_count = to_unsigned(38, 7) ) ELSE
                        coeff40 WHEN ( cur_count = to_unsigned(39, 7) ) ELSE
                        coeff41 WHEN ( cur_count = to_unsigned(40, 7) ) ELSE
                        coeff42 WHEN ( cur_count = to_unsigned(41, 7) ) ELSE
                        coeff43 WHEN ( cur_count = to_unsigned(42, 7) ) ELSE
                        coeff44 WHEN ( cur_count = to_unsigned(43, 7) ) ELSE
                        coeff45 WHEN ( cur_count = to_unsigned(44, 7) ) ELSE
                        coeff46 WHEN ( cur_count = to_unsigned(45, 7) ) ELSE
                        coeff47 WHEN ( cur_count = to_unsigned(46, 7) ) ELSE
                        coeff48 WHEN ( cur_count = to_unsigned(47, 7) ) ELSE
                        coeff49 WHEN ( cur_count = to_unsigned(48, 7) ) ELSE
                        coeff50 WHEN ( cur_count = to_unsigned(49, 7) ) ELSE
                        coeff51 WHEN ( cur_count = to_unsigned(50, 7) ) ELSE
                        coeff52 WHEN ( cur_count = to_unsigned(51, 7) ) ELSE
                        coeff53 WHEN ( cur_count = to_unsigned(52, 7) ) ELSE
                        coeff54 WHEN ( cur_count = to_unsigned(53, 7) ) ELSE
                        coeff55 WHEN ( cur_count = to_unsigned(54, 7) ) ELSE
                        coeff56 WHEN ( cur_count = to_unsigned(55, 7) ) ELSE
                        coeff57 WHEN ( cur_count = to_unsigned(56, 7) ) ELSE
                        coeff58 WHEN ( cur_count = to_unsigned(57, 7) ) ELSE
                        coeff59 WHEN ( cur_count = to_unsigned(58, 7) ) ELSE
                        coeff60 WHEN ( cur_count = to_unsigned(59, 7) ) ELSE
                        coeff61 WHEN ( cur_count = to_unsigned(60, 7) ) ELSE
                        coeff62 WHEN ( cur_count = to_unsigned(61, 7) ) ELSE
                        coeff63 WHEN ( cur_count = to_unsigned(62, 7) ) ELSE
                        coeff64 WHEN ( cur_count = to_unsigned(63, 7) ) ELSE
                        coeff65 WHEN ( cur_count = to_unsigned(64, 7) ) ELSE
                        coeff66 WHEN ( cur_count = to_unsigned(65, 7) ) ELSE
                        coeff67 WHEN ( cur_count = to_unsigned(66, 7) ) ELSE
                        coeff68 WHEN ( cur_count = to_unsigned(67, 7) ) ELSE
                        coeff69 WHEN ( cur_count = to_unsigned(68, 7) ) ELSE
                        coeff70 WHEN ( cur_count = to_unsigned(69, 7) ) ELSE
                        coeff71 WHEN ( cur_count = to_unsigned(70, 7) ) ELSE
                        coeff72 WHEN ( cur_count = to_unsigned(71, 7) ) ELSE
                        coeff73 WHEN ( cur_count = to_unsigned(72, 7) ) ELSE
                        coeff74 WHEN ( cur_count = to_unsigned(73, 7) ) ELSE
                        coeff75 WHEN ( cur_count = to_unsigned(74, 7) ) ELSE
                        coeff76 WHEN ( cur_count = to_unsigned(75, 7) ) ELSE
                        coeff77 WHEN ( cur_count = to_unsigned(76, 7) ) ELSE
                        coeff78 WHEN ( cur_count = to_unsigned(77, 7) ) ELSE
                        coeff79 WHEN ( cur_count = to_unsigned(78, 7) ) ELSE
                        coeff80 WHEN ( cur_count = to_unsigned(79, 7) ) ELSE
                        coeff81 WHEN ( cur_count = to_unsigned(80, 7) ) ELSE
                        coeff82 WHEN ( cur_count = to_unsigned(81, 7) ) ELSE
                        coeff83 WHEN ( cur_count = to_unsigned(82, 7) ) ELSE
                        coeff84 WHEN ( cur_count = to_unsigned(83, 7) ) ELSE
                        coeff85 WHEN ( cur_count = to_unsigned(84, 7) ) ELSE
                        coeff86 WHEN ( cur_count = to_unsigned(85, 7) ) ELSE
                        coeff87 WHEN ( cur_count = to_unsigned(86, 7) ) ELSE
                        coeff88 WHEN ( cur_count = to_unsigned(87, 7) ) ELSE
                        coeff89 WHEN ( cur_count = to_unsigned(88, 7) ) ELSE
                        coeff90 WHEN ( cur_count = to_unsigned(89, 7) ) ELSE
                        coeff91 WHEN ( cur_count = to_unsigned(90, 7) ) ELSE
                        coeff92;
  mul_temp <= inputmux_1 * product_1_mux;
  product_1 <= resize(shift_right(mul_temp(31) & mul_temp(31 DOWNTO 0) + ( "0" & (mul_temp(1))), 1), 32);

  prod_typeconvert_1 <= resize(product_1, 40);

  add_temp <= resize(prod_typeconvert_1, 41) + resize(acc_out_1, 41);
  acc_sum_1 <= add_temp(39 DOWNTO 0);

  acc_in_1 <= prod_typeconvert_1 WHEN ( phase_0 = '1' ) ELSE
                   acc_sum_1;

  Acc_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_out_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        acc_out_1 <= acc_in_1;
      END IF;
    END IF; 
  END PROCESS Acc_reg_1_process;

  Finalsum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        acc_final <= acc_out_1;
      END IF;
    END IF; 
  END PROCESS Finalsum_reg_process;

  output_typeconvert <= resize(shift_right(acc_final(29 DOWNTO 0) + ( "0" & (acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14) & NOT acc_final(14))), 14), 16);

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_91 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
