-- -------------------------------------------------------------
--
-- Module: tx_cic
-- Generated by MATLAB(R) 9.6 and Filter Design HDL Coder 3.1.5.
-- Generated on: 2019-11-02 12:26:18
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- EDAScriptGeneration: off
-- Name: tx_cic
-- TestBenchName: tx_cic_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure      : Cascaded Integrator-Comb Interpolator
-- Interpolation Factor  : 256
-- Differential Delay    : 2
-- Number of Sections    : 5
-- Stable                : Yes
-- Linear Phase          : Yes (Type 2)
--
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY tx_cic IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16_En15
         filter_out                      :   OUT   std_logic_vector(13 DOWNTO 0); -- sfix14_E24
         ce_out                          :   OUT   std_logic  
         );

END tx_cic;


----------------------------------------------------------------
--Module Architecture: tx_cic
----------------------------------------------------------------
ARCHITECTURE rtl OF tx_cic IS
  -- Local Functions
  -- Type Definitions
  TYPE vector_of_signed17               IS ARRAY (NATURAL RANGE <>) OF signed(16 DOWNTO 0);
  TYPE vector_of_signed18               IS ARRAY (NATURAL RANGE <>) OF signed(17 DOWNTO 0);
  TYPE vector_of_signed19               IS ARRAY (NATURAL RANGE <>) OF signed(18 DOWNTO 0);
  TYPE vector_of_signed20               IS ARRAY (NATURAL RANGE <>) OF signed(19 DOWNTO 0);
  TYPE vector_of_signed21               IS ARRAY (NATURAL RANGE <>) OF signed(20 DOWNTO 0);
  -- Constants
  CONSTANT zeroconst                      : signed(20 DOWNTO 0) := to_signed(0, 21); -- sfix21_En15
  -- Signals
  SIGNAL cur_count                        : unsigned(7 DOWNTO 0); -- ufix8
  SIGNAL phase_0                          : std_logic; -- boolean
  --   
  SIGNAL input_register                   : signed(15 DOWNTO 0); -- sfix16_En15
  --   -- Section 1 Signals 
  SIGNAL section_in1                      : signed(15 DOWNTO 0); -- sfix16_En15
  SIGNAL section_cast1                    : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL diff1                            : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL section_out1                     : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_cast                         : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_cast_1                       : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL sub_temp                         : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL int_delay_pipe                   : vector_of_signed17(0 TO 1); -- sfix17_En15
  --   -- Section 2 Signals 
  SIGNAL section_in2                      : signed(16 DOWNTO 0); -- sfix17_En15
  SIGNAL section_cast2                    : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL diff2                            : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_out2                     : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_2                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_cast_3                       : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL sub_temp_1                       : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL int_delay_pipe_1                 : vector_of_signed18(0 TO 1); -- sfix18_En15
  --   -- Section 3 Signals 
  SIGNAL section_in3                      : signed(17 DOWNTO 0); -- sfix18_En15
  SIGNAL section_cast3                    : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL diff3                            : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL section_out3                     : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL sub_cast_4                       : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL sub_cast_5                       : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL sub_temp_2                       : signed(19 DOWNTO 0); -- sfix20_En15
  SIGNAL int_delay_pipe_2                 : vector_of_signed19(0 TO 1); -- sfix19_En15
  --   -- Section 4 Signals 
  SIGNAL section_in4                      : signed(18 DOWNTO 0); -- sfix19_En15
  SIGNAL section_cast4                    : signed(19 DOWNTO 0); -- sfix20_En15
  SIGNAL diff4                            : signed(19 DOWNTO 0); -- sfix20_En15
  SIGNAL section_out4                     : signed(19 DOWNTO 0); -- sfix20_En15
  SIGNAL sub_cast_6                       : signed(19 DOWNTO 0); -- sfix20_En15
  SIGNAL sub_cast_7                       : signed(19 DOWNTO 0); -- sfix20_En15
  SIGNAL sub_temp_3                       : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL int_delay_pipe_3                 : vector_of_signed20(0 TO 1); -- sfix20_En15
  --   -- Section 5 Signals 
  SIGNAL section_in5                      : signed(19 DOWNTO 0); -- sfix20_En15
  SIGNAL section_cast5                    : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL diff5                            : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL section_out5                     : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL sub_cast_8                       : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL sub_cast_9                       : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL sub_temp_4                       : signed(21 DOWNTO 0); -- sfix22_En15
  SIGNAL int_delay_pipe_4                 : vector_of_signed21(0 TO 1); -- sfix21_En15
  SIGNAL upsampling                       : signed(20 DOWNTO 0); -- sfix21_En15
  --   -- Section 6 Signals 
  SIGNAL section_in6                      : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL sum1                             : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL section_out6                     : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL add_cast                         : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL add_cast_1                       : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL add_temp                         : signed(21 DOWNTO 0); -- sfix22_En15
  --   -- Section 7 Signals 
  SIGNAL section_in7                      : signed(20 DOWNTO 0); -- sfix21_En15
  SIGNAL section_cast7                    : signed(28 DOWNTO 0); -- sfix29_En15
  SIGNAL sum2                             : signed(28 DOWNTO 0); -- sfix29_En15
  SIGNAL section_out7                     : signed(28 DOWNTO 0); -- sfix29_En15
  SIGNAL add_cast_2                       : signed(28 DOWNTO 0); -- sfix29_En15
  SIGNAL add_cast_3                       : signed(28 DOWNTO 0); -- sfix29_En15
  SIGNAL add_temp_1                       : signed(29 DOWNTO 0); -- sfix30_En15
  --   -- Section 8 Signals 
  SIGNAL section_in8                      : signed(28 DOWNTO 0); -- sfix29_En15
  SIGNAL section_cast8                    : signed(36 DOWNTO 0); -- sfix37_En15
  SIGNAL sum3                             : signed(36 DOWNTO 0); -- sfix37_En15
  SIGNAL section_out8                     : signed(36 DOWNTO 0); -- sfix37_En15
  SIGNAL add_cast_4                       : signed(36 DOWNTO 0); -- sfix37_En15
  SIGNAL add_cast_5                       : signed(36 DOWNTO 0); -- sfix37_En15
  SIGNAL add_temp_2                       : signed(37 DOWNTO 0); -- sfix38_En15
  --   -- Section 9 Signals 
  SIGNAL section_in9                      : signed(36 DOWNTO 0); -- sfix37_En15
  SIGNAL section_cast9                    : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL sum4                             : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL section_out9                     : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL add_cast_6                       : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL add_cast_7                       : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL add_temp_3                       : signed(45 DOWNTO 0); -- sfix46_En15
  --   -- Section 10 Signals 
  SIGNAL section_in10                     : signed(44 DOWNTO 0); -- sfix45_En15
  SIGNAL section_cast10                   : signed(52 DOWNTO 0); -- sfix53_En15
  SIGNAL sum5                             : signed(52 DOWNTO 0); -- sfix53_En15
  SIGNAL section_out10                    : signed(52 DOWNTO 0); -- sfix53_En15
  SIGNAL add_cast_8                       : signed(52 DOWNTO 0); -- sfix53_En15
  SIGNAL add_cast_9                       : signed(52 DOWNTO 0); -- sfix53_En15
  SIGNAL add_temp_4                       : signed(53 DOWNTO 0); -- sfix54_En15
  SIGNAL output_typeconvert               : signed(13 DOWNTO 0); -- sfix14_E24
  --   
  SIGNAL output_register                  : signed(13 DOWNTO 0); -- sfix14_E24


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(0, 8);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(255, 8) THEN
          cur_count <= to_unsigned(0, 8);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 8);
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 8) AND clk_enable = '1' ELSE '0';

  --   ------------------ Input Register ------------------

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  --   ------------------ Section # 1 : Comb ------------------

  section_in1 <= input_register;

  section_cast1 <= resize(section_in1, 17);

  sub_cast <= section_cast1;
  sub_cast_1 <= diff1;
  sub_temp <= resize(sub_cast, 18) - resize(sub_cast_1, 18);
  section_out1 <= sub_temp(16 DOWNTO 0);

  comb_delay_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        int_delay_pipe(1) <= int_delay_pipe(0);
        int_delay_pipe(0) <= section_cast1;
      END IF;
    END IF;
  END PROCESS comb_delay_section1;
  diff1 <= int_delay_pipe(1);

  --   ------------------ Section # 2 : Comb ------------------

  section_in2 <= section_out1;

  section_cast2 <= resize(section_in2, 18);

  sub_cast_2 <= section_cast2;
  sub_cast_3 <= diff2;
  sub_temp_1 <= resize(sub_cast_2, 19) - resize(sub_cast_3, 19);
  section_out2 <= sub_temp_1(17 DOWNTO 0);

  comb_delay_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe_1 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        int_delay_pipe_1(1) <= int_delay_pipe_1(0);
        int_delay_pipe_1(0) <= section_cast2;
      END IF;
    END IF;
  END PROCESS comb_delay_section2;
  diff2 <= int_delay_pipe_1(1);

  --   ------------------ Section # 3 : Comb ------------------

  section_in3 <= section_out2;

  section_cast3 <= resize(section_in3, 19);

  sub_cast_4 <= section_cast3;
  sub_cast_5 <= diff3;
  sub_temp_2 <= resize(sub_cast_4, 20) - resize(sub_cast_5, 20);
  section_out3 <= sub_temp_2(18 DOWNTO 0);

  comb_delay_section3 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe_2 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        int_delay_pipe_2(1) <= int_delay_pipe_2(0);
        int_delay_pipe_2(0) <= section_cast3;
      END IF;
    END IF;
  END PROCESS comb_delay_section3;
  diff3 <= int_delay_pipe_2(1);

  --   ------------------ Section # 4 : Comb ------------------

  section_in4 <= section_out3;

  section_cast4 <= resize(section_in4, 20);

  sub_cast_6 <= section_cast4;
  sub_cast_7 <= diff4;
  sub_temp_3 <= resize(sub_cast_6, 21) - resize(sub_cast_7, 21);
  section_out4 <= sub_temp_3(19 DOWNTO 0);

  comb_delay_section4 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe_3 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        int_delay_pipe_3(1) <= int_delay_pipe_3(0);
        int_delay_pipe_3(0) <= section_cast4;
      END IF;
    END IF;
  END PROCESS comb_delay_section4;
  diff4 <= int_delay_pipe_3(1);

  --   ------------------ Section # 5 : Comb ------------------

  section_in5 <= section_out4;

  section_cast5 <= resize(section_in5, 21);

  sub_cast_8 <= section_cast5;
  sub_cast_9 <= diff5;
  sub_temp_4 <= resize(sub_cast_8, 22) - resize(sub_cast_9, 22);
  section_out5 <= sub_temp_4(20 DOWNTO 0);

  comb_delay_section5 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe_4 <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        int_delay_pipe_4(1) <= int_delay_pipe_4(0);
        int_delay_pipe_4(0) <= section_cast5;
      END IF;
    END IF;
  END PROCESS comb_delay_section5;
  diff5 <= int_delay_pipe_4(1);

  upsampling <= section_out5 WHEN ( phase_0 = '1' ) ELSE
                zeroconst;
  --   ------------------ Section # 6 : Integrator ------------------

  section_in6 <= upsampling;

  add_cast <= section_in6;
  add_cast_1 <= section_out6;
  add_temp <= resize(add_cast, 22) + resize(add_cast_1, 22);
  sum1 <= add_temp(20 DOWNTO 0);

  integrator_delay_section6 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out6 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out6 <= sum1;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section6;

  --   ------------------ Section # 7 : Integrator ------------------

  section_in7 <= section_out6;

  section_cast7 <= resize(section_in7, 29);

  add_cast_2 <= section_cast7;
  add_cast_3 <= section_out7;
  add_temp_1 <= resize(add_cast_2, 30) + resize(add_cast_3, 30);
  sum2 <= add_temp_1(28 DOWNTO 0);

  integrator_delay_section7 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out7 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out7 <= sum2;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section7;

  --   ------------------ Section # 8 : Integrator ------------------

  section_in8 <= section_out7;

  section_cast8 <= resize(section_in8, 37);

  add_cast_4 <= section_cast8;
  add_cast_5 <= section_out8;
  add_temp_2 <= resize(add_cast_4, 38) + resize(add_cast_5, 38);
  sum3 <= add_temp_2(36 DOWNTO 0);

  integrator_delay_section8 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out8 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out8 <= sum3;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section8;

  --   ------------------ Section # 9 : Integrator ------------------

  section_in9 <= section_out8;

  section_cast9 <= resize(section_in9, 45);

  add_cast_6 <= section_cast9;
  add_cast_7 <= section_out9;
  add_temp_3 <= resize(add_cast_6, 46) + resize(add_cast_7, 46);
  sum4 <= add_temp_3(44 DOWNTO 0);

  integrator_delay_section9 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out9 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out9 <= sum4;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section9;

  --   ------------------ Section # 10 : Integrator ------------------

  section_in10 <= section_out9;

  section_cast10 <= resize(section_in10, 53);

  add_cast_8 <= section_cast10;
  add_cast_9 <= section_out10;
  add_temp_4 <= resize(add_cast_8, 54) + resize(add_cast_9, 54);
  sum5 <= add_temp_4(52 DOWNTO 0);

  integrator_delay_section10 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out10 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out10 <= sum5;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section10;

  output_typeconvert <= section_out10(52 DOWNTO 39);

  --   ------------------ Output Register ------------------

  output_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_reg_process;

  -- Assignment Statements
  ce_out <= phase_0;
  filter_out <= std_logic_vector(output_register);
END rtl;
