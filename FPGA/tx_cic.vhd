-- -------------------------------------------------------------
--
-- Module: tx_cic
-- Generated by MATLAB(R) 9.9 and Filter Design HDL Coder 3.1.8.
-- Generated on: 2021-02-08 22:00:53
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- AddPipelineRegisters: on
-- Name: tx_cic
-- TestBenchName: tx_cic_tb
-- TestBenchStimulus: step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully parallel
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure      : Cascaded Integrator-Comb Interpolator
-- Interpolation Factor  : 1280
-- Differential Delay    : 1
-- Number of Sections    : 1
-- Stable                : Yes
-- Linear Phase          : Yes (Type 2)
--
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY tx_cic IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(15 DOWNTO 0); -- sfix16
         filter_out                      :   OUT   std_logic_vector(13 DOWNTO 0); -- sfix14_E2
         ce_out                          :   OUT   std_logic  
         );

END tx_cic;


----------------------------------------------------------------
--Module Architecture: tx_cic
----------------------------------------------------------------
ARCHITECTURE rtl OF tx_cic IS
  -- Local Functions
  -- Type Definitions
  -- Constants
  CONSTANT zeroconst                      : signed(15 DOWNTO 0) := to_signed(0, 16); -- sfix16
  -- Signals
  SIGNAL cur_count                        : unsigned(10 DOWNTO 0); -- ufix11
  SIGNAL phase_0                          : std_logic; -- boolean
  --   
  SIGNAL input_register                   : signed(15 DOWNTO 0); -- sfix16
  --   -- Section 1 Signals 
  SIGNAL section_in1                      : signed(15 DOWNTO 0); -- sfix16
  SIGNAL diff1                            : signed(15 DOWNTO 0); -- sfix16
  SIGNAL section_out1                     : signed(15 DOWNTO 0); -- sfix16
  SIGNAL sub_cast                         : signed(15 DOWNTO 0); -- sfix16
  SIGNAL sub_cast_1                       : signed(15 DOWNTO 0); -- sfix16
  SIGNAL sub_temp                         : signed(16 DOWNTO 0); -- sfix17
  SIGNAL cic_pipeline1                    : signed(15 DOWNTO 0); -- sfix16
  SIGNAL upsampling                       : signed(15 DOWNTO 0); -- sfix16
  --   -- Section 2 Signals 
  SIGNAL section_in2                      : signed(15 DOWNTO 0); -- sfix16
  SIGNAL sum1                             : signed(15 DOWNTO 0); -- sfix16
  SIGNAL section_out2                     : signed(15 DOWNTO 0); -- sfix16
  SIGNAL add_cast                         : signed(15 DOWNTO 0); -- sfix16
  SIGNAL add_cast_1                       : signed(15 DOWNTO 0); -- sfix16
  SIGNAL add_temp                         : signed(16 DOWNTO 0); -- sfix17
  SIGNAL output_typeconvert               : signed(13 DOWNTO 0); -- sfix14_E2
  --   
  SIGNAL output_register                  : signed(13 DOWNTO 0); -- sfix14_E2


BEGIN

  -- Block Statements
  --   ------------------ CE Output Generation ------------------

  ce_output : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(0, 11);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count >= to_unsigned(1279, 11) THEN
          cur_count <= to_unsigned(0, 11);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 11);
        END IF;
      END IF;
    END IF; 
  END PROCESS ce_output;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 11) AND clk_enable = '1' ELSE '0';

  --   ------------------ Input Register ------------------

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  --   ------------------ Section # 1 : Comb ------------------

  section_in1 <= input_register;

  sub_cast <= section_in1;
  sub_cast_1 <= diff1;
  sub_temp <= resize(sub_cast, 17) - resize(sub_cast_1, 17);
  section_out1 <= sub_temp(15 DOWNTO 0);

  comb_delay_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diff1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        diff1 <= section_in1;
      END IF;
    END IF; 
  END PROCESS comb_delay_section1;

  cic_pipeline_process_section1 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cic_pipeline1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        cic_pipeline1 <= section_out1;
      END IF;
    END IF; 
  END PROCESS cic_pipeline_process_section1;

  upsampling <= cic_pipeline1 WHEN ( phase_0 = '1' ) ELSE
                zeroconst;
  --   ------------------ Section # 2 : Integrator ------------------

  section_in2 <= upsampling;

  add_cast <= section_in2;
  add_cast_1 <= section_out2;
  add_temp <= resize(add_cast, 17) + resize(add_cast_1, 17);
  sum1 <= add_temp(15 DOWNTO 0);

  integrator_delay_section2 : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      section_out2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        section_out2 <= sum1;
      END IF;
    END IF; 
  END PROCESS integrator_delay_section2;

  output_typeconvert <= section_out2(15 DOWNTO 2);

  --   ------------------ Output Register ------------------

  output_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_reg_process;

  -- Assignment Statements
  ce_out <= phase_0;
  filter_out <= std_logic_vector(output_register);
END rtl;
